--
-- PostgreSQL database dump
--

-- Dumped from database version 14.17 (Homebrew)
-- Dumped by pg_dump version 14.17 (Homebrew)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: vector; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS vector WITH SCHEMA public;


--
-- Name: EXTENSION vector; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION vector IS 'vector data type and ivfflat and hnsw access methods';


--
-- Name: activate_snapshot(text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.activate_snapshot(p_snapshot_id text, p_activated_by text DEFAULT 'system'::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_domain TEXT;
BEGIN
  -- Get domain from snapshot
  SELECT domain_context INTO v_domain
  FROM domain_context_snapshots
  WHERE snapshot_id = p_snapshot_id;

  IF v_domain IS NULL THEN
    RAISE EXCEPTION 'Snapshot not found: %', p_snapshot_id;
  END IF;

  -- Deactivate current snapshot
  UPDATE domain_context_snapshots
  SET
    is_current = false,
    deactivated_at = NOW()
  WHERE domain_context = v_domain
    AND is_current = true;

  -- Activate new snapshot
  UPDATE domain_context_snapshots
  SET
    is_current = true,
    activated_at = NOW(),
    status = 'production'
  WHERE snapshot_id = p_snapshot_id;

  -- Log deployment
  INSERT INTO snapshot_deployments (
    snapshot_id,
    environment,
    deployed_by,
    deployment_method,
    status
  ) VALUES (
    p_snapshot_id,
    'production',
    p_activated_by,
    'manual',
    'active'
  );

  RETURN TRUE;
END;
$$;


ALTER FUNCTION public.activate_snapshot(p_snapshot_id text, p_activated_by text) OWNER TO matthewmauer;

--
-- Name: FUNCTION activate_snapshot(p_snapshot_id text, p_activated_by text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.activate_snapshot(p_snapshot_id text, p_activated_by text) IS 'Make a snapshot the active/current one';


--
-- Name: calculate_experiment_significance(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_experiment_significance(p_experiment_id integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_control_success INTEGER;
  v_control_total INTEGER;
  v_treatment_success INTEGER;
  v_treatment_total INTEGER;
  v_control_rate REAL;
  v_treatment_rate REAL;
  v_pooled_rate REAL;
  v_se REAL;
  v_z_score REAL;
  v_p_value REAL;
  v_is_significant BOOLEAN := false;
BEGIN
  -- Get control variant stats
  SELECT success_count, total_observations, success_rate
  INTO v_control_success, v_control_total, v_control_rate
  FROM experiment_statistics es
  JOIN experiment_variants ev ON ev.id = es.variant_id
  WHERE es.experiment_id = p_experiment_id
    AND ev.is_control = true
  LIMIT 1;

  -- Get treatment variant stats (first non-control)
  SELECT success_count, total_observations, success_rate
  INTO v_treatment_success, v_treatment_total, v_treatment_rate
  FROM experiment_statistics es
  JOIN experiment_variants ev ON ev.id = es.variant_id
  WHERE es.experiment_id = p_experiment_id
    AND ev.is_control = false
  LIMIT 1;

  -- Check if we have enough data
  IF v_control_total IS NULL OR v_treatment_total IS NULL THEN
    RETURN false;
  END IF;

  IF v_control_total < 30 OR v_treatment_total < 30 THEN
    RETURN false;
  END IF;

  -- Calculate pooled rate
  v_pooled_rate := (v_control_success + v_treatment_success)::REAL / (v_control_total + v_treatment_total)::REAL;

  -- Calculate standard error
  v_se := SQRT(v_pooled_rate * (1 - v_pooled_rate) * ((1.0 / v_control_total) + (1.0 / v_treatment_total)));

  IF v_se = 0 THEN
    RETURN false;
  END IF;

  -- Calculate z-score
  v_z_score := ABS(v_control_rate - v_treatment_rate) / v_se;

  -- Approximate p-value (two-tailed test)
  -- Using normal approximation: p ≈ 2 * (1 - Φ(|z|))
  -- For simplicity, use threshold: |z| > 1.96 means p < 0.05
  v_is_significant := v_z_score > 1.96;
  v_p_value := CASE
    WHEN v_z_score > 2.58 THEN 0.01
    WHEN v_z_score > 1.96 THEN 0.05
    ELSE 0.10
  END;

  -- Update statistics
  UPDATE experiment_statistics
  SET p_value = v_p_value,
      is_significant = v_is_significant
  WHERE experiment_id = p_experiment_id;

  RETURN v_is_significant;
END;
$$;


ALTER FUNCTION public.calculate_experiment_significance(p_experiment_id integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION calculate_experiment_significance(p_experiment_id integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.calculate_experiment_significance(p_experiment_id integer) IS 'Calculate statistical significance using chi-square test';


--
-- Name: calculate_hint_xp(character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_hint_xp(p_user_id character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  total_xp INT;
BEGIN
  SELECT COALESCE(SUM(xp_earned), 0) INTO total_xp
  FROM student_hints
  WHERE user_id = p_user_id
    AND visible = true;

  RETURN total_xp;
END;
$$;


ALTER FUNCTION public.calculate_hint_xp(p_user_id character varying) OWNER TO matthewmauer;

--
-- Name: FUNCTION calculate_hint_xp(p_user_id character varying); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.calculate_hint_xp(p_user_id character varying) IS 'Calculate total XP earned from helpful hints';


--
-- Name: calculate_implementation_score(uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_implementation_score(p_implementation_id uuid) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_score DECIMAL(10,2) := 0;
  v_auto_score DECIMAL(10,2) := 0;
  v_human_score DECIMAL(10,2) := 0;
  v_impl RECORD;
BEGIN
  -- Get implementation details
  SELECT * INTO v_impl
  FROM domain_implementations
  WHERE implementation_id = p_implementation_id;

  IF NOT FOUND THEN
    RETURN 0;
  END IF;

  -- Automatic scoring (max 50 points)
  IF v_impl.syntax_valid THEN
    v_auto_score := v_auto_score + 10;
  END IF;

  IF v_impl.has_comments THEN
    v_auto_score := v_auto_score + 5;
  END IF;

  IF v_impl.uses_domain_colors THEN
    v_auto_score := v_auto_score + 15;
  END IF;

  IF v_impl.uses_expected_services THEN
    v_auto_score := v_auto_score + 10;
  END IF;

  -- Code length bonus (up to 10 points)
  IF v_impl.code_length BETWEEN 100 AND 1000 THEN
    v_auto_score := v_auto_score + 10;
  ELSIF v_impl.code_length BETWEEN 50 AND 100 OR v_impl.code_length BETWEEN 1000 AND 2000 THEN
    v_auto_score := v_auto_score + 5;
  END IF;

  -- Human scoring (max 50 points)
  -- Swipe ratio: likes / (likes + dislikes) * 30
  IF (v_impl.swipe_right_count + v_impl.swipe_left_count) > 0 THEN
    v_human_score := v_human_score + (
      v_impl.swipe_right_count::DECIMAL /
      (v_impl.swipe_right_count + v_impl.swipe_left_count) * 30
    );
  END IF;

  -- Detailed feedback bonus (up to 20 points from avg of 4 categories)
  SELECT
    (AVG(creativity_score) + AVG(functionality_score) +
     AVG(code_quality_score) + AVG(brand_alignment_score)) / 4 * 4
  INTO v_human_score
  FROM domain_judgments
  WHERE implementation_id = p_implementation_id
    AND creativity_score IS NOT NULL;

  v_human_score := COALESCE(v_human_score, 0);

  -- Total score
  v_score := v_auto_score + v_human_score;

  -- Update the implementation
  UPDATE domain_implementations
  SET total_score = v_score
  WHERE implementation_id = p_implementation_id;

  RETURN v_score;
END;
$$;


ALTER FUNCTION public.calculate_implementation_score(p_implementation_id uuid) OWNER TO matthewmauer;

--
-- Name: calculate_leftpad_risk(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_leftpad_risk(p_lines_of_code integer, p_dependent_count integer, p_complexity_score integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    risk_score INTEGER := 0;
BEGIN
    -- High risk if: small codebase + many dependents + low complexity

    -- Small codebase factor (0-40 points)
    IF p_lines_of_code < 50 THEN
        risk_score := risk_score + 40;
    ELSIF p_lines_of_code < 200 THEN
        risk_score := risk_score + 25;
    ELSIF p_lines_of_code < 500 THEN
        risk_score := risk_score + 10;
    END IF;

    -- Many dependents factor (0-40 points)
    IF p_dependent_count > 1000 THEN
        risk_score := risk_score + 40;
    ELSIF p_dependent_count > 100 THEN
        risk_score := risk_score + 25;
    ELSIF p_dependent_count > 10 THEN
        risk_score := risk_score + 10;
    END IF;

    -- Low complexity factor (0-20 points)
    IF p_complexity_score < 10 THEN
        risk_score := risk_score + 20;
    ELSIF p_complexity_score < 50 THEN
        risk_score := risk_score + 10;
    END IF;

    RETURN LEAST(risk_score, 100);
END;
$$;


ALTER FUNCTION public.calculate_leftpad_risk(p_lines_of_code integer, p_dependent_count integer, p_complexity_score integer) OWNER TO matthewmauer;

--
-- Name: calculate_model_throughput(text, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_model_throughput(p_model_id text, p_window_hours integer DEFAULT 24) RETURNS TABLE(avg_tps real, p50_tps real, p95_tps real, min_tps real, max_tps real, measurement_count bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    AVG(response_tokens::REAL / (response_time_ms::REAL / 1000))::REAL as avg_tps,
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY response_tokens::REAL / (response_time_ms::REAL / 1000))::REAL as p50_tps,
    PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY response_tokens::REAL / (response_time_ms::REAL / 1000))::REAL as p95_tps,
    MIN(response_tokens::REAL / (response_time_ms::REAL / 1000))::REAL as min_tps,
    MAX(response_tokens::REAL / (response_time_ms::REAL / 1000))::REAL as max_tps,
    COUNT(*)::BIGINT as measurement_count
  FROM model_usage_log
  WHERE model_id = p_model_id
    AND status = 'success'
    AND response_tokens > 0
    AND response_time_ms > 0
    AND timestamp > NOW() - (p_window_hours || ' hours')::INTERVAL;
END;
$$;


ALTER FUNCTION public.calculate_model_throughput(p_model_id text, p_window_hours integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION calculate_model_throughput(p_model_id text, p_window_hours integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.calculate_model_throughput(p_model_id text, p_window_hours integer) IS 'Calculate tokens/second from usage log over time window';


--
-- Name: calculate_optimal_chunk_size(text, integer, real); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_optimal_chunk_size(p_model_id text, p_target_seconds integer DEFAULT 30, p_safety_margin real DEFAULT 0.7) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_tps REAL;
  v_optimal_tokens INTEGER;
BEGIN
  -- Get model throughput
  SELECT avg_tokens_per_second INTO v_tps
  FROM model_benchmarks
  WHERE model_id = p_model_id
    AND is_active = true;

  IF v_tps IS NULL OR v_tps = 0 THEN
    -- Default to 4096 if no benchmark
    RETURN 4096;
  END IF;

  -- Calculate: tokens = throughput × time × safety margin
  v_optimal_tokens := FLOOR(v_tps * p_target_seconds * p_safety_margin);

  -- Clamp to reasonable range
  RETURN GREATEST(LEAST(v_optimal_tokens, 20000), 100);
END;
$$;


ALTER FUNCTION public.calculate_optimal_chunk_size(p_model_id text, p_target_seconds integer, p_safety_margin real) OWNER TO matthewmauer;

--
-- Name: FUNCTION calculate_optimal_chunk_size(p_model_id text, p_target_seconds integer, p_safety_margin real); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.calculate_optimal_chunk_size(p_model_id text, p_target_seconds integer, p_safety_margin real) IS 'Calculate optimal chunk size to hit target block time';


--
-- Name: calculate_post_engagement(integer, integer, integer, double precision); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_post_engagement(upvotes integer, downvotes integer, comment_count integer, age_hours double precision) RETURNS double precision
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  -- Reddit's "hot" algorithm (simplified)
  RETURN (
    (upvotes - downvotes + (comment_count * 2))::FLOAT /
    POWER(age_hours + 2, 1.5)
  );
END;
$$;


ALTER FUNCTION public.calculate_post_engagement(upvotes integer, downvotes integer, comment_count integer, age_hours double precision) OWNER TO matthewmauer;

--
-- Name: calculate_ranking_score(text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_ranking_score(p_use_case text, p_model_id text) RETURNS real
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_success_rate REAL;
  v_avg_time REAL;
  v_avg_cost REAL;
  v_followup_rate REAL;
  v_score REAL;
BEGIN
  -- Get metrics from usage log
  SELECT
    COUNT(*) FILTER (WHERE status = 'success')::REAL / COUNT(*)::REAL,
    AVG(response_time_ms),
    AVG(cost_usd),
    COUNT(*) FILTER (WHERE had_followup = true)::REAL / COUNT(*)::REAL
  INTO v_success_rate, v_avg_time, v_avg_cost, v_followup_rate
  FROM model_usage_log
  WHERE use_case_category = p_use_case
    AND model_id = p_model_id;

  IF v_success_rate IS NULL THEN
    RETURN 0;  -- No data
  END IF;

  -- Calculate score (0-100)
  -- Higher success rate = better
  -- Lower response time = better
  -- Lower cost = better
  -- Lower followup rate = better (user satisfied)

  v_score :=
    (v_success_rate * 40) +                           -- 40% weight on success
    ((1.0 - (v_avg_time / 10000.0)) * 30) +          -- 30% weight on speed
    ((1.0 - LEAST(v_avg_cost / 0.1, 1.0)) * 20) +    -- 20% weight on cost
    ((1.0 - v_followup_rate) * 10);                   -- 10% weight on satisfaction

  RETURN GREATEST(LEAST(v_score, 100), 0);  -- Clamp 0-100
END;
$$;


ALTER FUNCTION public.calculate_ranking_score(p_use_case text, p_model_id text) OWNER TO matthewmauer;

--
-- Name: calculate_sma(character varying, character varying, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_sma(p_symbol character varying, p_timeframe character varying, p_periods integer, p_at_time timestamp without time zone) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_sma DECIMAL(20, 8);
BEGIN
  SELECT AVG(close_price) INTO v_sma
  FROM (
    SELECT close_price
    FROM price_candles
    WHERE symbol = p_symbol
      AND timeframe = p_timeframe
      AND candle_start <= p_at_time
    ORDER BY candle_start DESC
    LIMIT p_periods
  ) recent_candles;

  RETURN v_sma;
END;
$$;


ALTER FUNCTION public.calculate_sma(p_symbol character varying, p_timeframe character varying, p_periods integer, p_at_time timestamp without time zone) OWNER TO matthewmauer;

--
-- Name: calculate_user_level(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.calculate_user_level(p_total_xp integer) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  -- Level formula: sqrt(xp / 100)
  -- Level 1 = 100 XP
  -- Level 2 = 400 XP
  -- Level 3 = 900 XP
  -- Level 10 = 10,000 XP
  RETURN FLOOR(SQRT(p_total_xp / 100.0))::INT;
END;
$$;


ALTER FUNCTION public.calculate_user_level(p_total_xp integer) OWNER TO matthewmauer;

--
-- Name: check_duplicate_vote(uuid, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.check_duplicate_vote(p_user_id uuid, p_session_id character varying, p_item_a_id integer, p_item_b_id integer) RETURNS TABLE(is_duplicate boolean, previous_vote_id integer, previous_voted_at timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_vote RECORD;
BEGIN
  -- Check user votes (if logged in)
  IF p_user_id IS NOT NULL THEN
    SELECT id, elo_user_votes.voted_at INTO v_vote
    FROM elo_user_votes
    WHERE user_id = p_user_id
      AND (
        (item_a_id = p_item_a_id AND item_b_id = p_item_b_id)
        OR (item_a_id = p_item_b_id AND item_b_id = p_item_a_id)
      )
      AND elo_user_votes.voted_at > NOW() - INTERVAL '24 hours'
    LIMIT 1;

    IF FOUND THEN
      RETURN QUERY SELECT TRUE, v_vote.id, v_vote.voted_at;
      RETURN;
    END IF;
  END IF;

  -- Check session votes (anonymous)
  IF p_session_id IS NOT NULL THEN
    SELECT id, elo_user_votes.voted_at INTO v_vote
    FROM elo_user_votes
    WHERE session_id = p_session_id
      AND (
        (item_a_id = p_item_a_id AND item_b_id = p_item_b_id)
        OR (item_a_id = p_item_b_id AND item_b_id = p_item_a_id)
      )
      AND elo_user_votes.voted_at > NOW() - INTERVAL '24 hours'
    LIMIT 1;

    IF FOUND THEN
      RETURN QUERY SELECT TRUE, v_vote.id, v_vote.voted_at;
      RETURN;
    END IF;
  END IF;

  -- No duplicate found
  RETURN QUERY SELECT FALSE, NULL::INTEGER, NULL::TIMESTAMP;
END;
$$;


ALTER FUNCTION public.check_duplicate_vote(p_user_id uuid, p_session_id character varying, p_item_a_id integer, p_item_b_id integer) OWNER TO matthewmauer;

--
-- Name: check_email_breach(character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.check_email_breach(p_tagged_email character varying) RETURNS TABLE(breached boolean, service_tag character varying, breach_date timestamp with time zone, spam_count integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    breach_detected,
    service_tag,
    breach_detected_at,
    spam_count
  FROM email_breach_tracker
  WHERE tagged_email = p_tagged_email;
END;
$$;


ALTER FUNCTION public.check_email_breach(p_tagged_email character varying) OWNER TO matthewmauer;

--
-- Name: FUNCTION check_email_breach(p_tagged_email character varying); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.check_email_breach(p_tagged_email character varying) IS 'Check if a tagged email has been breached';


--
-- Name: check_voter_allowed(uuid, character varying, character varying, inet); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.check_voter_allowed(p_user_id uuid, p_session_id character varying, p_device_fingerprint character varying, p_ip_address inet) RETURNS TABLE(allowed boolean, reason text)
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Check if user is blocked
  IF EXISTS (
    SELECT 1 FROM elo_blocked_voters
    WHERE block_type = 'user'
      AND block_value = p_user_id::TEXT
      AND (expires_at IS NULL OR expires_at > NOW())
  ) THEN
    RETURN QUERY SELECT FALSE, 'User account is blocked from voting';
    RETURN;
  END IF;

  -- Check if IP is blocked
  IF EXISTS (
    SELECT 1 FROM elo_blocked_voters
    WHERE block_type = 'ip'
      AND block_value = p_ip_address::TEXT
      AND (expires_at IS NULL OR expires_at > NOW())
  ) THEN
    RETURN QUERY SELECT FALSE, 'IP address is blocked from voting';
    RETURN;
  END IF;

  -- Check if device is blocked
  IF EXISTS (
    SELECT 1 FROM elo_blocked_voters
    WHERE block_type = 'device'
      AND block_value = p_device_fingerprint
      AND (expires_at IS NULL OR expires_at > NOW())
  ) THEN
    RETURN QUERY SELECT FALSE, 'Device is blocked from voting';
    RETURN;
  END IF;

  -- Check if session is blocked
  IF EXISTS (
    SELECT 1 FROM elo_blocked_voters
    WHERE block_type = 'session'
      AND block_value = p_session_id
      AND (expires_at IS NULL OR expires_at > NOW())
  ) THEN
    RETURN QUERY SELECT FALSE, 'Session is blocked from voting';
    RETURN;
  END IF;

  -- All checks passed
  RETURN QUERY SELECT TRUE, 'Allowed';
END;
$$;


ALTER FUNCTION public.check_voter_allowed(p_user_id uuid, p_session_id character varying, p_device_fingerprint character varying, p_ip_address inet) OWNER TO matthewmauer;

--
-- Name: clean_old_arbitrage(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.clean_old_arbitrage() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM arbitrage_opportunities
  WHERE detected_at < NOW() - INTERVAL '30 days';

  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.clean_old_arbitrage() OWNER TO matthewmauer;

--
-- Name: clean_old_correlations(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.clean_old_correlations() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM price_correlations
  WHERE calculated_at < NOW() - INTERVAL '90 days';

  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.clean_old_correlations() OWNER TO matthewmauer;

--
-- Name: clean_old_events(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.clean_old_events() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM event_log
  WHERE recorded_at < NOW() - INTERVAL '7 days';

  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.clean_old_events() OWNER TO matthewmauer;

--
-- Name: clean_old_guardian_logs(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.clean_old_guardian_logs() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM guardian_log
  WHERE timestamp < NOW() - INTERVAL '30 days';

  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.clean_old_guardian_logs() OWNER TO matthewmauer;

--
-- Name: clean_old_price_cache(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.clean_old_price_cache() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  DELETE FROM price_cache
  WHERE id NOT IN (
    SELECT id FROM price_cache
    ORDER BY cached_at DESC
    LIMIT 1000
  );
END;
$$;


ALTER FUNCTION public.clean_old_price_cache() OWNER TO matthewmauer;

--
-- Name: clean_old_scheduler_logs(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.clean_old_scheduler_logs() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  DELETE FROM scheduler_log
  WHERE id NOT IN (
    SELECT id FROM scheduler_log
    ORDER BY started_at DESC
    LIMIT 10000
  );
END;
$$;


ALTER FUNCTION public.clean_old_scheduler_logs() OWNER TO matthewmauer;

--
-- Name: cleanup_expired_credentials(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.cleanup_expired_credentials() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM service_credentials
  WHERE expires_at IS NOT NULL AND expires_at < NOW();

  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.cleanup_expired_credentials() OWNER TO matthewmauer;

--
-- Name: FUNCTION cleanup_expired_credentials(); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.cleanup_expired_credentials() IS 'Removes expired credentials (run periodically via cron)';


--
-- Name: cleanup_expired_qr_sessions(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.cleanup_expired_qr_sessions() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INT;
BEGIN
  UPDATE qr_sessions
  SET status = 'expired'
  WHERE status = 'active'
    AND expires_at < NOW();

  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.cleanup_expired_qr_sessions() OWNER TO matthewmauer;

--
-- Name: FUNCTION cleanup_expired_qr_sessions(); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.cleanup_expired_qr_sessions() IS 'Mark expired QR sessions as expired';


--
-- Name: cleanup_inactive_sessions(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.cleanup_inactive_sessions() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Mark sessions as inactive if no heartbeat for 5 minutes
  UPDATE visit_sessions
  SET
    is_active = false,
    end_time = COALESCE(end_time, last_heartbeat_at, NOW())
  WHERE
    is_active = true
    AND last_heartbeat_at < NOW() - INTERVAL '5 minutes';

  -- Auto-detect bounces for ended sessions
  PERFORM detect_bounces();
END;
$$;


ALTER FUNCTION public.cleanup_inactive_sessions() OWNER TO matthewmauer;

--
-- Name: cleanup_old_analytics(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.cleanup_old_analytics(retention_days integer DEFAULT 90) RETURNS TABLE(table_name text, deleted_rows bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
  cutoff_date TIMESTAMP;
  deleted_count BIGINT;
BEGIN
  cutoff_date := NOW() - (retention_days || ' days')::INTERVAL;

  -- Clean up page views
  DELETE FROM analytics_page_views WHERE timestamp < cutoff_date;
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN QUERY SELECT 'analytics_page_views'::TEXT, deleted_count;

  -- Clean up feature usage
  DELETE FROM analytics_feature_usage WHERE timestamp < cutoff_date;
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN QUERY SELECT 'analytics_feature_usage'::TEXT, deleted_count;

  -- Clean up conversions
  DELETE FROM analytics_conversions WHERE timestamp < cutoff_date;
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN QUERY SELECT 'analytics_conversions'::TEXT, deleted_count;

  -- Clean up attribution (cascade will handle this from conversions)
  DELETE FROM analytics_attribution WHERE timestamp < cutoff_date;
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN QUERY SELECT 'analytics_attribution'::TEXT, deleted_count;
END;
$$;


ALTER FUNCTION public.cleanup_old_analytics(retention_days integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION cleanup_old_analytics(retention_days integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.cleanup_old_analytics(retention_days integer) IS 'Auto-delete analytics data older than retention period (GDPR compliance)';


--
-- Name: cleanup_old_biometric_challenges(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.cleanup_old_biometric_challenges() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INT;
BEGIN
  DELETE FROM biometric_challenges
  WHERE expires_at < NOW() - INTERVAL '1 hour';

  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.cleanup_old_biometric_challenges() OWNER TO matthewmauer;

--
-- Name: FUNCTION cleanup_old_biometric_challenges(); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.cleanup_old_biometric_challenges() IS 'Delete old biometric challenges';


--
-- Name: cleanup_old_requests(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.cleanup_old_requests(p_keep_days integer DEFAULT 7) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_count INTEGER;
BEGIN
  WITH deleted AS (
    DELETE FROM request_lifecycle
    WHERE state IN ('completed', 'failed', 'killed', 'timeout')
      AND COALESCE(completed_at, failed_at, killed_at, timeout_at) < NOW() - (p_keep_days || ' days')::INTERVAL
    RETURNING request_id
  )
  SELECT COUNT(*) INTO v_count FROM deleted;

  RETURN v_count;
END;
$$;


ALTER FUNCTION public.cleanup_old_requests(p_keep_days integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION cleanup_old_requests(p_keep_days integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.cleanup_old_requests(p_keep_days integer) IS 'Clean up completed/failed/killed requests older than N days';


--
-- Name: cleanup_telemetry_data(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.cleanup_telemetry_data(p_days integer DEFAULT 90) RETURNS TABLE(events_deleted bigint, performance_deleted bigint, sessions_deleted bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_events_deleted BIGINT;
  v_performance_deleted BIGINT;
  v_sessions_deleted BIGINT;
BEGIN
  -- Delete old events
  DELETE FROM telemetry_events
  WHERE created_at < NOW() - (p_days || ' days')::INTERVAL;
  GET DIAGNOSTICS v_events_deleted = ROW_COUNT;

  -- Delete old performance data
  DELETE FROM telemetry_performance
  WHERE created_at < NOW() - (p_days || ' days')::INTERVAL;
  GET DIAGNOSTICS v_performance_deleted = ROW_COUNT;

  -- Delete old sessions
  DELETE FROM telemetry_sessions
  WHERE created_at < NOW() - (p_days || ' days')::INTERVAL;
  GET DIAGNOSTICS v_sessions_deleted = ROW_COUNT;

  RETURN QUERY SELECT v_events_deleted, v_performance_deleted, v_sessions_deleted;
END;
$$;


ALTER FUNCTION public.cleanup_telemetry_data(p_days integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION cleanup_telemetry_data(p_days integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.cleanup_telemetry_data(p_days integer) IS 'Cleanup old telemetry data (default: 90 days)';


--
-- Name: clear_player_inventory(uuid, uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.clear_player_inventory(p_app_id uuid, p_user_id uuid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INT;
BEGIN
  DELETE FROM inventory_items
  WHERE app_id = p_app_id AND user_id = p_user_id;

  GET DIAGNOSTICS deleted_count = ROW_COUNT;

  DELETE FROM equipped_items
  WHERE app_id = p_app_id AND user_id = p_user_id;

  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.clear_player_inventory(p_app_id uuid, p_user_id uuid) OWNER TO matthewmauer;

--
-- Name: FUNCTION clear_player_inventory(p_app_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.clear_player_inventory(p_app_id uuid, p_user_id uuid) IS 'Clear all items from player inventory';


--
-- Name: create_bucket_version(text, text, jsonb, text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.create_bucket_version(p_bucket_id text, p_version_name text, p_config_snapshot jsonb, p_changes_summary text, p_reasoning text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_version_number INTEGER;
BEGIN
  -- Get next version number
  SELECT COALESCE(MAX(version_number), 0) + 1
  INTO v_version_number
  FROM bucket_versions
  WHERE bucket_id = p_bucket_id;

  -- Insert new version
  INSERT INTO bucket_versions (
    bucket_id,
    version_number,
    version_name,
    config_snapshot,
    changes_summary,
    reasoning,
    created_by
  ) VALUES (
    p_bucket_id,
    v_version_number,
    p_version_name,
    p_config_snapshot,
    p_changes_summary,
    p_reasoning,
    'system'
  );

  -- Update bucket current version
  UPDATE bucket_instances
  SET current_version = v_version_number,
      updated_at = NOW()
  WHERE bucket_id = p_bucket_id;

  RETURN v_version_number;
END;
$$;


ALTER FUNCTION public.create_bucket_version(p_bucket_id text, p_version_name text, p_config_snapshot jsonb, p_changes_summary text, p_reasoning text) OWNER TO matthewmauer;

--
-- Name: create_domain_snapshot(text, text, text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.create_domain_snapshot(p_domain_context text, p_snapshot_name text, p_snapshot_tag text DEFAULT NULL::text, p_description text DEFAULT NULL::text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_snapshot_id TEXT;
  v_pattern_ids TEXT[];
  v_artifact_ids TEXT[];
BEGIN
  -- Generate snapshot ID
  v_snapshot_id := 'snap_' || gen_random_uuid()::TEXT;

  -- Get current patterns
  SELECT array_agg(example_id)
  INTO v_pattern_ids
  FROM domain_code_examples
  WHERE domain_context = p_domain_context
    AND status = 'active'
    AND is_current = true;

  -- Get current artifacts
  SELECT array_agg(artifact_id)
  INTO v_artifact_ids
  FROM bucket_artifacts
  WHERE domain_context = p_domain_context
    AND status = 'active'
    AND is_current = true
  LIMIT 1000; -- Reasonable limit

  -- Create snapshot
  INSERT INTO domain_context_snapshots (
    snapshot_id,
    domain_context,
    snapshot_name,
    snapshot_tag,
    description,
    snapshot_type,
    pattern_ids,
    artifact_ids,
    model_config,
    parameters
  ) VALUES (
    v_snapshot_id,
    p_domain_context,
    p_snapshot_name,
    p_snapshot_tag,
    p_description,
    'full',
    v_pattern_ids,
    v_artifact_ids,
    '{}'::JSONB, -- Placeholder
    '{}'::JSONB  -- Placeholder
  );

  RETURN v_snapshot_id;
END;
$$;


ALTER FUNCTION public.create_domain_snapshot(p_domain_context text, p_snapshot_name text, p_snapshot_tag text, p_description text) OWNER TO matthewmauer;

--
-- Name: FUNCTION create_domain_snapshot(p_domain_context text, p_snapshot_name text, p_snapshot_tag text, p_description text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.create_domain_snapshot(p_domain_context text, p_snapshot_name text, p_snapshot_tag text, p_description text) IS 'Create snapshot from current domain state';


--
-- Name: create_request_lifecycle(text, text, text, text, integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.create_request_lifecycle(p_endpoint text, p_prompt text, p_user_id text DEFAULT NULL::text, p_session_id text DEFAULT NULL::text, p_priority integer DEFAULT 50, p_timeout_ms integer DEFAULT 120000) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_request_id UUID;
BEGIN
  INSERT INTO request_lifecycle (
    endpoint,
    prompt_text,
    prompt_length,
    input_hash,
    user_id,
    session_id,
    priority,
    timeout_ms,
    deadline_at,
    state
  ) VALUES (
    p_endpoint,
    p_prompt,
    LENGTH(p_prompt),
    MD5(p_prompt),
    p_user_id,
    p_session_id,
    p_priority,
    p_timeout_ms,
    NOW() + (p_timeout_ms || ' milliseconds')::INTERVAL,
    'created'
  ) RETURNING request_id INTO v_request_id;

  -- Log state transition
  INSERT INTO request_state_transitions (
    request_id, from_state, to_state, triggered_by, reason
  ) VALUES (
    v_request_id, NULL, 'created', 'system', 'Request created'
  );

  RETURN v_request_id;
END;
$$;


ALTER FUNCTION public.create_request_lifecycle(p_endpoint text, p_prompt text, p_user_id text, p_session_id text, p_priority integer, p_timeout_ms integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION create_request_lifecycle(p_endpoint text, p_prompt text, p_user_id text, p_session_id text, p_priority integer, p_timeout_ms integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.create_request_lifecycle(p_endpoint text, p_prompt text, p_user_id text, p_session_id text, p_priority integer, p_timeout_ms integer) IS 'Create new request lifecycle entry with automatic deadline calculation';


--
-- Name: detect_bounces(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.detect_bounces() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Mark sessions as bounced if:
  -- 1. No heartbeat for 30+ seconds
  -- 2. Total duration < 5 seconds
  -- 3. Zero interactions

  UPDATE visit_sessions
  SET
    bounce_detected = true,
    bounce_reason = CASE
      WHEN last_heartbeat_at IS NOT NULL AND last_heartbeat_at < NOW() - INTERVAL '30 seconds'
        THEN 'no_heartbeat_30s'
      WHEN duration_ms IS NOT NULL AND duration_ms < 5000 AND total_interactions = 0
        THEN 'fast_exit_no_interaction'
      WHEN total_interactions = 0 AND end_time IS NOT NULL
        THEN 'zero_interactions'
      WHEN heartbeat_count < 2
        THEN 'insufficient_heartbeats'
      ELSE 'timeout'
    END,
    bounce_time_ms = EXTRACT(EPOCH FROM (COALESCE(last_heartbeat_at, end_time, NOW()) - start_time)) * 1000,
    is_active = false
  WHERE
    is_active = true
    AND bounce_detected = false
    AND (
      -- No heartbeat for 30 seconds
      (last_heartbeat_at IS NOT NULL AND last_heartbeat_at < NOW() - INTERVAL '30 seconds')
      OR
      -- Session ended with no interaction
      (end_time IS NOT NULL AND total_interactions = 0)
      OR
      -- Very short session
      (duration_ms IS NOT NULL AND duration_ms < 5000 AND total_interactions = 0)
    );
END;
$$;


ALTER FUNCTION public.detect_bounces() OWNER TO matthewmauer;

--
-- Name: detect_price_gaps(character varying, interval); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.detect_price_gaps(p_symbol character varying, p_expected_interval interval DEFAULT '00:05:00'::interval) RETURNS TABLE(gap_start timestamp without time zone, gap_end timestamp without time zone, duration interval)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    prev.recorded_at as gap_start,
    curr.recorded_at as gap_end,
    curr.recorded_at - prev.recorded_at as duration
  FROM price_history curr
  JOIN LATERAL (
    SELECT recorded_at
    FROM price_history
    WHERE symbol = p_symbol
      AND recorded_at < curr.recorded_at
    ORDER BY recorded_at DESC
    LIMIT 1
  ) prev ON true
  WHERE curr.symbol = p_symbol
    AND (curr.recorded_at - prev.recorded_at) > p_expected_interval * 2
  ORDER BY gap_start DESC;
END;
$$;


ALTER FUNCTION public.detect_price_gaps(p_symbol character varying, p_expected_interval interval) OWNER TO matthewmauer;

--
-- Name: detect_rapid_fire_voting(uuid, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.detect_rapid_fire_voting(p_user_id uuid, p_session_id character varying, p_time_window_seconds integer DEFAULT 60, p_threshold_count integer DEFAULT 5) RETURNS TABLE(is_rapid_fire boolean, vote_count integer, avg_seconds_between numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_count INTEGER;
  v_avg DECIMAL;
BEGIN
  -- Count votes and calculate average time between votes
  WITH vote_diffs AS (
    SELECT
      voted_at,
      EXTRACT(EPOCH FROM (voted_at - LAG(voted_at) OVER (ORDER BY voted_at))) as seconds_diff
    FROM elo_user_votes
    WHERE (user_id = p_user_id OR session_id = p_session_id)
      AND voted_at > NOW() - (p_time_window_seconds || ' seconds')::INTERVAL
  )
  SELECT COUNT(*), AVG(seconds_diff)
  INTO v_count, v_avg
  FROM vote_diffs;

  RETURN QUERY SELECT
    v_count >= p_threshold_count,
    v_count,
    COALESCE(v_avg, 0);
END;
$$;


ALTER FUNCTION public.detect_rapid_fire_voting(p_user_id uuid, p_session_id character varying, p_time_window_seconds integer, p_threshold_count integer) OWNER TO matthewmauer;

--
-- Name: determine_challenge_winner(uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.determine_challenge_winner(p_challenge_id uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_winner_id UUID;
  v_winner_score DECIMAL(10,2);
BEGIN
  -- Find implementation with highest score
  SELECT implementation_id, total_score
  INTO v_winner_id, v_winner_score
  FROM domain_implementations
  WHERE challenge_id = p_challenge_id
  ORDER BY total_score DESC
  LIMIT 1;

  IF NOT FOUND THEN
    RETURN NULL;
  END IF;

  -- Update challenge with winner
  UPDATE domain_challenges
  SET
    winner_domain_id = (
      SELECT domain_id
      FROM domain_implementations
      WHERE implementation_id = v_winner_id
    ),
    winner_score = v_winner_score,
    status = 'completed',
    completed_at = NOW()
  WHERE challenge_id = p_challenge_id;

  RETURN v_winner_id;
END;
$$;


ALTER FUNCTION public.determine_challenge_winner(p_challenge_id uuid) OWNER TO matthewmauer;

--
-- Name: enforce_single_current_snapshot(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.enforce_single_current_snapshot() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.is_current = true THEN
    UPDATE domain_context_snapshots
    SET is_current = false, deactivated_at = NOW()
    WHERE domain_context = NEW.domain_context
      AND snapshot_id != NEW.snapshot_id
      AND is_current = true;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.enforce_single_current_snapshot() OWNER TO matthewmauer;

--
-- Name: enforce_single_default_preset(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.enforce_single_default_preset() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.is_default = true THEN
    UPDATE domain_parameter_presets
    SET is_default = false
    WHERE domain_context = NEW.domain_context
      AND preset_id != NEW.preset_id
      AND is_default = true;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.enforce_single_default_preset() OWNER TO matthewmauer;

--
-- Name: estimate_processing_time(text, integer, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.estimate_processing_time(p_model_id text, p_total_tokens integer, p_profile_slug text DEFAULT 'balanced'::text) RETURNS TABLE(chunk_count integer, tokens_per_chunk integer, block_time_seconds integer, total_time_seconds integer, total_minutes real, model_tps real)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_profile RECORD;
  v_tps REAL;
  v_chunk_size INTEGER;
BEGIN
  -- Get profile
  SELECT * INTO v_profile FROM block_time_profiles WHERE profile_slug = p_profile_slug;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'Profile not found: %', p_profile_slug;
  END IF;

  -- Get model throughput
  SELECT avg_tokens_per_second INTO v_tps
  FROM model_benchmarks
  WHERE model_id = p_model_id;

  IF v_tps IS NULL THEN
    v_tps := 10; -- Default assumption
  END IF;

  -- Calculate optimal chunk size
  v_chunk_size := calculate_optimal_chunk_size(p_model_id, v_profile.target_seconds);

  -- Estimate
  RETURN QUERY SELECT
    CEIL(p_total_tokens::REAL / v_chunk_size)::INTEGER as chunk_count,
    v_chunk_size as tokens_per_chunk,
    v_profile.target_seconds as block_time_seconds,
    CEIL(p_total_tokens::REAL / v_chunk_size)::INTEGER * v_profile.target_seconds as total_time_seconds,
    (CEIL(p_total_tokens::REAL / v_chunk_size)::INTEGER * v_profile.target_seconds)::REAL / 60 as total_minutes,
    v_tps as model_tps;
END;
$$;


ALTER FUNCTION public.estimate_processing_time(p_model_id text, p_total_tokens integer, p_profile_slug text) OWNER TO matthewmauer;

--
-- Name: FUNCTION estimate_processing_time(p_model_id text, p_total_tokens integer, p_profile_slug text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.estimate_processing_time(p_model_id text, p_total_tokens integer, p_profile_slug text) IS 'Pre-flight estimation: predict completion time before starting';


--
-- Name: expire_old_training_tasks(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.expire_old_training_tasks() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_affected_rows INTEGER;
BEGIN
  UPDATE training_tasks
  SET status = 'expired'
  WHERE status IN ('available', 'claimed')
    AND expires_at IS NOT NULL
    AND expires_at < NOW();

  GET DIAGNOSTICS v_affected_rows = ROW_COUNT;
  RETURN v_affected_rows;
END;
$$;


ALTER FUNCTION public.expire_old_training_tasks() OWNER TO matthewmauer;

--
-- Name: FUNCTION expire_old_training_tasks(); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.expire_old_training_tasks() IS 'Mark expired tasks (run every hour via cron)';


--
-- Name: find_hedge_for_asset(character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.find_hedge_for_asset(p_symbol character varying) RETURNS TABLE(hedge_symbol character varying, correlation numeric, strength character varying, timeframe character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT DISTINCT ON (
    CASE
      WHEN symbol1 = p_symbol THEN symbol2
      ELSE symbol1
    END
  )
    CASE
      WHEN symbol1 = p_symbol THEN symbol2
      ELSE symbol1
    END as hedge_symbol,
    correlation,
    strength,
    timeframe
  FROM price_correlations
  WHERE (symbol1 = p_symbol OR symbol2 = p_symbol)
    AND correlation < -0.4  -- Inverse correlation
    AND timeframe = '24h'
  ORDER BY
    CASE
      WHEN symbol1 = p_symbol THEN symbol2
      ELSE symbol1
    END,
    calculated_at DESC;
END;
$$;


ALTER FUNCTION public.find_hedge_for_asset(p_symbol character varying) OWNER TO matthewmauer;

--
-- Name: find_prompt_patterns(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.find_prompt_patterns(min_occurrences integer DEFAULT 10) RETURNS TABLE(pattern_hash text, example_prompt text, occurrence_count bigint, avg_response_time_ms real, models_used text[])
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    l.prompt_hash,
    MIN(l.prompt_text) as example_prompt,
    COUNT(*) as occurrence_count,
    AVG(l.response_time_ms) as avg_response_time_ms,
    ARRAY_AGG(DISTINCT l.model_id) as models_used
  FROM model_usage_log l
  WHERE l.prompt_hash IS NOT NULL
  GROUP BY l.prompt_hash
  HAVING COUNT(*) >= min_occurrences
  ORDER BY occurrence_count DESC;
END;
$$;


ALTER FUNCTION public.find_prompt_patterns(min_occurrences integer) OWNER TO matthewmauer;

--
-- Name: find_similar_sessions(text, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.find_similar_sessions(p_prompt text, p_limit integer DEFAULT 5) RETURNS TABLE(session_id uuid, prompt text, intent jsonb, similarity numeric, success boolean, duration_ms integer, files_generated jsonb)
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Simple text similarity using word overlap
  -- In production, this would use embeddings/pgvector
  RETURN QUERY
  SELECT
    asess.session_id,
    asess.prompt,
    asess.intent,
    0.8::DECIMAL(3,2) as similarity, -- Placeholder
    asess.success,
    asess.duration_ms,
    asess.files_generated
  FROM autonomous_sessions asess
  WHERE asess.success = TRUE
    AND asess.completed_at IS NOT NULL
  ORDER BY asess.created_at DESC
  LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.find_similar_sessions(p_prompt text, p_limit integer) OWNER TO matthewmauer;

--
-- Name: generate_api_key(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.generate_api_key() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN 'sk_' || encode(gen_random_bytes(30), 'hex');
END;
$$;


ALTER FUNCTION public.generate_api_key() OWNER TO matthewmauer;

--
-- Name: generate_site_id(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.generate_site_id() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  new_id VARCHAR(32);
BEGIN
  LOOP
    new_id := upper(substring(md5(random()::text || clock_timestamp()::text) from 1 for 12));
    EXIT WHEN NOT EXISTS (SELECT 1 FROM embed_sites WHERE site_id = new_id);
  END LOOP;
  RETURN new_id;
END;
$$;


ALTER FUNCTION public.generate_site_id() OWNER TO matthewmauer;

--
-- Name: generate_url_hash(text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.generate_url_hash(url_text text) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
    RETURN encode(digest(url_text, 'sha256'), 'hex');
END;
$$;


ALTER FUNCTION public.generate_url_hash(url_text text) OWNER TO matthewmauer;

--
-- Name: get_analytics_summary(timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_analytics_summary(start_date timestamp without time zone DEFAULT (now() - '30 days'::interval), end_date timestamp without time zone DEFAULT now()) RETURNS TABLE(metric text, value bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT 'total_page_views'::TEXT, COUNT(*)::BIGINT
  FROM analytics_page_views
  WHERE timestamp BETWEEN start_date AND end_date
  UNION ALL
  SELECT 'unique_sessions'::TEXT, COUNT(DISTINCT session_id)::BIGINT
  FROM analytics_page_views
  WHERE timestamp BETWEEN start_date AND end_date
  UNION ALL
  SELECT 'unique_users'::TEXT, COUNT(DISTINCT user_id)::BIGINT
  FROM analytics_page_views
  WHERE timestamp BETWEEN start_date AND end_date AND user_id IS NOT NULL
  UNION ALL
  SELECT 'total_conversions'::TEXT, COUNT(*)::BIGINT
  FROM analytics_conversions
  WHERE timestamp BETWEEN start_date AND end_date
  UNION ALL
  SELECT 'total_conversion_value'::TEXT, COALESCE(SUM(conversion_value), 0)::BIGINT
  FROM analytics_conversions
  WHERE timestamp BETWEEN start_date AND end_date;
END;
$$;


ALTER FUNCTION public.get_analytics_summary(start_date timestamp without time zone, end_date timestamp without time zone) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_analytics_summary(start_date timestamp without time zone, end_date timestamp without time zone); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_analytics_summary(start_date timestamp without time zone, end_date timestamp without time zone) IS 'Get high-level analytics summary for date range';


--
-- Name: get_animation_full(character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_animation_full(p_anim_name character varying) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  result JSON;
BEGIN
  SELECT json_build_object(
    'animation', row_to_json(a.*),
    'sprite_sheet', row_to_json(s.*)
  )
  INTO result
  FROM animation_sequences a
  JOIN sprite_sheets s ON a.sheet_id = s.id
  WHERE a.name = p_anim_name;

  RETURN result;
END;
$$;


ALTER FUNCTION public.get_animation_full(p_anim_name character varying) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_animation_full(p_anim_name character varying); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_animation_full(p_anim_name character varying) IS 'Get animation with sprite sheet data';


--
-- Name: get_autonomous_stats(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_autonomous_stats() RETURNS TABLE(total_builds integer, successful_builds integer, success_rate numeric, avg_duration_ms numeric, total_files_generated integer, avg_files_per_build numeric, test_pass_rate numeric, patterns_learned integer, improvements_made integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    COUNT(*)::INTEGER as total_builds,
    COUNT(*) FILTER (WHERE success = TRUE)::INTEGER as successful_builds,
    (COUNT(*) FILTER (WHERE success = TRUE)::DECIMAL / NULLIF(COUNT(*), 0) * 100) as success_rate,
    AVG(duration_ms) as avg_duration_ms,
    SUM(jsonb_array_length(files_generated))::INTEGER as total_files_generated,
    AVG(jsonb_array_length(files_generated)) as avg_files_per_build,
    (
      SUM(tests_passed)::DECIMAL /
      NULLIF(SUM(tests_passed + tests_failed), 0) * 100
    ) as test_pass_rate,
    (SELECT COUNT(*) FROM autonomous_patterns)::INTEGER as patterns_learned,
    (SELECT COUNT(*) FROM autonomous_improvements WHERE implemented = TRUE)::INTEGER as improvements_made
  FROM autonomous_sessions;
END;
$$;


ALTER FUNCTION public.get_autonomous_stats() OWNER TO matthewmauer;

--
-- Name: get_best_source(character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_best_source(p_symbol character varying) RETURNS TABLE(source_name character varying, reliability_score numeric, recent_spread numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    ps.source_name,
    ps.reliability_score,
    COALESCE(recent_arb.avg_spread, 0) AS recent_spread
  FROM price_sources ps
  LEFT JOIN (
    SELECT
      source1 AS source_name,
      AVG(spread_percent) AS avg_spread
    FROM arbitrage_opportunities
    WHERE symbol = p_symbol
      AND detected_at > NOW() - INTERVAL '24 hours'
    GROUP BY source1
  ) recent_arb ON ps.source_name = recent_arb.source_name
  ORDER BY ps.reliability_score DESC, recent_spread ASC
  LIMIT 1;
END;
$$;


ALTER FUNCTION public.get_best_source(p_symbol character varying) OWNER TO matthewmauer;

--
-- Name: get_bucket_performance(text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_bucket_performance(p_bucket_id text) RETURNS TABLE(total_requests bigint, success_rate real, avg_response_ms real, total_cost numeric, reasoning_count bigint, pending_todos bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    b.total_requests::BIGINT,
    CASE WHEN b.total_requests > 0
      THEN b.successful_requests::REAL / b.total_requests::REAL
      ELSE 0
    END as success_rate,
    b.avg_response_time_ms,
    b.total_cost_usd,
    (SELECT COUNT(*) FROM bucket_reasoning_log WHERE bucket_id = p_bucket_id)::BIGINT,
    (SELECT COUNT(*) FROM bucket_todos WHERE bucket_id = p_bucket_id AND status IN ('pending', 'in_progress'))::BIGINT
  FROM bucket_instances b
  WHERE b.bucket_id = p_bucket_id;
END;
$$;


ALTER FUNCTION public.get_bucket_performance(p_bucket_id text) OWNER TO matthewmauer;

--
-- Name: get_component_dependencies(text, text, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_component_dependencies(p_component_type text, p_component_id text, p_limit integer DEFAULT 100) RETURNS TABLE(target_type text, target_id text, relationship_type text, created_at timestamp without time zone, execution_time_ms integer, success boolean, metadata jsonb)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    cr.target_type,
    cr.target_id,
    cr.relationship_type,
    cr.created_at,
    cr.execution_time_ms,
    cr.success,
    cr.metadata
  FROM component_relationships cr
  WHERE cr.source_type = p_component_type
    AND cr.source_id = p_component_id
  ORDER BY cr.created_at DESC
  LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.get_component_dependencies(p_component_type text, p_component_id text, p_limit integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_component_dependencies(p_component_type text, p_component_id text, p_limit integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_component_dependencies(p_component_type text, p_component_id text, p_limit integer) IS 'Gets all dependencies of a component';


--
-- Name: get_component_graph(text, text, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_component_graph(p_component_type text, p_component_id text, p_depth integer DEFAULT 2) RETURNS TABLE(from_type text, from_id text, to_type text, to_id text, relationship_type text, depth integer, usage_count integer, success_rate real)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  WITH RECURSIVE graph AS (
    -- Base case: direct relationships
    SELECT
      cr.source_type as from_type,
      cr.source_id as from_id,
      cr.target_type as to_type,
      cr.target_id as to_id,
      cr.relationship_type,
      1 as depth,
      COUNT(*)::INTEGER as usage_count,
      AVG(CASE WHEN cr.success THEN 1.0 ELSE 0.0 END)::REAL as success_rate
    FROM component_relationships cr
    WHERE (cr.source_type = p_component_type AND cr.source_id = p_component_id)
       OR (cr.target_type = p_component_type AND cr.target_id = p_component_id)
    GROUP BY cr.source_type, cr.source_id, cr.target_type, cr.target_id, cr.relationship_type

    UNION

    -- Recursive case: follow relationships
    SELECT
      cr.source_type,
      cr.source_id,
      cr.target_type,
      cr.target_id,
      cr.relationship_type,
      g.depth + 1,
      COUNT(*)::INTEGER,
      AVG(CASE WHEN cr.success THEN 1.0 ELSE 0.0 END)::REAL
    FROM component_relationships cr
    JOIN graph g ON (
      (cr.source_type = g.to_type AND cr.source_id = g.to_id)
      OR (cr.target_type = g.from_type AND cr.target_id = g.from_id)
    )
    WHERE g.depth < p_depth
    GROUP BY cr.source_type, cr.source_id, cr.target_type, cr.target_id, cr.relationship_type, g.depth
  )
  SELECT * FROM graph
  ORDER BY depth, usage_count DESC;
END;
$$;


ALTER FUNCTION public.get_component_graph(p_component_type text, p_component_id text, p_depth integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_component_graph(p_component_type text, p_component_id text, p_depth integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_component_graph(p_component_type text, p_component_id text, p_depth integer) IS 'Builds a relationship graph for visualization (D3.js)';


--
-- Name: get_component_usages(text, text, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_component_usages(p_component_type text, p_component_id text, p_limit integer DEFAULT 100) RETURNS TABLE(source_type text, source_id text, relationship_type text, user_id uuid, session_id text, request_id uuid, created_at timestamp without time zone, execution_time_ms integer, success boolean, metadata jsonb)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    cr.source_type,
    cr.source_id,
    cr.relationship_type,
    cr.user_id,
    cr.session_id,
    cr.request_id,
    cr.created_at,
    cr.execution_time_ms,
    cr.success,
    cr.metadata
  FROM component_relationships cr
  WHERE cr.target_type = p_component_type
    AND cr.target_id = p_component_id
  ORDER BY cr.created_at DESC
  LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.get_component_usages(p_component_type text, p_component_id text, p_limit integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_component_usages(p_component_type text, p_component_id text, p_limit integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_component_usages(p_component_type text, p_component_id text, p_limit integer) IS 'Gets all usages of a component (xrefs hotkey: x)';


--
-- Name: get_correlation_trend(character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_correlation_trend(p_symbol1 character varying, p_symbol2 character varying, p_timeframe character varying DEFAULT '24h'::character varying, p_days integer DEFAULT 7) RETURNS TABLE(current_correlation numeric, avg_correlation numeric, trend character varying, data_points integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  WITH recent_correlations AS (
    SELECT correlation, calculated_at
    FROM price_correlations
    WHERE (symbol1 = p_symbol1 AND symbol2 = p_symbol2)
       OR (symbol1 = p_symbol2 AND symbol2 = p_symbol1)
    AND timeframe = p_timeframe
    AND calculated_at >= NOW() - INTERVAL '1 day' * p_days
    ORDER BY calculated_at DESC
  )
  SELECT
    (SELECT correlation FROM recent_correlations ORDER BY calculated_at DESC LIMIT 1) as current_correlation,
    AVG(correlation)::DECIMAL(10,4) as avg_correlation,
    CASE
      WHEN (SELECT correlation FROM recent_correlations ORDER BY calculated_at DESC LIMIT 1) >
           AVG(correlation) + 0.1 THEN 'strengthening'
      WHEN (SELECT correlation FROM recent_correlations ORDER BY calculated_at DESC LIMIT 1) <
           AVG(correlation) - 0.1 THEN 'weakening'
      ELSE 'stable'
    END as trend,
    COUNT(*)::INTEGER as data_points
  FROM recent_correlations;
END;
$$;


ALTER FUNCTION public.get_correlation_trend(p_symbol1 character varying, p_symbol2 character varying, p_timeframe character varying, p_days integer) OWNER TO matthewmauer;

--
-- Name: get_curated_feed(character varying, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_curated_feed(p_user_id character varying, p_limit integer DEFAULT 50) RETURNS TABLE(id integer, title text, url text, description text, source character varying, author character varying, score integer, comments integer, published_at timestamp without time zone, topics text)
    LANGUAGE plpgsql
    AS $$
DECLARE
  user_topics TEXT;
  user_sources TEXT;
BEGIN
  -- Get user preferences
  SELECT topics, sources INTO user_topics, user_sources
  FROM curation_configs
  WHERE user_id = p_user_id;

  -- If no config, return empty
  IF user_topics IS NULL THEN
    RETURN;
  END IF;

  -- Return curated content matching user preferences
  RETURN QUERY
  SELECT
    c.id,
    c.title,
    c.url,
    c.description,
    c.source,
    c.author,
    c.score,
    c.comments,
    c.published_at,
    c.topics
  FROM curated_content c
  WHERE
    -- Match topics (if topics configured)
    (user_topics IS NULL OR c.topics::jsonb ?| (SELECT array_agg(value) FROM json_array_elements_text(user_topics::json)))
    -- Match sources (if sources configured)
    AND (user_sources IS NULL OR c.source = ANY(SELECT json_array_elements_text(user_sources::json)::text))
  ORDER BY
    c.published_at DESC,
    c.score DESC
  LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.get_curated_feed(p_user_id character varying, p_limit integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_curated_feed(p_user_id character varying, p_limit integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_curated_feed(p_user_id character varying, p_limit integer) IS 'Get personalized curated feed based on user preferences';


--
-- Name: get_desktop_items(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_desktop_items(p_user_id integer DEFAULT NULL::integer) RETURNS TABLE(item_type text, item_id integer, name text, icon text, position_x integer, position_y integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  -- Desktop folders
  SELECT
    'folder'::TEXT,
    id,
    name,
    icon,
    position_x,
    position_y
  FROM virtual_folders
  WHERE is_desktop = TRUE
    AND (p_user_id IS NULL OR user_id = p_user_id)

  UNION ALL

  -- Desktop files
  SELECT
    'file'::TEXT,
    id,
    name,
    icon,
    position_x,
    position_y
  FROM virtual_files
  WHERE is_desktop = TRUE
    AND (p_user_id IS NULL OR user_id = p_user_id)

  ORDER BY position_y ASC, position_x ASC;
END;
$$;


ALTER FUNCTION public.get_desktop_items(p_user_id integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_desktop_items(p_user_id integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_desktop_items(p_user_id integer) IS 'Get all items displayed on the desktop';


--
-- Name: get_domain_patterns(text, text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_domain_patterns(p_domain text, p_language text, p_use_case text DEFAULT NULL::text) RETURNS TABLE(example_id text, pattern_name text, title text, description text, code text, success_rate real, times_used integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    dce.example_id,
    dce.pattern_name,
    dce.title,
    dce.description,
    dce.code,
    dce.success_rate,
    dce.times_used
  FROM domain_code_examples dce
  WHERE dce.domain_context = p_domain
    AND dce.language = p_language
    AND dce.status = 'active'
    AND dce.is_current = true
    AND (p_use_case IS NULL OR p_use_case = ANY(dce.use_cases))
  ORDER BY dce.success_rate DESC NULLS LAST, dce.times_used DESC
  LIMIT 20;
END;
$$;


ALTER FUNCTION public.get_domain_patterns(p_domain text, p_language text, p_use_case text) OWNER TO matthewmauer;

--
-- Name: get_folder_contents(integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_folder_contents(p_folder_id integer, p_user_id integer DEFAULT NULL::integer) RETURNS TABLE(item_type text, item_id integer, name text, icon text, path text, created_at timestamp without time zone, size_bytes bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  -- Subfolders
  SELECT
    'folder'::TEXT,
    id,
    name,
    icon,
    path,
    created_at,
    0::BIGINT
  FROM virtual_folders
  WHERE parent_id = p_folder_id
    AND (p_user_id IS NULL OR user_id = p_user_id)

  UNION ALL

  -- Files
  SELECT
    'file'::TEXT,
    id,
    name,
    icon,
    path,
    created_at,
    size_bytes
  FROM virtual_files
  WHERE folder_id = p_folder_id
    AND (p_user_id IS NULL OR user_id = p_user_id)

  ORDER BY item_type DESC, name ASC;
END;
$$;


ALTER FUNCTION public.get_folder_contents(p_folder_id integer, p_user_id integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_folder_contents(p_folder_id integer, p_user_id integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_folder_contents(p_folder_id integer, p_user_id integer) IS 'Get all items (files + folders) in a folder';


--
-- Name: get_head_to_head(integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_head_to_head(p_item_a_id integer, p_item_b_id integer) RETURNS TABLE(total_matches bigint, item_a_wins bigint, item_b_wins bigint, draws bigint, avg_rating_change numeric, last_match timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    COUNT(*) as total_matches,
    COUNT(*) FILTER (WHERE winner_id = p_item_a_id) as item_a_wins,
    COUNT(*) FILTER (WHERE winner_id = p_item_b_id) as item_b_wins,
    COUNT(*) FILTER (WHERE winner_id IS NULL) as draws,
    AVG(rating_change) as avg_rating_change,
    MAX(matched_at) as last_match
  FROM elo_matches
  WHERE (item_a_id = p_item_a_id AND item_b_id = p_item_b_id)
     OR (item_a_id = p_item_b_id AND item_b_id = p_item_a_id);
END;
$$;


ALTER FUNCTION public.get_head_to_head(p_item_a_id integer, p_item_b_id integer) OWNER TO matthewmauer;

--
-- Name: get_hot_threads(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_hot_threads(p_limit integer DEFAULT 25) RETURNS TABLE(id integer, title text, url text, author_name character varying, score integer, comment_count integer, created_at timestamp without time zone, hotness double precision)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    t.id,
    t.title,
    t.url,
    t.author_name,
    t.score,
    t.comment_count,
    t.created_at,
    -- Hot ranking algorithm (simplified Reddit hot)
    (t.score::FLOAT / POWER(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - t.created_at)) / 3600 + 2, 1.5)) AS hotness
  FROM forum_threads t
  WHERE NOT t.archived
  ORDER BY hotness DESC
  LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.get_hot_threads(p_limit integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_hot_threads(p_limit integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_hot_threads(p_limit integer) IS 'Get trending threads using hot algorithm';


--
-- Name: get_inventory_stats(uuid, uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_inventory_stats(p_app_id uuid, p_user_id uuid) RETURNS TABLE(total_items integer, by_type jsonb, by_rarity jsonb, total_value bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    COUNT(*)::INT as total_items,
    jsonb_object_agg(item_type, count) as by_type,
    jsonb_object_agg(rarity, rarity_count) as by_rarity,
    SUM(value * quantity)::BIGINT as total_value
  FROM (
    SELECT
      item_type,
      rarity,
      value,
      quantity,
      COUNT(*) OVER (PARTITION BY item_type) as count,
      COUNT(*) OVER (PARTITION BY rarity) as rarity_count
    FROM inventory_items
    WHERE app_id = p_app_id AND user_id = p_user_id
  ) stats
  GROUP BY stats.total_items;
END;
$$;


ALTER FUNCTION public.get_inventory_stats(p_app_id uuid, p_user_id uuid) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_inventory_stats(p_app_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_inventory_stats(p_app_id uuid, p_user_id uuid) IS 'Get comprehensive inventory statistics';


--
-- Name: get_latest_health_status(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_latest_health_status() RETURNS TABLE(component character varying, status character varying, last_check timestamp without time zone, message text)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    'guardian'::VARCHAR(50),
    g.result::VARCHAR(20),
    g.timestamp,
    g.diagnosis
  FROM guardian_log g
  WHERE g.event_type = 'health_check'
  ORDER BY g.timestamp DESC
  LIMIT 1;
END;
$$;


ALTER FUNCTION public.get_latest_health_status() OWNER TO matthewmauer;

--
-- Name: get_partner_suggestions(uuid, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_partner_suggestions(p_source_domain_id uuid, p_count integer DEFAULT 4) RETURNS TABLE(domain_id uuid, domain_name character varying, brand_name character varying, logo_url text, primary_color character varying, relevance_score numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    dp.domain_id,
    dp.domain_name,
    dp.brand_name,
    dp.logo_url,
    dp.primary_color,
    -- Relevance score based on category match and least recently shown
    (
      CASE WHEN dp.category = (SELECT category FROM domain_portfolio WHERE domain_id = p_source_domain_id) THEN 0.5 ELSE 0.0 END +
      CASE WHEN dp.primary_radi = (SELECT primary_radi FROM domain_portfolio WHERE domain_id = p_source_domain_id) THEN 0.3 ELSE 0.0 END +
      (1.0 / (COALESCE((SELECT COUNT(*) FROM partner_clicks WHERE target_domain_id = dp.domain_id), 0) + 1))
    )::DECIMAL(5,2) as relevance_score
  FROM domain_portfolio dp
  WHERE dp.status = 'active'
    AND dp.domain_id != p_source_domain_id
  ORDER BY relevance_score DESC, RANDOM()
  LIMIT p_count;
END;
$$;


ALTER FUNCTION public.get_partner_suggestions(p_source_domain_id uuid, p_count integer) OWNER TO matthewmauer;

--
-- Name: get_popular_features(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_popular_features(p_limit integer DEFAULT 10) RETURNS TABLE(feature_name character varying, total_installs bigint, total_usage bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    f.feature_name,
    COUNT(DISTINCT f.install_id) as total_installs,
    SUM(f.usage_count) as total_usage
  FROM telemetry_features f
  WHERE f.last_used_at >= NOW() - INTERVAL '30 days'
  GROUP BY f.feature_name
  ORDER BY total_usage DESC
  LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.get_popular_features(p_limit integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_popular_features(p_limit integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_popular_features(p_limit integer) IS 'Get most popular features across all installs';


--
-- Name: get_recommended_preset(text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_recommended_preset(p_domain_context text, p_model_id text DEFAULT NULL::text) RETURNS TABLE(preset_id text, preset_name text, temperature real, top_p real, max_tokens integer, system_prompt_suffix text)
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Try domain+model combination first
  IF p_model_id IS NOT NULL THEN
    RETURN QUERY
    SELECT
      dpp.preset_id,
      dpp.preset_name,
      COALESCE((dmp.override_params->>'temperature')::REAL, dpp.temperature) as temperature,
      COALESCE((dmp.override_params->>'top_p')::REAL, dpp.top_p) as top_p,
      COALESCE((dmp.override_params->>'max_tokens')::INTEGER, dpp.max_tokens) as max_tokens,
      dpp.system_prompt_suffix
    FROM domain_model_parameters dmp
    JOIN domain_parameter_presets dpp ON dmp.recommended_preset_id = dpp.preset_id
    WHERE dmp.domain_context = p_domain_context
      AND dmp.model_id = p_model_id
    LIMIT 1;

    IF FOUND THEN RETURN; END IF;
  END IF;

  -- Fall back to domain default
  RETURN QUERY
  SELECT
    dpp.preset_id,
    dpp.preset_name,
    dpp.temperature,
    dpp.top_p,
    dpp.max_tokens,
    dpp.system_prompt_suffix
  FROM domain_parameter_presets dpp
  WHERE dpp.domain_context = p_domain_context
    AND dpp.is_default = true
    AND dpp.is_active = true
  LIMIT 1;
END;
$$;


ALTER FUNCTION public.get_recommended_preset(p_domain_context text, p_model_id text) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_recommended_preset(p_domain_context text, p_model_id text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_recommended_preset(p_domain_context text, p_model_id text) IS 'Get recommended preset for domain + model combination';


--
-- Name: get_request_stats(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_request_stats() RETURNS TABLE(state text, count bigint, avg_duration_ms real, max_duration_ms integer, oldest timestamp with time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    rl.state,
    COUNT(*)::BIGINT,
    AVG(
      EXTRACT(EPOCH FROM (
        COALESCE(completed_at, failed_at, killed_at, timeout_at, NOW()) - created_at
      )) * 1000
    )::REAL as avg_duration_ms,
    MAX(
      EXTRACT(EPOCH FROM (
        COALESCE(completed_at, failed_at, killed_at, timeout_at, NOW()) - created_at
      )) * 1000
    )::INTEGER as max_duration_ms,
    MIN(created_at) as oldest
  FROM request_lifecycle rl
  GROUP BY rl.state;
END;
$$;


ALTER FUNCTION public.get_request_stats() OWNER TO matthewmauer;

--
-- Name: get_sprite_sheet_full(character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_sprite_sheet_full(p_sheet_name character varying) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
  result JSON;
BEGIN
  SELECT json_build_object(
    'sheet', row_to_json(s.*),
    'atlas', (
      SELECT json_agg(row_to_json(a.*))
      FROM sprite_atlas a
      WHERE a.sheet_id = s.id
    )
  )
  INTO result
  FROM sprite_sheets s
  WHERE s.name = p_sheet_name;

  RETURN result;
END;
$$;


ALTER FUNCTION public.get_sprite_sheet_full(p_sheet_name character varying) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_sprite_sheet_full(p_sheet_name character varying); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_sprite_sheet_full(p_sheet_name character varying) IS 'Get sprite sheet with all atlas data';


--
-- Name: get_suggested_matchups(integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_suggested_matchups(p_item_id integer, p_count integer DEFAULT 5) RETURNS TABLE(id integer, item_name character varying, elo_rating integer, rating_diff integer, matches_played integer, win_probability numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_item_rating INT;
BEGIN
  -- Get the item's current rating
  SELECT ei.elo_rating INTO v_item_rating
  FROM elo_items ei
  WHERE ei.id = p_item_id;

  -- Return items with similar ratings
  RETURN QUERY
  SELECT
    ei.id,
    ei.item_name,
    ei.elo_rating,
    ABS(ei.elo_rating - v_item_rating) as rating_diff,
    ei.matches_played,
    ROUND(
      1.0 / (1.0 + POWER(10, (ei.elo_rating - v_item_rating::NUMERIC) / 400))::NUMERIC,
      3
    ) as win_probability
  FROM elo_items ei
  WHERE ei.id != p_item_id
    AND ei.item_type = (SELECT item_type FROM elo_items WHERE id = p_item_id)
  ORDER BY ABS(ei.elo_rating - v_item_rating), RANDOM()
  LIMIT p_count;
END;
$$;


ALTER FUNCTION public.get_suggested_matchups(p_item_id integer, p_count integer) OWNER TO matthewmauer;

--
-- Name: get_telemetry_summary(character varying, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_telemetry_summary(p_install_id character varying, p_days integer DEFAULT 7) RETURNS TABLE(feature_name character varying, usage_count bigint, avg_response_time_ms numeric, total_errors bigint, total_requests bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    f.feature_name,
    SUM(f.usage_count) as usage_count,
    AVG(p.duration_ms) as avg_response_time_ms,
    (
      SELECT COUNT(*)
      FROM telemetry_errors e
      WHERE e.install_id = p_install_id
        AND e.last_seen_at >= NOW() - (p_days || ' days')::INTERVAL
    ) as total_errors,
    (
      SELECT COUNT(*)
      FROM telemetry_performance perf
      WHERE perf.install_id = p_install_id
        AND perf.created_at >= NOW() - (p_days || ' days')::INTERVAL
    ) as total_requests
  FROM telemetry_features f
  LEFT JOIN telemetry_performance p ON p.install_id = f.install_id
  WHERE f.install_id = p_install_id
    AND f.last_used_at >= NOW() - (p_days || ' days')::INTERVAL
  GROUP BY f.feature_name
  ORDER BY usage_count DESC;
END;
$$;


ALTER FUNCTION public.get_telemetry_summary(p_install_id character varying, p_days integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_telemetry_summary(p_install_id character varying, p_days integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_telemetry_summary(p_install_id character varying, p_days integer) IS 'Get telemetry summary for install (last N days)';


--
-- Name: get_thread_with_comments(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_thread_with_comments(p_thread_id integer) RETURNS TABLE(post_id integer, parent_id integer, depth integer, author_name character varying, body text, score integer, created_at timestamp without time zone, edited boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  WITH RECURSIVE comment_tree AS (
    -- Base case: top-level comments
    SELECT
      p.id,
      p.parent_id,
      p.depth,
      p.author_name,
      p.body,
      p.score,
      p.created_at,
      p.edited,
      ARRAY[p.id] AS path
    FROM forum_posts p
    WHERE p.thread_id = p_thread_id AND p.parent_id IS NULL AND NOT p.deleted

    UNION ALL

    -- Recursive case: child comments
    SELECT
      p.id,
      p.parent_id,
      p.depth,
      p.author_name,
      p.body,
      p.score,
      p.created_at,
      p.edited,
      ct.path || p.id
    FROM forum_posts p
    INNER JOIN comment_tree ct ON p.parent_id = ct.id
    WHERE p.thread_id = p_thread_id AND NOT p.deleted
  )
  SELECT
    ct.id,
    ct.parent_id,
    ct.depth,
    ct.author_name,
    ct.body,
    ct.score,
    ct.created_at,
    ct.edited
  FROM comment_tree ct
  ORDER BY ct.path;
END;
$$;


ALTER FUNCTION public.get_thread_with_comments(p_thread_id integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION get_thread_with_comments(p_thread_id integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.get_thread_with_comments(p_thread_id integer) IS 'Get thread with nested comment tree';


--
-- Name: get_token_savings(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_token_savings(compaction_id integer) RETURNS TABLE(original_tokens integer, compacted_tokens integer, tokens_saved integer, reduction_percentage numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    (stages->'compaction'->'stats'->'original'->>'tokens')::INTEGER,
    (stages->'compaction'->'stats'->'compacted'->>'tokens')::INTEGER,
    ((stages->'compaction'->'stats'->'original'->>'tokens')::INTEGER -
     (stages->'compaction'->'stats'->'compacted'->>'tokens')::INTEGER),
    (stages->'compaction'->'stats'->'reduction'->>'tokens')::NUMERIC
  FROM compaction_results
  WHERE id = compaction_id;
END;
$$;


ALTER FUNCTION public.get_token_savings(compaction_id integer) OWNER TO matthewmauer;

--
-- Name: get_top_council_models(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_top_council_models(limit_count integer DEFAULT 10) RETURNS TABLE(model_name character varying, total_sessions integer, win_rate numeric, avg_response_ms numeric, reliability_score numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    cms.model_name,
    cms.total_sessions,
    CASE
      WHEN cms.total_sessions > 0
      THEN (cms.times_won_vote::DECIMAL / cms.total_sessions * 100)
      ELSE 0
    END as win_rate,
    cms.avg_response_time_ms,
    -- Reliability = (1 - timeout_rate) * (1 - error_rate)
    (
      (1.0 - COALESCE(cms.timeout_count::DECIMAL / NULLIF(cms.total_proposals, 0), 0)) *
      (1.0 - COALESCE(cms.error_count::DECIMAL / NULLIF(cms.total_proposals, 0), 0))
    ) * 100 as reliability_score
  FROM council_model_stats cms
  WHERE cms.total_sessions > 0
  ORDER BY reliability_score DESC, win_rate DESC
  LIMIT limit_count;
END;
$$;


ALTER FUNCTION public.get_top_council_models(limit_count integer) OWNER TO matthewmauer;

--
-- Name: get_user_by_handle(text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_user_by_handle(p_handle text) RETURNS TABLE(user_id integer, email text, username text, handle text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_handle_lowercase TEXT;
BEGIN
  v_handle_lowercase := LOWER(TRIM(p_handle));

  RETURN QUERY
  SELECT
    users.id,
    users.email,
    users.username,
    users.handle,
    users.created_at::TIMESTAMPTZ
  FROM users
  WHERE users.handle_lowercase = v_handle_lowercase;
END;
$$;


ALTER FUNCTION public.get_user_by_handle(p_handle text) OWNER TO matthewmauer;

--
-- Name: get_user_email_stats(character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_user_email_stats(p_user_id character varying) RETURNS TABLE(total_sent bigint, successful bigint, failed bigint, last_sent timestamp without time zone, unique_aliases bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    COUNT(*)::BIGINT as total_sent,
    COUNT(*) FILTER (WHERE status = 'sent')::BIGINT as successful,
    COUNT(*) FILTER (WHERE status = 'failed')::BIGINT as failed,
    MAX(created_at) as last_sent,
    COUNT(DISTINCT send_as_email)::BIGINT as unique_aliases
  FROM gmail_sent_emails
  WHERE user_id = p_user_id;
END;
$$;


ALTER FUNCTION public.get_user_email_stats(p_user_id character varying) OWNER TO matthewmauer;

--
-- Name: get_user_relay_stats(character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.get_user_relay_stats(p_user_id character varying) RETURNS TABLE(total_relayed bigint, successful bigint, failed bigint, filtered bigint, last_relay timestamp without time zone, active_days bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    COUNT(*)::BIGINT as total_relayed,
    COUNT(*) FILTER (WHERE status = 'sent')::BIGINT as successful,
    COUNT(*) FILTER (WHERE status = 'failed')::BIGINT as failed,
    COUNT(*) FILTER (WHERE status = 'filtered')::BIGINT as filtered,
    MAX(created_at) as last_relay,
    COUNT(DISTINCT DATE_TRUNC('day', created_at))::BIGINT as active_days
  FROM email_relay_logs
  WHERE user_id = p_user_id;
END;
$$;


ALTER FUNCTION public.get_user_relay_stats(p_user_id character varying) OWNER TO matthewmauer;

--
-- Name: increment_artifact_usage(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.increment_artifact_usage() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.success THEN
    UPDATE bucket_artifacts
    SET
      times_used = times_used + 1,
      last_used_at = NEW.timestamp
    WHERE artifact_id = NEW.artifact_id;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.increment_artifact_usage() OWNER TO matthewmauer;

--
-- Name: increment_bucket_usage(text, boolean, real, numeric); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.increment_bucket_usage(p_bucket_id text, p_success boolean, p_response_time_ms real, p_cost_usd numeric) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE bucket_instances
  SET
    total_requests = total_requests + 1,
    successful_requests = successful_requests + CASE WHEN p_success THEN 1 ELSE 0 END,
    failed_requests = failed_requests + CASE WHEN p_success THEN 0 ELSE 1 END,
    total_cost_usd = total_cost_usd + COALESCE(p_cost_usd, 0),
    avg_response_time_ms = (
      COALESCE(avg_response_time_ms, 0) * total_requests + p_response_time_ms
    ) / (total_requests + 1),
    updated_at = NOW()
  WHERE bucket_id = p_bucket_id;
END;
$$;


ALTER FUNCTION public.increment_bucket_usage(p_bucket_id text, p_success boolean, p_response_time_ms real, p_cost_usd numeric) OWNER TO matthewmauer;

--
-- Name: increment_feature_usage(character varying, character varying); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.increment_feature_usage(p_install_id character varying, p_feature_name character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO telemetry_features (
    install_id,
    feature_name,
    usage_count,
    last_used_at
  ) VALUES (
    p_install_id,
    p_feature_name,
    1,
    NOW()
  )
  ON CONFLICT (install_id, feature_name) DO UPDATE SET
    usage_count = telemetry_features.usage_count + 1,
    last_used_at = NOW(),
    updated_at = NOW();
END;
$$;


ALTER FUNCTION public.increment_feature_usage(p_install_id character varying, p_feature_name character varying) OWNER TO matthewmauer;

--
-- Name: FUNCTION increment_feature_usage(p_install_id character varying, p_feature_name character varying); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.increment_feature_usage(p_install_id character varying, p_feature_name character varying) IS 'Increment feature usage count';


--
-- Name: increment_pattern_usage(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.increment_pattern_usage() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.success THEN
    UPDATE domain_code_examples
    SET
      times_used = times_used + 1,
      success_rate = (
        SELECT AVG(CASE WHEN success THEN 1.0 ELSE 0.0 END)
        FROM domain_pattern_usage
        WHERE example_id = NEW.example_id
      )
    WHERE example_id = NEW.example_id;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.increment_pattern_usage() OWNER TO matthewmauer;

--
-- Name: is_handle_available(text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.is_handle_available(p_handle text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
  v_handle_lowercase TEXT;
  v_is_taken BOOLEAN;
  v_is_blocked BOOLEAN;
BEGIN
  -- Normalize handle
  v_handle_lowercase := LOWER(TRIM(p_handle));

  -- Check basic format (3-30 chars, alphanumeric + underscore)
  IF v_handle_lowercase !~ '^[a-z0-9_]{3,30}$' THEN
    RETURN FALSE;
  END IF;

  -- Check if already taken
  SELECT EXISTS(
    SELECT 1 FROM users WHERE handle_lowercase = v_handle_lowercase
  ) INTO v_is_taken;

  IF v_is_taken THEN
    RETURN FALSE;
  END IF;

  -- Check if reserved
  SELECT EXISTS(
    SELECT 1 FROM handle_reservations
    WHERE handle_lowercase = v_handle_lowercase
    AND status = 'reserved'
    AND (expires_at IS NULL OR expires_at > NOW())
  ) INTO v_is_taken;

  IF v_is_taken THEN
    RETURN FALSE;
  END IF;

  -- Check if blocked
  SELECT EXISTS(
    SELECT 1 FROM blocked_handles
    WHERE v_handle_lowercase LIKE handle_pattern
  ) INTO v_is_blocked;

  IF v_is_blocked THEN
    RETURN FALSE;
  END IF;

  RETURN TRUE;
END;
$_$;


ALTER FUNCTION public.is_handle_available(p_handle text) OWNER TO matthewmauer;

--
-- Name: kill_request(uuid, text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.kill_request(p_request_id uuid, p_killed_by text, p_reason text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE request_lifecycle
  SET
    state = 'killed',
    killed_at = NOW(),
    killed_by = p_killed_by,
    kill_reason = p_reason
  WHERE request_id = p_request_id
    AND state IN ('created', 'pending', 'running');

  IF FOUND THEN
    -- Log transition
    PERFORM transition_request_state(p_request_id, 'killed', p_reason, p_killed_by);
    RETURN TRUE;
  END IF;

  RETURN FALSE;
END;
$$;


ALTER FUNCTION public.kill_request(p_request_id uuid, p_killed_by text, p_reason text) OWNER TO matthewmauer;

--
-- Name: FUNCTION kill_request(p_request_id uuid, p_killed_by text, p_reason text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.kill_request(p_request_id uuid, p_killed_by text, p_reason text) IS 'Kill active request with reason (user cancel, timeout, error)';


--
-- Name: log_credential_usage(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.log_credential_usage() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE service_credentials
  SET
    last_used = CURRENT_TIMESTAMP,
    use_count = use_count + 1
  WHERE id = NEW.credential_id;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.log_credential_usage() OWNER TO matthewmauer;

--
-- Name: log_model_version_deployment(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.log_model_version_deployment() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Determine action
  DECLARE
    action_type TEXT;
  BEGIN
    IF TG_OP = 'INSERT' THEN
      action_type := 'deployed';
    ELSIF OLD.status != NEW.status THEN
      IF NEW.status = 'retired' THEN
        action_type := 'retired';
      ELSIF OLD.status = 'retired' AND NEW.status = 'active' THEN
        action_type := 'rolled_back';
      ELSE
        action_type := 'status_changed';
      END IF;
    ELSIF OLD.traffic_percent != NEW.traffic_percent THEN
      action_type := 'traffic_updated';
    ELSE
      RETURN NEW; -- No significant change
    END IF;

    -- Log deployment
    INSERT INTO model_version_deployments (
      version_id, domain, version_name, action,
      old_status, new_status,
      old_traffic_percent, new_traffic_percent
    ) VALUES (
      NEW.id, NEW.domain, NEW.version_name, action_type,
      CASE WHEN TG_OP = 'UPDATE' THEN OLD.status ELSE NULL END,
      NEW.status,
      CASE WHEN TG_OP = 'UPDATE' THEN OLD.traffic_percent ELSE NULL END,
      NEW.traffic_percent
    );

    RETURN NEW;
  END;
END;
$$;


ALTER FUNCTION public.log_model_version_deployment() OWNER TO matthewmauer;

--
-- Name: mark_song_played(integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.mark_song_played(p_request_id integer, p_play_duration_ms integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE song_requests
  SET status = 'played',
      played_at = NOW(),
      play_duration_ms = p_play_duration_ms
  WHERE id = p_request_id;

  -- Update room state
  UPDATE room_state
  SET current_song_id = p_request_id,
      current_song_started_at = NOW(),
      queue_length = GREATEST(queue_length - 1, 0),
      last_updated = NOW()
  WHERE room_name = 'lofi-stream';
END;
$$;


ALTER FUNCTION public.mark_song_played(p_request_id integer, p_play_duration_ms integer) OWNER TO matthewmauer;

--
-- Name: mark_timed_out_requests(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.mark_timed_out_requests() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_count INTEGER;
BEGIN
  WITH timed_out AS (
    UPDATE request_lifecycle
    SET
      state = 'timeout',
      timeout_at = NOW()
    WHERE state IN ('pending', 'running')
      AND deadline_at < NOW()
    RETURNING request_id
  )
  SELECT COUNT(*) INTO v_count FROM timed_out;

  -- Log transitions
  INSERT INTO request_state_transitions (request_id, from_state, to_state, reason, triggered_by)
  SELECT
    request_id,
    state,
    'timeout',
    'Exceeded deadline',
    'system'
  FROM request_lifecycle
  WHERE state = 'timeout'
    AND timeout_at >= NOW() - INTERVAL '1 second';

  RETURN v_count;
END;
$$;


ALTER FUNCTION public.mark_timed_out_requests() OWNER TO matthewmauer;

--
-- Name: FUNCTION mark_timed_out_requests(); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.mark_timed_out_requests() IS 'Scan for requests past deadline and mark as timeout';


--
-- Name: moderate_song_request(integer, uuid, character varying, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.moderate_song_request(p_request_id integer, p_moderator_id uuid, p_action character varying, p_reason text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_moderator RECORD;
BEGIN
  -- Check if moderator has permission
  SELECT * INTO v_moderator FROM user_devices WHERE user_id = p_moderator_id;

  IF NOT v_moderator.can_moderate THEN
    RETURN FALSE;
  END IF;

  IF p_action = 'approve' THEN
    UPDATE song_requests
    SET status = 'approved',
        approved_by = p_moderator_id,
        approved_at = NOW()
    WHERE id = p_request_id;
  ELSIF p_action = 'reject' THEN
    UPDATE song_requests
    SET status = 'rejected',
        approved_by = p_moderator_id,
        approved_at = NOW(),
        rejection_reason = p_reason
    WHERE id = p_request_id;
  ELSE
    RETURN FALSE;
  END IF;

  RETURN TRUE;
END;
$$;


ALTER FUNCTION public.moderate_song_request(p_request_id integer, p_moderator_id uuid, p_action character varying, p_reason text) OWNER TO matthewmauer;

--
-- Name: queue_package_vendor(character varying, character varying, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.queue_package_vendor(p_package_name character varying, p_package_version character varying, p_package_type character varying, p_priority integer DEFAULT 0, p_reason text DEFAULT NULL::text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_package_id INTEGER;
BEGIN
    -- Check if already vendored
    SELECT id INTO v_package_id
    FROM vendored_packages
    WHERE package_name = p_package_name
      AND package_version = p_package_version
      AND package_type = p_package_type;

    IF v_package_id IS NOT NULL THEN
        -- Already vendored, just update accessed_at
        UPDATE vendored_packages
        SET accessed_at = CURRENT_TIMESTAMP
        WHERE id = v_package_id;

        RETURN v_package_id;
    END IF;

    -- Create pending vendor entry
    INSERT INTO vendored_packages (
        package_name,
        package_version,
        package_type,
        vendor_status,
        vendor_reason,
        minio_object_path
    ) VALUES (
        p_package_name,
        p_package_version,
        p_package_type,
        'pending',
        p_reason,
        FORMAT('packages/%s/%s/%s-%s.tar.gz', p_package_type, p_package_name, p_package_name, p_package_version)
    ) RETURNING id INTO v_package_id;

    RETURN v_package_id;
END;
$$;


ALTER FUNCTION public.queue_package_vendor(p_package_name character varying, p_package_version character varying, p_package_type character varying, p_priority integer, p_reason text) OWNER TO matthewmauer;

--
-- Name: record_campaign_conversion(uuid, uuid, character varying, integer, integer, jsonb); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.record_campaign_conversion(campaign_uuid uuid, variant_uuid uuid, conversion_type_param character varying, conversion_value_cents_param integer, ai_cost_cents_param integer DEFAULT 0, metadata_param jsonb DEFAULT '{}'::jsonb) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  conversion_uuid UUID;
  campaign_record RECORD;
  commission_cents_calc INTEGER;
  platform_fee_cents_calc INTEGER;
BEGIN
  -- Get campaign details
  SELECT * INTO campaign_record
  FROM ad_campaigns
  WHERE campaign_id = campaign_uuid;

  -- Calculate commission (if using commission model)
  IF campaign_record.pricing_model IN ('commission', 'hybrid') THEN
    commission_cents_calc := FLOOR(conversion_value_cents_param * campaign_record.commission_rate);
  ELSE
    commission_cents_calc := 0;
  END IF;

  -- Calculate platform fee (5% of AI costs if using client keys, 50% markup if using platform keys)
  IF campaign_record.use_client_keys THEN
    platform_fee_cents_calc := FLOOR(ai_cost_cents_param * 0.05);
  ELSE
    platform_fee_cents_calc := FLOOR(ai_cost_cents_param * 0.5);
  END IF;

  -- Record conversion
  INSERT INTO campaign_conversions (
    campaign_id,
    variant_id,
    conversion_type,
    conversion_value_cents,
    ai_cost_cents,
    platform_fee_cents,
    total_cost_cents,
    revenue_cents,
    commission_cents,
    metadata
  )
  VALUES (
    campaign_uuid,
    variant_uuid,
    conversion_type_param,
    conversion_value_cents_param,
    ai_cost_cents_param,
    platform_fee_cents_calc,
    ai_cost_cents_param + platform_fee_cents_calc,
    conversion_value_cents_param,
    commission_cents_calc,
    metadata_param
  )
  RETURNING conversion_id INTO conversion_uuid;

  -- Update campaign stats
  UPDATE ad_campaigns
  SET total_conversions = total_conversions + 1,
      total_revenue_cents = total_revenue_cents + conversion_value_cents_param,
      total_cost_cents = total_cost_cents + ai_cost_cents_param + platform_fee_cents_calc,
      spent_cents = spent_cents + ai_cost_cents_param + platform_fee_cents_calc,
      updated_at = NOW()
  WHERE campaign_id = campaign_uuid;

  -- Update variant stats
  UPDATE campaign_variants
  SET conversions = conversions + 1,
      revenue_cents = revenue_cents + conversion_value_cents_param,
      cost_cents = cost_cents + ai_cost_cents_param + platform_fee_cents_calc,
      updated_at = NOW()
  WHERE variant_id = variant_uuid;

  RETURN conversion_uuid;
END;
$$;


ALTER FUNCTION public.record_campaign_conversion(campaign_uuid uuid, variant_uuid uuid, conversion_type_param character varying, conversion_value_cents_param integer, ai_cost_cents_param integer, metadata_param jsonb) OWNER TO matthewmauer;

--
-- Name: FUNCTION record_campaign_conversion(campaign_uuid uuid, variant_uuid uuid, conversion_type_param character varying, conversion_value_cents_param integer, ai_cost_cents_param integer, metadata_param jsonb); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.record_campaign_conversion(campaign_uuid uuid, variant_uuid uuid, conversion_type_param character varying, conversion_value_cents_param integer, ai_cost_cents_param integer, metadata_param jsonb) IS 'Record conversion with revenue attribution and commission calculation';


--
-- Name: record_component_relationship(text, text, text, text, text, uuid, text, uuid, jsonb, integer, boolean, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.record_component_relationship(p_source_type text, p_source_id text, p_target_type text, p_target_id text, p_relationship_type text, p_user_id uuid DEFAULT NULL::uuid, p_session_id text DEFAULT NULL::text, p_request_id uuid DEFAULT NULL::uuid, p_metadata jsonb DEFAULT '{}'::jsonb, p_execution_time_ms integer DEFAULT NULL::integer, p_success boolean DEFAULT true, p_error_message text DEFAULT NULL::text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_relationship_id INTEGER;
BEGIN
  -- Insert relationship
  INSERT INTO component_relationships (
    source_type,
    source_id,
    target_type,
    target_id,
    relationship_type,
    user_id,
    session_id,
    request_id,
    metadata,
    execution_time_ms,
    success,
    error_message
  ) VALUES (
    p_source_type,
    p_source_id,
    p_target_type,
    p_target_id,
    p_relationship_type,
    p_user_id,
    p_session_id,
    p_request_id,
    p_metadata,
    p_execution_time_ms,
    p_success,
    p_error_message
  ) RETURNING relationship_id INTO v_relationship_id;

  -- Update usage stats (async trigger will handle this)
  RETURN v_relationship_id;
END;
$$;


ALTER FUNCTION public.record_component_relationship(p_source_type text, p_source_id text, p_target_type text, p_target_id text, p_relationship_type text, p_user_id uuid, p_session_id text, p_request_id uuid, p_metadata jsonb, p_execution_time_ms integer, p_success boolean, p_error_message text) OWNER TO matthewmauer;

--
-- Name: FUNCTION record_component_relationship(p_source_type text, p_source_id text, p_target_type text, p_target_id text, p_relationship_type text, p_user_id uuid, p_session_id text, p_request_id uuid, p_metadata jsonb, p_execution_time_ms integer, p_success boolean, p_error_message text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.record_component_relationship(p_source_type text, p_source_id text, p_target_type text, p_target_id text, p_relationship_type text, p_user_id uuid, p_session_id text, p_request_id uuid, p_metadata jsonb, p_execution_time_ms integer, p_success boolean, p_error_message text) IS 'Records a new component relationship/usage';


--
-- Name: record_error_occurrence(character varying, character varying, character varying, text, text, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.record_error_occurrence(p_install_id character varying, p_error_type character varying, p_error_name character varying, p_error_message text, p_error_stack text, p_path character varying DEFAULT NULL::character varying, p_method character varying DEFAULT NULL::character varying, p_status_code integer DEFAULT NULL::integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_error_id INTEGER;
BEGIN
  -- Try to find existing error
  SELECT error_id INTO v_error_id
  FROM telemetry_errors
  WHERE install_id = p_install_id
    AND error_type = p_error_type
    AND error_name = p_error_name
    AND path = p_path
  LIMIT 1;

  IF v_error_id IS NOT NULL THEN
    -- Update existing error
    UPDATE telemetry_errors
    SET
      occurrence_count = occurrence_count + 1,
      last_seen_at = NOW()
    WHERE error_id = v_error_id;
  ELSE
    -- Insert new error
    INSERT INTO telemetry_errors (
      install_id,
      error_type,
      error_name,
      error_message,
      error_stack,
      path,
      method,
      status_code
    ) VALUES (
      p_install_id,
      p_error_type,
      p_error_name,
      p_error_message,
      p_error_stack,
      p_path,
      p_method,
      p_status_code
    );
  END IF;
END;
$$;


ALTER FUNCTION public.record_error_occurrence(p_install_id character varying, p_error_type character varying, p_error_name character varying, p_error_message text, p_error_stack text, p_path character varying, p_method character varying, p_status_code integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION record_error_occurrence(p_install_id character varying, p_error_type character varying, p_error_name character varying, p_error_message text, p_error_stack text, p_path character varying, p_method character varying, p_status_code integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.record_error_occurrence(p_install_id character varying, p_error_type character varying, p_error_name character varying, p_error_message text, p_error_stack text, p_path character varying, p_method character varying, p_status_code integer) IS 'Record error occurrence (deduplicate similar errors)';


--
-- Name: record_health_metric(character varying, numeric, character varying, jsonb); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.record_health_metric(p_metric_name character varying, p_metric_value numeric, p_status character varying, p_metadata jsonb DEFAULT '{}'::jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO health_metrics (metric_name, metric_value, status, metadata)
  VALUES (p_metric_name, p_metric_value, p_status, p_metadata);
END;
$$;


ALTER FUNCTION public.record_health_metric(p_metric_name character varying, p_metric_value numeric, p_status character varying, p_metadata jsonb) OWNER TO matthewmauer;

--
-- Name: record_pattern_match(uuid, character varying, jsonb, numeric, uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.record_pattern_match(p_session_id uuid, p_action character varying, p_context jsonb, p_similarity numeric, p_matched_session uuid DEFAULT NULL::uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_pattern_id UUID;
BEGIN
  INSERT INTO autonomous_patterns (
    session_id,
    action,
    context,
    similarity_score,
    matched_session_id
  ) VALUES (
    p_session_id,
    p_action,
    p_context,
    p_similarity,
    p_matched_session
  )
  RETURNING pattern_id INTO v_pattern_id;

  RETURN v_pattern_id;
END;
$$;


ALTER FUNCTION public.record_pattern_match(p_session_id uuid, p_action character varying, p_context jsonb, p_similarity numeric, p_matched_session uuid) OWNER TO matthewmauer;

--
-- Name: record_price_to_history(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.record_price_to_history() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Extract data from cache and insert to history
  IF (NEW.data->>'symbol' IS NOT NULL) THEN
    INSERT INTO price_history (
      symbol,
      asset_type,
      price,
      change_24h,
      volume_24h,
      currency,
      source,
      recorded_at
    )
    VALUES (
      NEW.data->>'symbol',
      CASE
        WHEN NEW.cache_key LIKE 'crypto_%' THEN 'crypto'
        WHEN NEW.cache_key LIKE 'stock_%' THEN 'stock'
        ELSE 'unknown'
      END,
      (NEW.data->>'price')::decimal,
      (NEW.data->>'change24h')::decimal,
      (NEW.data->>'volume24h')::decimal,
      COALESCE(NEW.data->>'currency', 'USD'),
      NEW.data->>'source',
      CURRENT_TIMESTAMP
    );
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.record_price_to_history() OWNER TO matthewmauer;

--
-- Name: record_shard_health_check(integer, boolean); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.record_shard_health_check(p_shard_index integer, p_is_healthy boolean) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE shard_registry
  SET
    last_health_check = NOW(),
    health_status = CASE
      WHEN p_is_healthy THEN 'healthy'
      ELSE 'unhealthy'
    END,
    consecutive_failures = CASE
      WHEN p_is_healthy THEN 0
      ELSE consecutive_failures + 1
    END
  WHERE shard_index = p_shard_index;
END;
$$;


ALTER FUNCTION public.record_shard_health_check(p_shard_index integer, p_is_healthy boolean) OWNER TO matthewmauer;

--
-- Name: record_translation_stat(character varying, boolean, boolean, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.record_translation_stat(p_language_pair character varying, p_api_call boolean DEFAULT false, p_cache_hit boolean DEFAULT false, p_char_count integer DEFAULT 0) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO translation_stats (date, language_pair, api_calls, cache_hits, total_chars_translated)
  VALUES (
    CURRENT_DATE,
    p_language_pair,
    CASE WHEN p_api_call THEN 1 ELSE 0 END,
    CASE WHEN p_cache_hit THEN 1 ELSE 0 END,
    p_char_count
  )
  ON CONFLICT (date, language_pair) DO UPDATE
  SET
    api_calls = translation_stats.api_calls + CASE WHEN p_api_call THEN 1 ELSE 0 END,
    cache_hits = translation_stats.cache_hits + CASE WHEN p_cache_hit THEN 1 ELSE 0 END,
    total_chars_translated = translation_stats.total_chars_translated + p_char_count;
END;
$$;


ALTER FUNCTION public.record_translation_stat(p_language_pair character varying, p_api_call boolean, p_cache_hit boolean, p_char_count integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION record_translation_stat(p_language_pair character varying, p_api_call boolean, p_cache_hit boolean, p_char_count integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.record_translation_stat(p_language_pair character varying, p_api_call boolean, p_cache_hit boolean, p_char_count integer) IS 'Records daily translation statistics (API calls, cache hits, character count)';


--
-- Name: refresh_experiment_statistics(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.refresh_experiment_statistics(p_experiment_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_affected_rows INTEGER;
BEGIN
  -- Aggregate results per variant
  INSERT INTO experiment_statistics (
    experiment_id,
    variant_id,
    total_observations,
    success_count,
    avg_response_time_ms,
    avg_cost_usd,
    avg_satisfaction,
    conversion_count,
    updated_at
  )
  SELECT
    er.experiment_id,
    er.variant_id,
    COUNT(*) as total_observations,
    COUNT(*) FILTER (WHERE er.success = true) as success_count,
    AVG(er.response_time_ms) as avg_response_time_ms,
    AVG(er.cost_usd) as avg_cost_usd,
    AVG(er.user_satisfaction) as avg_satisfaction,
    COUNT(*) FILTER (WHERE er.conversion = true) as conversion_count,
    NOW() as updated_at
  FROM experiment_results er
  WHERE er.experiment_id = p_experiment_id
  GROUP BY er.experiment_id, er.variant_id
  ON CONFLICT (experiment_id, variant_id) DO UPDATE SET
    total_observations = EXCLUDED.total_observations,
    success_count = EXCLUDED.success_count,
    avg_response_time_ms = EXCLUDED.avg_response_time_ms,
    avg_cost_usd = EXCLUDED.avg_cost_usd,
    avg_satisfaction = EXCLUDED.avg_satisfaction,
    conversion_count = EXCLUDED.conversion_count,
    updated_at = NOW();

  GET DIAGNOSTICS v_affected_rows = ROW_COUNT;
  RETURN v_affected_rows;
END;
$$;


ALTER FUNCTION public.refresh_experiment_statistics(p_experiment_id integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION refresh_experiment_statistics(p_experiment_id integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.refresh_experiment_statistics(p_experiment_id integer) IS 'Aggregate results into statistics table (auto-triggered)';


--
-- Name: refresh_model_benchmark(text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.refresh_model_benchmark(p_model_id text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_throughput RECORD;
BEGIN
  -- Calculate throughput from last 24 hours
  SELECT * INTO v_throughput FROM calculate_model_throughput(p_model_id, 24);

  IF v_throughput.measurement_count = 0 THEN
    RETURN FALSE;
  END IF;

  -- Update or insert benchmark
  INSERT INTO model_benchmarks (
    model_id,
    avg_tokens_per_second,
    p50_tokens_per_second,
    p95_tokens_per_second,
    min_tokens_per_second,
    max_tokens_per_second,
    measurements_count,
    updated_at
  ) VALUES (
    p_model_id,
    v_throughput.avg_tps,
    v_throughput.p50_tps,
    v_throughput.p95_tps,
    v_throughput.min_tps,
    v_throughput.max_tps,
    v_throughput.measurement_count,
    NOW()
  )
  ON CONFLICT (model_id) DO UPDATE SET
    avg_tokens_per_second = EXCLUDED.avg_tokens_per_second,
    p50_tokens_per_second = EXCLUDED.p50_tokens_per_second,
    p95_tokens_per_second = EXCLUDED.p95_tokens_per_second,
    min_tokens_per_second = EXCLUDED.min_tokens_per_second,
    max_tokens_per_second = EXCLUDED.max_tokens_per_second,
    measurements_count = EXCLUDED.measurements_count,
    updated_at = NOW();

  RETURN TRUE;
END;
$$;


ALTER FUNCTION public.refresh_model_benchmark(p_model_id text) OWNER TO matthewmauer;

--
-- Name: FUNCTION refresh_model_benchmark(p_model_id text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.refresh_model_benchmark(p_model_id text) IS 'Update model benchmark from recent usage data';


--
-- Name: refresh_model_rankings(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.refresh_model_rankings() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_count INTEGER := 0;
BEGIN
  -- Upsert rankings for all use-case/model combinations
  INSERT INTO model_rankings (
    use_case_category,
    model_id,
    model_provider,
    total_requests,
    successful_requests,
    failed_requests,
    avg_response_time_ms,
    p95_response_time_ms,
    avg_tokens,
    avg_cost_per_request,
    total_cost_usd,
    avg_followup_rate,
    avg_abandon_rate,
    ranking_score,
    last_updated
  )
  SELECT
    use_case_category,
    model_id,
    model_provider,
    COUNT(*) as total_requests,
    COUNT(*) FILTER (WHERE status = 'success'),
    COUNT(*) FILTER (WHERE status = 'error'),
    AVG(response_time_ms),
    PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY response_time_ms),
    AVG(response_tokens),
    AVG(cost_usd),
    SUM(cost_usd),
    AVG(CASE WHEN had_followup THEN 1.0 ELSE 0.0 END),
    AVG(CASE WHEN session_abandoned THEN 1.0 ELSE 0.0 END),
    calculate_ranking_score(use_case_category, model_id),
    CURRENT_TIMESTAMP
  FROM model_usage_log
  WHERE use_case_category IS NOT NULL
    AND model_id IS NOT NULL
  GROUP BY use_case_category, model_id, model_provider
  ON CONFLICT (use_case_category, model_id) DO UPDATE SET
    total_requests = EXCLUDED.total_requests,
    successful_requests = EXCLUDED.successful_requests,
    failed_requests = EXCLUDED.failed_requests,
    avg_response_time_ms = EXCLUDED.avg_response_time_ms,
    p95_response_time_ms = EXCLUDED.p95_response_time_ms,
    avg_tokens = EXCLUDED.avg_tokens,
    avg_cost_per_request = EXCLUDED.avg_cost_per_request,
    total_cost_usd = EXCLUDED.total_cost_usd,
    avg_followup_rate = EXCLUDED.avg_followup_rate,
    avg_abandon_rate = EXCLUDED.avg_abandon_rate,
    ranking_score = EXCLUDED.ranking_score,
    last_updated = EXCLUDED.last_updated;

  GET DIAGNOSTICS v_count = ROW_COUNT;
  RETURN v_count;
END;
$$;


ALTER FUNCTION public.refresh_model_rankings() OWNER TO matthewmauer;

--
-- Name: refresh_model_version_performance(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.refresh_model_version_performance(days_back integer DEFAULT 1) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  affected_rows INTEGER;
BEGIN
  -- Aggregate usage data by version and date
  INSERT INTO model_version_performance (
    version_id,
    domain,
    version_name,
    date,
    total_requests,
    successful_requests,
    failed_requests,
    unique_users,
    avg_response_time_ms,
    avg_cost_per_request,
    total_cost_usd,
    updated_at
  )
  SELECT
    mv.id as version_id,
    mul.use_case_category as domain,
    mul.model_version as version_name,
    DATE(mul.timestamp) as date,
    COUNT(*) as total_requests,
    COUNT(*) FILTER (WHERE mul.status = 'success') as successful_requests,
    COUNT(*) FILTER (WHERE mul.status != 'success') as failed_requests,
    COUNT(DISTINCT mul.user_id) as unique_users,
    AVG(mul.response_time_ms) as avg_response_time_ms,
    AVG(mul.cost_usd) as avg_cost_per_request,
    SUM(mul.cost_usd) as total_cost_usd,
    NOW() as updated_at
  FROM model_usage_log mul
  LEFT JOIN model_versions mv ON mv.version_name = mul.model_version
    AND mv.domain = mul.use_case_category
  WHERE mul.timestamp >= CURRENT_DATE - (days_back || ' days')::INTERVAL
    AND mul.model_version IS NOT NULL
    AND mul.use_case_category IS NOT NULL
  GROUP BY mv.id, mul.use_case_category, mul.model_version, DATE(mul.timestamp)
  ON CONFLICT (version_id, date) DO UPDATE SET
    total_requests = EXCLUDED.total_requests,
    successful_requests = EXCLUDED.successful_requests,
    failed_requests = EXCLUDED.failed_requests,
    unique_users = EXCLUDED.unique_users,
    avg_response_time_ms = EXCLUDED.avg_response_time_ms,
    avg_cost_per_request = EXCLUDED.avg_cost_per_request,
    total_cost_usd = EXCLUDED.total_cost_usd,
    updated_at = NOW();

  GET DIAGNOSTICS affected_rows = ROW_COUNT;
  RETURN affected_rows;
END;
$$;


ALTER FUNCTION public.refresh_model_version_performance(days_back integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION refresh_model_version_performance(days_back integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.refresh_model_version_performance(days_back integer) IS 'Refresh version performance stats from usage logs (call daily)';


--
-- Name: refresh_training_task_leaderboard(text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.refresh_training_task_leaderboard(p_period_type text DEFAULT 'all_time'::text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_period_start DATE;
  v_affected_rows INTEGER;
BEGIN
  -- Determine period start
  CASE p_period_type
    WHEN 'daily' THEN v_period_start := CURRENT_DATE;
    WHEN 'weekly' THEN v_period_start := CURRENT_DATE - EXTRACT(DOW FROM CURRENT_DATE)::INTEGER;
    WHEN 'monthly' THEN v_period_start := DATE_TRUNC('month', CURRENT_DATE)::DATE;
    ELSE v_period_start := '1970-01-01'::DATE; -- all_time
  END CASE;

  -- Aggregate and rank
  WITH user_stats AS (
    SELECT
      ta.user_id,
      COUNT(*) as tasks_completed,
      SUM(ta.xp_earned) as total_xp,
      AVG(ta.quality_score) as avg_quality
    FROM training_task_assignments ta
    WHERE ta.status = 'completed'
      AND (p_period_type = 'all_time' OR ta.completed_at >= v_period_start)
    GROUP BY ta.user_id
  ),
  ranked AS (
    SELECT
      user_id,
      tasks_completed,
      total_xp,
      avg_quality,
      ROW_NUMBER() OVER (ORDER BY total_xp DESC) as rank
    FROM user_stats
  )
  INSERT INTO training_task_leaderboard (
    period_type, period_start, user_id,
    tasks_completed, total_xp_earned, avg_quality_score, rank, updated_at
  )
  SELECT
    p_period_type, v_period_start, user_id,
    tasks_completed, total_xp, avg_quality, rank, NOW()
  FROM ranked
  ON CONFLICT (period_type, period_start, user_id) DO UPDATE SET
    tasks_completed = EXCLUDED.tasks_completed,
    total_xp_earned = EXCLUDED.total_xp_earned,
    avg_quality_score = EXCLUDED.avg_quality_score,
    rank = EXCLUDED.rank,
    updated_at = NOW();

  GET DIAGNOSTICS v_affected_rows = ROW_COUNT;
  RETURN v_affected_rows;
END;
$$;


ALTER FUNCTION public.refresh_training_task_leaderboard(p_period_type text) OWNER TO matthewmauer;

--
-- Name: FUNCTION refresh_training_task_leaderboard(p_period_type text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.refresh_training_task_leaderboard(p_period_type text) IS 'Refresh leaderboard rankings (call daily via cron)';


--
-- Name: refresh_wrapper_performance(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.refresh_wrapper_performance(days_back integer DEFAULT 1) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  affected_rows INTEGER;
BEGIN
  -- Aggregate usage data by wrapper, domain, profile, and date
  INSERT INTO wrapper_performance (
    wrapper_name,
    domain,
    user_profile,
    date,
    total_requests,
    successful_requests,
    avg_response_time_ms,
    avg_cost_per_request,
    avg_followup_rate,
    updated_at
  )
  SELECT
    mul.wrapper_name,
    mul.use_case_category as domain,
    COALESCE(up.selected_profile, up.detected_profile) as user_profile,
    DATE(mul.timestamp) as date,
    COUNT(*) as total_requests,
    COUNT(*) FILTER (WHERE mul.status = 'success') as successful_requests,
    AVG(mul.response_time_ms) as avg_response_time_ms,
    AVG(mul.cost_usd) as avg_cost_per_request,
    AVG(CASE WHEN mul.had_followup THEN 1 ELSE 0 END) as avg_followup_rate,
    NOW() as updated_at
  FROM model_usage_log mul
  LEFT JOIN user_profiles up ON up.user_id = mul.user_id
  WHERE mul.timestamp >= CURRENT_DATE - (days_back || ' days')::INTERVAL
    AND mul.wrapper_name IS NOT NULL
  GROUP BY mul.wrapper_name, mul.use_case_category, COALESCE(up.selected_profile, up.detected_profile), DATE(mul.timestamp)
  ON CONFLICT (wrapper_name, domain, user_profile, date) DO UPDATE SET
    total_requests = EXCLUDED.total_requests,
    successful_requests = EXCLUDED.successful_requests,
    avg_response_time_ms = EXCLUDED.avg_response_time_ms,
    avg_cost_per_request = EXCLUDED.avg_cost_per_request,
    avg_followup_rate = EXCLUDED.avg_followup_rate,
    updated_at = NOW();

  GET DIAGNOSTICS affected_rows = ROW_COUNT;
  RETURN affected_rows;
END;
$$;


ALTER FUNCTION public.refresh_wrapper_performance(days_back integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION refresh_wrapper_performance(days_back integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.refresh_wrapper_performance(days_back integer) IS 'Refresh wrapper performance stats from usage logs (call daily)';


--
-- Name: request_song(character varying, uuid, character varying, character varying, text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.request_song(p_device_id character varying, p_user_id uuid, p_song_title character varying, p_song_artist character varying, p_song_url text, p_message text DEFAULT NULL::text) RETURNS TABLE(success boolean, request_id integer, queue_position integer, error_code character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_device RECORD;
  v_recent_requests INTEGER;
  v_new_id INTEGER;
  v_new_position INTEGER;
BEGIN
  -- Get device info
  SELECT * INTO v_device FROM user_devices WHERE device_id = p_device_id;

  -- Check if device is blocked or suspicious
  IF v_device.is_blocked THEN
    RETURN QUERY SELECT FALSE, NULL::INTEGER, NULL::INTEGER, 'DEVICE_BLOCKED'::VARCHAR;
    RETURN;
  END IF;

  IF v_device.is_suspicious AND v_device.trust_score < 0.5 THEN
    RETURN QUERY SELECT FALSE, NULL::INTEGER, NULL::INTEGER, 'SUSPICIOUS_DEVICE'::VARCHAR;
    RETURN;
  END IF;

  -- Check permission (need at least contributor badge)
  IF v_device.current_badge IN ('newcomer') THEN
    RETURN QUERY SELECT FALSE, NULL::INTEGER, NULL::INTEGER, 'INSUFFICIENT_BADGE'::VARCHAR;
    RETURN;
  END IF;

  -- Rate limit: max 3 requests per hour
  SELECT COUNT(*) INTO v_recent_requests
  FROM song_requests
  WHERE device_id = p_device_id
    AND requested_at > NOW() - INTERVAL '1 hour';

  IF v_recent_requests >= 3 THEN
    RETURN QUERY SELECT FALSE, NULL::INTEGER, NULL::INTEGER, 'RATE_LIMIT_EXCEEDED'::VARCHAR;
    RETURN;
  END IF;

  -- Get next queue position
  SELECT COALESCE(MAX(queue_position), 0) + 1 INTO v_new_position
  FROM song_requests
  WHERE status IN ('pending', 'approved');

  -- Insert song request
  INSERT INTO song_requests (
    device_id,
    user_id,
    song_title,
    song_artist,
    song_url,
    message,
    queue_position,
    status,
    requester_badge,
    requester_reputation
  )
  VALUES (
    p_device_id,
    p_user_id,
    p_song_title,
    p_song_artist,
    p_song_url,
    p_message,
    v_new_position,
    CASE
      WHEN v_device.trust_score >= 0.7 THEN 'approved'
      ELSE 'pending'
    END,
    v_device.current_badge,
    v_device.reputation_score
  )
  RETURNING id INTO v_new_id;

  -- Update room state queue length
  UPDATE room_state
  SET queue_length = queue_length + 1,
      last_updated = NOW()
  WHERE room_name = 'lofi-stream';

  RETURN QUERY SELECT TRUE, v_new_id, v_new_position, NULL::VARCHAR;
END;
$$;


ALTER FUNCTION public.request_song(p_device_id character varying, p_user_id uuid, p_song_title character varying, p_song_artist character varying, p_song_url text, p_message text) OWNER TO matthewmauer;

--
-- Name: reset_resource_states(uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.reset_resource_states(p_app_id uuid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  updated_count INT;
BEGIN
  UPDATE resource_states
  SET state = 'empty', updated_at = NOW()
  WHERE app_id = p_app_id;

  GET DIAGNOSTICS updated_count = ROW_COUNT;
  RETURN updated_count;
END;
$$;


ALTER FUNCTION public.reset_resource_states(p_app_id uuid) OWNER TO matthewmauer;

--
-- Name: FUNCTION reset_resource_states(p_app_id uuid); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.reset_resource_states(p_app_id uuid) IS 'Reset all resource states to empty for an app';


--
-- Name: rollback_to_snapshot(text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.rollback_to_snapshot(p_domain_context text, p_reason text DEFAULT NULL::text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_previous_snapshot_id TEXT;
  v_current_snapshot_id TEXT;
BEGIN
  -- Get current snapshot
  SELECT snapshot_id INTO v_current_snapshot_id
  FROM domain_context_snapshots
  WHERE domain_context = p_domain_context
    AND is_current = true;

  -- Get previous golden snapshot
  SELECT snapshot_id INTO v_previous_snapshot_id
  FROM domain_context_snapshots
  WHERE domain_context = p_domain_context
    AND is_golden = true
    AND snapshot_id != v_current_snapshot_id
  ORDER BY created_at DESC
  LIMIT 1;

  IF v_previous_snapshot_id IS NULL THEN
    RAISE EXCEPTION 'No previous golden snapshot found for domain: %', p_domain_context;
  END IF;

  -- Mark current snapshot as rolled back
  UPDATE domain_context_snapshots
  SET
    rolled_back_from = v_current_snapshot_id,
    rollback_reason = p_reason
  WHERE snapshot_id = v_previous_snapshot_id;

  -- Activate previous snapshot
  PERFORM activate_snapshot(v_previous_snapshot_id, 'rollback');

  RETURN v_previous_snapshot_id;
END;
$$;


ALTER FUNCTION public.rollback_to_snapshot(p_domain_context text, p_reason text) OWNER TO matthewmauer;

--
-- Name: FUNCTION rollback_to_snapshot(p_domain_context text, p_reason text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.rollback_to_snapshot(p_domain_context text, p_reason text) IS 'Rollback to previous golden snapshot';


--
-- Name: sample_wrapper_usage(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.sample_wrapper_usage() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Sample 5% of wrapper usage for detailed analysis
  IF NEW.wrapper_name IS NOT NULL AND random() < 0.05 THEN
    INSERT INTO wrapper_usage_samples (
      wrapper_name, domain, user_profile, user_id,
      prompt_text, response_text, response_length,
      response_time_ms, cost_usd, status,
      had_followup, timestamp
    )
    SELECT
      NEW.wrapper_name,
      NEW.use_case_category,
      COALESCE(up.selected_profile, up.detected_profile),
      NEW.user_id,
      NEW.prompt_text,
      NEW.response_text,
      NEW.response_length,
      NEW.response_time_ms,
      NEW.cost_usd,
      NEW.status,
      NEW.had_followup,
      NEW.timestamp
    FROM user_profiles up
    WHERE up.user_id = NEW.user_id
    ON CONFLICT DO NOTHING;
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.sample_wrapper_usage() OWNER TO matthewmauer;

--
-- Name: set_user_handle(integer, text, inet, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.set_user_handle(p_user_id integer, p_handle text, p_ip_address inet DEFAULT NULL::inet, p_user_agent text DEFAULT NULL::text) RETURNS TABLE(success boolean, error_message text, handle text)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_handle_normalized TEXT;
  v_handle_lowercase TEXT;
  v_old_handle TEXT;
  v_changes_remaining INTEGER;
  v_is_available BOOLEAN;
BEGIN
  -- Normalize handle
  v_handle_normalized := TRIM(p_handle);
  v_handle_lowercase := LOWER(v_handle_normalized);

  -- Check if available
  v_is_available := is_handle_available(v_handle_normalized);

  IF NOT v_is_available THEN
    RETURN QUERY SELECT FALSE, 'Handle not available or invalid'::TEXT, NULL::TEXT;
    RETURN;
  END IF;

  -- Get user's current handle and remaining changes
  SELECT users.handle, users.handle_changes_remaining
  INTO v_old_handle, v_changes_remaining
  FROM users
  WHERE users.id = p_user_id;

  -- Check if user has changes remaining (unless first time setting handle)
  IF v_old_handle IS NOT NULL AND v_changes_remaining <= 0 THEN
    RETURN QUERY SELECT FALSE, 'No handle changes remaining'::TEXT, NULL::TEXT;
    RETURN;
  END IF;

  -- Update user's handle
  UPDATE users
  SET
    handle = v_handle_normalized,
    handle_lowercase = v_handle_lowercase,
    handle_set_at = NOW(),
    handle_changes_remaining = CASE
      WHEN users.handle IS NULL THEN users.handle_changes_remaining -- First time, don't decrement
      ELSE users.handle_changes_remaining - 1
    END
  WHERE users.id = p_user_id;

  -- Log handle change
  INSERT INTO handle_history (
    user_id,
    old_handle,
    new_handle,
    change_reason,
    ip_address,
    user_agent
  ) VALUES (
    p_user_id,
    v_old_handle,
    v_handle_normalized,
    CASE WHEN v_old_handle IS NULL THEN 'initial_set' ELSE 'user_change' END,
    p_ip_address,
    p_user_agent
  );

  RETURN QUERY SELECT TRUE, NULL::TEXT, v_handle_normalized;
END;
$$;


ALTER FUNCTION public.set_user_handle(p_user_id integer, p_handle text, p_ip_address inet, p_user_agent text) OWNER TO matthewmauer;

--
-- Name: set_user_handle(uuid, text, inet, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.set_user_handle(p_user_id uuid, p_handle text, p_ip_address inet DEFAULT NULL::inet, p_user_agent text DEFAULT NULL::text) RETURNS TABLE(success boolean, error_message text, handle text)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_handle_normalized TEXT;
  v_handle_lowercase TEXT;
  v_old_handle TEXT;
  v_changes_remaining INTEGER;
  v_is_available BOOLEAN;
BEGIN
  -- Normalize handle
  v_handle_normalized := TRIM(p_handle);
  v_handle_lowercase := LOWER(v_handle_normalized);

  -- Check if available
  v_is_available := is_handle_available(v_handle_normalized);

  IF NOT v_is_available THEN
    RETURN QUERY SELECT FALSE, 'Handle not available or invalid'::TEXT, NULL::TEXT;
    RETURN;
  END IF;

  -- Get user's current handle and remaining changes
  SELECT users.handle, users.handle_changes_remaining
  INTO v_old_handle, v_changes_remaining
  FROM users
  WHERE users.user_id = p_user_id;

  -- Check if user has changes remaining (unless first time setting handle)
  IF v_old_handle IS NOT NULL AND v_changes_remaining <= 0 THEN
    RETURN QUERY SELECT FALSE, 'No handle changes remaining'::TEXT, NULL::TEXT;
    RETURN;
  END IF;

  -- Update user's handle
  UPDATE users
  SET
    handle = v_handle_normalized,
    handle_lowercase = v_handle_lowercase,
    handle_set_at = NOW(),
    handle_changes_remaining = CASE
      WHEN users.handle IS NULL THEN users.handle_changes_remaining -- First time, don't decrement
      ELSE users.handle_changes_remaining - 1
    END
  WHERE users.user_id = p_user_id;

  -- Log handle change
  INSERT INTO handle_history (
    user_id,
    old_handle,
    new_handle,
    change_reason,
    ip_address,
    user_agent
  ) VALUES (
    p_user_id,
    v_old_handle,
    v_handle_normalized,
    CASE WHEN v_old_handle IS NULL THEN 'initial_set' ELSE 'user_change' END,
    p_ip_address,
    p_user_agent
  );

  RETURN QUERY SELECT TRUE, NULL::TEXT, v_handle_normalized;
END;
$$;


ALTER FUNCTION public.set_user_handle(p_user_id uuid, p_handle text, p_ip_address inet, p_user_agent text) OWNER TO matthewmauer;

--
-- Name: track_campaign_click(uuid, uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.track_campaign_click(campaign_uuid uuid, variant_uuid uuid DEFAULT NULL::uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE ad_campaigns
  SET total_clicks = total_clicks + 1,
      updated_at = NOW()
  WHERE campaign_id = campaign_uuid;

  IF variant_uuid IS NOT NULL THEN
    UPDATE campaign_variants
    SET clicks = clicks + 1,
        updated_at = NOW()
    WHERE variant_id = variant_uuid;
  END IF;
END;
$$;


ALTER FUNCTION public.track_campaign_click(campaign_uuid uuid, variant_uuid uuid) OWNER TO matthewmauer;

--
-- Name: FUNCTION track_campaign_click(campaign_uuid uuid, variant_uuid uuid); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.track_campaign_click(campaign_uuid uuid, variant_uuid uuid) IS 'Track click for campaign and variant';


--
-- Name: track_campaign_impression(uuid, uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.track_campaign_impression(campaign_uuid uuid, variant_uuid uuid DEFAULT NULL::uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE ad_campaigns
  SET total_impressions = total_impressions + 1,
      updated_at = NOW()
  WHERE campaign_id = campaign_uuid;

  IF variant_uuid IS NOT NULL THEN
    UPDATE campaign_variants
    SET impressions = impressions + 1,
        updated_at = NOW()
    WHERE variant_id = variant_uuid;
  END IF;
END;
$$;


ALTER FUNCTION public.track_campaign_impression(campaign_uuid uuid, variant_uuid uuid) OWNER TO matthewmauer;

--
-- Name: FUNCTION track_campaign_impression(campaign_uuid uuid, variant_uuid uuid); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.track_campaign_impression(campaign_uuid uuid, variant_uuid uuid) IS 'Track impression for campaign and variant';


--
-- Name: track_url_fetch(text, character varying, integer, boolean); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.track_url_fetch(p_url text, p_url_type character varying, p_status_code integer, p_success boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_url_id INTEGER;
    v_url_hash VARCHAR(64);
BEGIN
    v_url_hash := generate_url_hash(p_url);

    INSERT INTO url_index (url, url_hash, url_type, last_status_code, last_fetch_success, fetch_count, last_fetched_at)
    VALUES (p_url, v_url_hash, p_url_type, p_status_code, p_success, 1, CURRENT_TIMESTAMP)
    ON CONFLICT (url_hash) DO UPDATE SET
        fetch_count = url_index.fetch_count + 1,
        last_status_code = p_status_code,
        last_fetch_success = p_success,
        last_fetched_at = CURRENT_TIMESTAMP,
        updated_at = CURRENT_TIMESTAMP
    RETURNING id INTO v_url_id;

    RETURN v_url_id;
END;
$$;


ALTER FUNCTION public.track_url_fetch(p_url text, p_url_type character varying, p_status_code integer, p_success boolean) OWNER TO matthewmauer;

--
-- Name: transition_request_state(uuid, text, text, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.transition_request_state(p_request_id uuid, p_new_state text, p_reason text DEFAULT NULL::text, p_triggered_by text DEFAULT 'system'::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_old_state TEXT;
  v_old_timestamp TIMESTAMPTZ;
  v_duration_ms INTEGER;
BEGIN
  -- Get current state
  SELECT state,
    CASE
      WHEN state = 'created' THEN created_at
      WHEN state = 'pending' THEN pending_at
      WHEN state = 'running' THEN running_at
      ELSE created_at
    END
  INTO v_old_state, v_old_timestamp
  FROM request_lifecycle
  WHERE request_id = p_request_id;

  IF NOT FOUND THEN
    RETURN FALSE;
  END IF;

  -- Calculate duration in previous state
  v_duration_ms := EXTRACT(EPOCH FROM (NOW() - v_old_timestamp)) * 1000;

  -- Update request lifecycle
  UPDATE request_lifecycle
  SET
    state = p_new_state,
    pending_at = CASE WHEN p_new_state = 'pending' THEN NOW() ELSE pending_at END,
    running_at = CASE WHEN p_new_state = 'running' THEN NOW() ELSE running_at END,
    completed_at = CASE WHEN p_new_state = 'completed' THEN NOW() ELSE completed_at END,
    failed_at = CASE WHEN p_new_state = 'failed' THEN NOW() ELSE failed_at END,
    killed_at = CASE WHEN p_new_state = 'killed' THEN NOW() ELSE killed_at END,
    timeout_at = CASE WHEN p_new_state = 'timeout' THEN NOW() ELSE timeout_at END
  WHERE request_id = p_request_id;

  -- Log transition
  INSERT INTO request_state_transitions (
    request_id,
    from_state,
    to_state,
    transition_duration_ms,
    reason,
    triggered_by
  ) VALUES (
    p_request_id,
    v_old_state,
    p_new_state,
    v_duration_ms,
    p_reason,
    p_triggered_by
  );

  RETURN TRUE;
END;
$$;


ALTER FUNCTION public.transition_request_state(p_request_id uuid, p_new_state text, p_reason text, p_triggered_by text) OWNER TO matthewmauer;

--
-- Name: FUNCTION transition_request_state(p_request_id uuid, p_new_state text, p_reason text, p_triggered_by text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.transition_request_state(p_request_id uuid, p_new_state text, p_reason text, p_triggered_by text) IS 'Move request to new state with automatic timing and logging';


--
-- Name: trigger_refresh_experiment_stats(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.trigger_refresh_experiment_stats() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  PERFORM refresh_experiment_statistics(NEW.experiment_id);
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.trigger_refresh_experiment_stats() OWNER TO matthewmauer;

--
-- Name: trigger_update_task_streak(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.trigger_update_task_streak() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.status = 'completed' AND OLD.status != 'completed' THEN
    PERFORM update_training_task_streak(NEW.user_id, (
      SELECT task_type FROM training_tasks WHERE id = NEW.task_id
    ));
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.trigger_update_task_streak() OWNER TO matthewmauer;

--
-- Name: update_app_instance_last_accessed(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_app_instance_last_accessed() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE app_instances
  SET last_accessed = NOW()
  WHERE tenant_id = NEW.tenant_id;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_app_instance_last_accessed() OWNER TO matthewmauer;

--
-- Name: update_app_template_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_app_template_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_app_template_timestamp() OWNER TO matthewmauer;

--
-- Name: update_authorship_registry_updated_at(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_authorship_registry_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_authorship_registry_updated_at() OWNER TO matthewmauer;

--
-- Name: update_bot_post_engagement(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_bot_post_engagement() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.engagement_score := calculate_post_engagement(
    NEW.upvotes,
    NEW.downvotes,
    NEW.comment_count,
    EXTRACT(EPOCH FROM (NOW() - NEW.posted_at)) / 3600.0
  );
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_bot_post_engagement() OWNER TO matthewmauer;

--
-- Name: update_code_snippet_search_vector(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_code_snippet_search_vector() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.search_vector :=
    setweight(to_tsvector('english', COALESCE(NEW.filename, '')), 'A') ||
    setweight(to_tsvector('english', COALESCE(NEW.function_name, '')), 'A') ||
    setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'B') ||
    setweight(to_tsvector('english', COALESCE(NEW.docstring, '')), 'B') ||
    setweight(to_tsvector('english', COALESCE(NEW.code, '')), 'C');
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_code_snippet_search_vector() OWNER TO matthewmauer;

--
-- Name: update_compaction_updated_at(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_compaction_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_compaction_updated_at() OWNER TO matthewmauer;

--
-- Name: update_component_usage_stats(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_component_usage_stats() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Update or insert stats for target component
  INSERT INTO component_usage_stats (
    component_type,
    component_id,
    total_uses,
    successful_uses,
    failed_uses,
    success_rate,
    avg_execution_time_ms,
    min_execution_time_ms,
    max_execution_time_ms,
    unique_users,
    unique_sessions,
    unique_sources,
    first_used_at,
    last_used_at,
    updated_at
  )
  SELECT
    NEW.target_type,
    NEW.target_id,
    1,
    CASE WHEN NEW.success THEN 1 ELSE 0 END,
    CASE WHEN NEW.success THEN 0 ELSE 1 END,
    CASE WHEN NEW.success THEN 1.0 ELSE 0.0 END,
    NEW.execution_time_ms::REAL,
    NEW.execution_time_ms,
    NEW.execution_time_ms,
    1,
    1,
    1,
    NEW.created_at,
    NEW.created_at,
    NOW()
  ON CONFLICT (component_type, component_id) DO UPDATE SET
    total_uses = component_usage_stats.total_uses + 1,
    successful_uses = component_usage_stats.successful_uses + CASE WHEN NEW.success THEN 1 ELSE 0 END,
    failed_uses = component_usage_stats.failed_uses + CASE WHEN NEW.success THEN 0 ELSE 1 END,
    success_rate = (component_usage_stats.successful_uses + CASE WHEN NEW.success THEN 1 ELSE 0 END)::REAL /
                   (component_usage_stats.total_uses + 1)::REAL,
    avg_execution_time_ms = CASE
      WHEN NEW.execution_time_ms IS NOT NULL THEN
        (COALESCE(component_usage_stats.avg_execution_time_ms, 0) * component_usage_stats.total_uses + NEW.execution_time_ms) /
        (component_usage_stats.total_uses + 1)
      ELSE component_usage_stats.avg_execution_time_ms
    END,
    min_execution_time_ms = CASE
      WHEN NEW.execution_time_ms IS NOT NULL THEN
        LEAST(COALESCE(component_usage_stats.min_execution_time_ms, NEW.execution_time_ms), NEW.execution_time_ms)
      ELSE component_usage_stats.min_execution_time_ms
    END,
    max_execution_time_ms = CASE
      WHEN NEW.execution_time_ms IS NOT NULL THEN
        GREATEST(COALESCE(component_usage_stats.max_execution_time_ms, NEW.execution_time_ms), NEW.execution_time_ms)
      ELSE component_usage_stats.max_execution_time_ms
    END,
    last_used_at = NEW.created_at,
    updated_at = NOW();

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_component_usage_stats() OWNER TO matthewmauer;

--
-- Name: update_council_model_stats(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_council_model_stats() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Update stats for models that participated
  IF NEW.status = 'completed' THEN
    -- Update participation counts
    WITH proposal_stats AS (
      SELECT
        model_name,
        COUNT(*) as proposal_count,
        AVG(duration_ms) as avg_duration,
        SUM(CASE WHEN timed_out THEN 1 ELSE 0 END) as timeouts,
        SUM(CASE WHEN error_message IS NOT NULL THEN 1 ELSE 0 END) as errors
      FROM council_proposals
      WHERE session_id = NEW.session_id
        AND timed_out = FALSE
      GROUP BY model_name
    )
    INSERT INTO council_model_stats (
      model_name,
      total_sessions,
      total_proposals,
      avg_response_time_ms,
      timeout_count,
      error_count,
      last_session_id,
      last_seen
    )
    SELECT
      model_name,
      1,
      proposal_count,
      avg_duration,
      timeouts,
      errors,
      NEW.session_id,
      NOW()
    FROM proposal_stats
    ON CONFLICT (model_name) DO UPDATE SET
      total_sessions = council_model_stats.total_sessions + 1,
      total_proposals = council_model_stats.total_proposals + EXCLUDED.total_proposals,
      avg_response_time_ms = (
        (council_model_stats.avg_response_time_ms * council_model_stats.total_proposals +
         EXCLUDED.avg_response_time_ms * EXCLUDED.total_proposals) /
        (council_model_stats.total_proposals + EXCLUDED.total_proposals)
      ),
      timeout_count = council_model_stats.timeout_count + EXCLUDED.timeout_count,
      error_count = council_model_stats.error_count + EXCLUDED.error_count,
      last_session_id = NEW.session_id,
      last_seen = NOW(),
      updated_at = NOW();
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_council_model_stats() OWNER TO matthewmauer;

--
-- Name: update_credential_last_used(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_credential_last_used() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- This can be called manually when credential is accessed
  NEW.last_used_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_credential_last_used() OWNER TO matthewmauer;

--
-- Name: update_curation_config_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_curation_config_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_curation_config_timestamp() OWNER TO matthewmauer;

--
-- Name: update_decision_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_decision_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_decision_timestamp() OWNER TO matthewmauer;

--
-- Name: update_developers_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_developers_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_developers_timestamp() OWNER TO matthewmauer;

--
-- Name: update_device_activity(character varying, uuid, jsonb); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_device_activity(p_device_id character varying, p_user_id uuid DEFAULT NULL::uuid, p_fingerprint_data jsonb DEFAULT NULL::jsonb) RETURNS TABLE(device_record_id integer, is_new_device boolean)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_device RECORD;
  v_is_new BOOLEAN DEFAULT FALSE;
  v_today DATE DEFAULT CURRENT_DATE;
BEGIN
  -- Try to find existing device
  SELECT * INTO v_device FROM user_devices WHERE device_id = p_device_id;

  IF NOT FOUND THEN
    -- New device
    v_is_new := TRUE;

    INSERT INTO user_devices (
      device_id,
      user_id,
      fingerprint_data,
      first_seen,
      last_seen,
      days_active,
      last_active_date
    )
    VALUES (
      p_device_id,
      p_user_id,
      p_fingerprint_data,
      NOW(),
      NOW(),
      1,
      v_today
    )
    RETURNING id INTO v_device;

  ELSE
    -- Existing device - update activity
    UPDATE user_devices
    SET
      last_seen = NOW(),
      user_id = COALESCE(p_user_id, user_id), -- Link to user if provided
      fingerprint_data = COALESCE(p_fingerprint_data, fingerprint_data),
      days_active = CASE
        WHEN last_active_date < v_today THEN days_active + 1
        ELSE days_active
      END,
      last_active_date = v_today
    WHERE device_id = p_device_id
    RETURNING id INTO v_device;
  END IF;

  RETURN QUERY SELECT v_device.id, v_is_new;
END;
$$;


ALTER FUNCTION public.update_device_activity(p_device_id character varying, p_user_id uuid, p_fingerprint_data jsonb) OWNER TO matthewmauer;

--
-- Name: update_device_reputation(character varying, boolean); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_device_reputation(p_device_id character varying, p_vote_was_suspicious boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_device RECORD;
  v_vote_history RECORD;
  v_new_trust DECIMAL;
  v_new_consistency DECIMAL;
BEGIN
  -- Get current device stats
  SELECT * INTO v_device FROM user_devices WHERE device_id = p_device_id;

  IF NOT FOUND THEN
    RETURN;
  END IF;

  -- Get vote history for calculations
  SELECT
    COUNT(*) as total_votes,
    COUNT(DISTINCT winner_id) as unique_winners,
    AVG(vote_duration_ms) as avg_duration,
    COUNT(*) FILTER (WHERE is_suspicious) as suspicious_count
  INTO v_vote_history
  FROM elo_user_votes
  WHERE device_fingerprint = p_device_id
    AND voted_at > NOW() - INTERVAL '30 days';

  -- Calculate trust score
  v_new_trust := 0.5;

  -- Good variety of choices
  IF v_vote_history.total_votes > 0 THEN
    v_new_trust := v_new_trust + (v_vote_history.unique_winners::DECIMAL / v_vote_history.total_votes) * 0.3;
  END IF;

  -- Thoughtful voting (1-30 seconds)
  IF v_vote_history.avg_duration > 1000 AND v_vote_history.avg_duration < 30000 THEN
    v_new_trust := v_new_trust + 0.2;
  END IF;

  -- Penalize suspicious behavior
  IF v_vote_history.total_votes > 0 THEN
    v_new_trust := v_new_trust - (v_vote_history.suspicious_count::DECIMAL / v_vote_history.total_votes) * 0.4;
  END IF;

  v_new_trust := GREATEST(0, LEAST(1, v_new_trust));

  -- Calculate consistency score (based on variance)
  v_new_consistency := 0.7; -- Placeholder, would need more complex calculation

  -- Update device
  UPDATE user_devices
  SET
    total_votes = total_votes + 1,
    trust_score = v_new_trust,
    consistency_score = v_new_consistency,
    reputation_score = (v_new_trust + v_new_consistency) / 2,
    is_suspicious = (v_new_trust < 0.3)
  WHERE device_id = p_device_id;

END;
$$;


ALTER FUNCTION public.update_device_reputation(p_device_id character varying, p_vote_was_suspicious boolean) OWNER TO matthewmauer;

--
-- Name: update_domain_portfolio_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_domain_portfolio_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_domain_portfolio_timestamp() OWNER TO matthewmauer;

--
-- Name: update_elo_items_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_elo_items_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_elo_items_timestamp() OWNER TO matthewmauer;

--
-- Name: update_embed_site_last_event(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_embed_site_last_event() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE embed_sites
  SET last_event_at = NEW.timestamp
  WHERE site_id = NEW.site_id;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_embed_site_last_event() OWNER TO matthewmauer;

--
-- Name: update_embed_sites_updated_at(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_embed_sites_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_embed_sites_updated_at() OWNER TO matthewmauer;

--
-- Name: update_file_access(integer, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_file_access(p_file_id integer, p_user_id integer DEFAULT NULL::integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Update last accessed time
  UPDATE virtual_files
  SET last_accessed_at = CURRENT_TIMESTAMP
  WHERE id = p_file_id;

  -- Update recent files
  INSERT INTO recent_files (user_id, file_id, accessed_at, access_count)
  VALUES (p_user_id, p_file_id, CURRENT_TIMESTAMP, 1)
  ON CONFLICT (user_id, file_id) DO UPDATE
  SET accessed_at = CURRENT_TIMESTAMP,
      access_count = recent_files.access_count + 1;
END;
$$;


ALTER FUNCTION public.update_file_access(p_file_id integer, p_user_id integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION update_file_access(p_file_id integer, p_user_id integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.update_file_access(p_file_id integer, p_user_id integer) IS 'Update file access time and recent files list';


--
-- Name: update_forum_post_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_forum_post_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  NEW.edited = TRUE;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_forum_post_timestamp() OWNER TO matthewmauer;

--
-- Name: update_forum_thread_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_forum_thread_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_forum_thread_timestamp() OWNER TO matthewmauer;

--
-- Name: update_game_assets_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_game_assets_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_game_assets_timestamp() OWNER TO matthewmauer;

--
-- Name: update_git_portfolio_updated_at(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_git_portfolio_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_git_portfolio_updated_at() OWNER TO matthewmauer;

--
-- Name: update_hint_score(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_hint_score() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.rating = 1 THEN
    -- Upvote: increase helpfulness
    UPDATE student_hints
    SET helpfulness_score = helpfulness_score + 1
    WHERE hint_id = NEW.hint_id;

    -- Award XP to hint creator (max 50 XP per hint)
    UPDATE student_hints
    SET xp_earned = LEAST(xp_earned + 5, 50)
    WHERE hint_id = NEW.hint_id;

  ELSIF NEW.rating = -1 THEN
    -- Downvote: increase reported count
    UPDATE student_hints
    SET reported_count = reported_count + 1
    WHERE hint_id = NEW.hint_id;

    -- If reported 3+ times, hide hint
    UPDATE student_hints
    SET visible = false
    WHERE hint_id = NEW.hint_id
      AND reported_count >= 3;
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_hint_score() OWNER TO matthewmauer;

--
-- Name: update_iiif_images_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_iiif_images_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_iiif_images_timestamp() OWNER TO matthewmauer;

--
-- Name: update_iiif_manifests_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_iiif_manifests_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_iiif_manifests_timestamp() OWNER TO matthewmauer;

--
-- Name: update_notes_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_notes_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_notes_timestamp() OWNER TO matthewmauer;

--
-- Name: update_pattern_success_rates(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_pattern_success_rates() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.success IS NOT NULL AND NEW.completed_at IS NOT NULL THEN
    -- Update patterns from this session
    UPDATE autonomous_patterns ap
    SET
      times_reused = times_reused + 1,
      success_rate = (
        SELECT
          COUNT(*) FILTER (WHERE asess.success = TRUE)::DECIMAL /
          NULLIF(COUNT(*), 0)
        FROM autonomous_sessions asess
        JOIN autonomous_patterns ap2 ON ap2.session_id = asess.session_id
        WHERE ap2.action = ap.action
      )
    WHERE ap.session_id = NEW.session_id;
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_pattern_success_rates() OWNER TO matthewmauer;

--
-- Name: update_playstyle_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_playstyle_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_playstyle_timestamp() OWNER TO matthewmauer;

--
-- Name: update_portfolio_analytics_updated_at(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_portfolio_analytics_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_portfolio_analytics_updated_at() OWNER TO matthewmauer;

--
-- Name: update_post_score(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_post_score() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  post_upvotes INTEGER;
  post_downvotes INTEGER;
BEGIN
  IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
    IF NEW.post_id IS NOT NULL THEN
      SELECT
        COUNT(*) FILTER (WHERE vote_type = 'up'),
        COUNT(*) FILTER (WHERE vote_type = 'down')
      INTO post_upvotes, post_downvotes
      FROM forum_votes
      WHERE post_id = NEW.post_id;

      UPDATE forum_posts
      SET upvotes = post_upvotes,
          downvotes = post_downvotes,
          score = post_upvotes - post_downvotes
      WHERE id = NEW.post_id;
    END IF;
  ELSIF TG_OP = 'DELETE' THEN
    IF OLD.post_id IS NOT NULL THEN
      SELECT
        COUNT(*) FILTER (WHERE vote_type = 'up'),
        COUNT(*) FILTER (WHERE vote_type = 'down')
      INTO post_upvotes, post_downvotes
      FROM forum_votes
      WHERE post_id = OLD.post_id;

      UPDATE forum_posts
      SET upvotes = post_upvotes,
          downvotes = post_downvotes,
          score = post_upvotes - post_downvotes
      WHERE id = OLD.post_id;
    END IF;
  END IF;
  RETURN NULL;
END;
$$;


ALTER FUNCTION public.update_post_score() OWNER TO matthewmauer;

--
-- Name: update_preset_stats(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_preset_stats() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE domain_parameter_presets
  SET
    times_used = times_used + 1,
    avg_success_rate = (
      SELECT AVG(CASE WHEN success THEN 1.0 ELSE 0.0 END)
      FROM parameter_performance_log
      WHERE preset_id = NEW.preset_id
    ),
    avg_response_time_ms = (
      SELECT AVG(response_time_ms)
      FROM parameter_performance_log
      WHERE preset_id = NEW.preset_id
        AND response_time_ms IS NOT NULL
    ),
    avg_user_rating = (
      SELECT AVG(user_rating)
      FROM parameter_performance_log
      WHERE preset_id = NEW.preset_id
        AND user_rating IS NOT NULL
    )
  WHERE preset_id = NEW.preset_id;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_preset_stats() OWNER TO matthewmauer;

--
-- Name: update_profile_matches_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_profile_matches_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_profile_matches_timestamp() OWNER TO matthewmauer;

--
-- Name: update_repo_counts(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_repo_counts() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE code_repositories
  SET
    snippet_count = (
      SELECT COUNT(*) FROM code_snippets WHERE repo_id = NEW.repo_id
    ),
    updated_at = CURRENT_TIMESTAMP
  WHERE id = NEW.repo_id;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_repo_counts() OWNER TO matthewmauer;

--
-- Name: update_reputation_activity(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_reputation_activity() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE user_reputation
  SET last_activity = NOW()
  WHERE user_id = NEW.user_id;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_reputation_activity() OWNER TO matthewmauer;

--
-- Name: update_resource_manifest_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_resource_manifest_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_resource_manifest_timestamp() OWNER TO matthewmauer;

--
-- Name: update_resource_state_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_resource_state_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_resource_state_timestamp() OWNER TO matthewmauer;

--
-- Name: update_room_counts(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_room_counts() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE code_rooms
  SET
    repo_count = (
      SELECT COUNT(*) FROM code_room_repositories WHERE room_id = NEW.room_id
    ),
    updated_at = CURRENT_TIMESTAMP
  WHERE id = NEW.room_id;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_room_counts() OWNER TO matthewmauer;

--
-- Name: update_room_viewers(character varying, integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_room_viewers(p_room_name character varying, p_viewer_count integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_current_peak INTEGER;
BEGIN
  -- Get current peak
  SELECT peak_viewers INTO v_current_peak
  FROM room_state
  WHERE room_name = p_room_name;

  -- Update room state
  UPDATE room_state
  SET current_viewers = p_viewer_count,
      peak_viewers = GREATEST(COALESCE(v_current_peak, 0), p_viewer_count),
      total_sessions = total_sessions + 1,
      last_updated = NOW()
  WHERE room_name = p_room_name;

  -- Insert if room doesn't exist
  IF NOT FOUND THEN
    INSERT INTO room_state (room_name, current_viewers, peak_viewers, total_sessions)
    VALUES (p_room_name, p_viewer_count, p_viewer_count, 1);
  END IF;
END;
$$;


ALTER FUNCTION public.update_room_viewers(p_room_name character varying, p_viewer_count integer) OWNER TO matthewmauer;

--
-- Name: update_score_after_judgment(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_score_after_judgment() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Increment vote counts
  IF NEW.vote_direction = 'right' THEN
    UPDATE domain_implementations
    SET swipe_right_count = swipe_right_count + 1
    WHERE implementation_id = NEW.implementation_id;
  ELSIF NEW.vote_direction = 'left' THEN
    UPDATE domain_implementations
    SET swipe_left_count = swipe_left_count + 1
    WHERE implementation_id = NEW.implementation_id;
  END IF;

  -- Increment feedback count if there's a comment or detailed scores
  IF NEW.teacher_comment IS NOT NULL OR NEW.creativity_score IS NOT NULL THEN
    UPDATE domain_implementations
    SET feedback_count = feedback_count + 1
    WHERE implementation_id = NEW.implementation_id;
  END IF;

  -- Recalculate score
  PERFORM calculate_implementation_score(NEW.implementation_id);

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_score_after_judgment() OWNER TO matthewmauer;

--
-- Name: update_session_heartbeat(uuid, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_session_heartbeat(p_session_id uuid, p_ip_address text DEFAULT NULL::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE visit_sessions
  SET
    last_heartbeat_at = NOW(),
    heartbeat_count = heartbeat_count + 1,
    is_active = true,
    -- Track IP rotation if IP changed
    ip_rotations = CASE
      WHEN p_ip_address IS NOT NULL AND p_ip_address != ip_address
      THEN ip_rotations + 1
      ELSE ip_rotations
    END,
    ip_history = CASE
      WHEN p_ip_address IS NOT NULL AND p_ip_address != ip_address
      THEN ip_history || jsonb_build_object(
        'ip', p_ip_address,
        'timestamp', NOW()
      )
      ELSE ip_history
    END,
    ip_address = COALESCE(p_ip_address, ip_address)
  WHERE session_id = p_session_id;
END;
$$;


ALTER FUNCTION public.update_session_heartbeat(p_session_id uuid, p_ip_address text) OWNER TO matthewmauer;

--
-- Name: update_sprite_usage(integer); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_sprite_usage(p_sheet_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE sprite_sheets
  SET usage_count = usage_count + 1,
      last_used_at = CURRENT_TIMESTAMP
  WHERE id = p_sheet_id;
END;
$$;


ALTER FUNCTION public.update_sprite_usage(p_sheet_id integer) OWNER TO matthewmauer;

--
-- Name: FUNCTION update_sprite_usage(p_sheet_id integer); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.update_sprite_usage(p_sheet_id integer) IS 'Increment usage counter and update last used timestamp';


--
-- Name: update_stream_viewer_count(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_stream_viewer_count() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE stream_sessions
  SET
    viewer_count = (
      SELECT COUNT(*)
      FROM stream_viewers
      WHERE stream_id = NEW.stream_id
        AND left_at IS NULL
    ),
    max_viewers = GREATEST(
      max_viewers,
      (SELECT COUNT(*) FROM stream_viewers WHERE stream_id = NEW.stream_id AND left_at IS NULL)
    )
  WHERE stream_id = NEW.stream_id;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_stream_viewer_count() OWNER TO matthewmauer;

--
-- Name: update_survey_responses_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_survey_responses_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_survey_responses_timestamp() OWNER TO matthewmauer;

--
-- Name: update_thread_comment_count(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_thread_comment_count() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    UPDATE forum_threads
    SET comment_count = comment_count + 1,
        last_activity_at = CURRENT_TIMESTAMP
    WHERE id = NEW.thread_id;
  ELSIF TG_OP = 'DELETE' THEN
    UPDATE forum_threads
    SET comment_count = comment_count - 1
    WHERE id = OLD.thread_id;
  END IF;
  RETURN NULL;
END;
$$;


ALTER FUNCTION public.update_thread_comment_count() OWNER TO matthewmauer;

--
-- Name: update_thread_score(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_thread_score() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  thread_upvotes INTEGER;
  thread_downvotes INTEGER;
BEGIN
  IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
    IF NEW.thread_id IS NOT NULL THEN
      SELECT
        COUNT(*) FILTER (WHERE vote_type = 'up'),
        COUNT(*) FILTER (WHERE vote_type = 'down')
      INTO thread_upvotes, thread_downvotes
      FROM forum_votes
      WHERE thread_id = NEW.thread_id;

      UPDATE forum_threads
      SET upvotes = thread_upvotes,
          downvotes = thread_downvotes,
          score = thread_upvotes - thread_downvotes
      WHERE id = NEW.thread_id;
    END IF;
  ELSIF TG_OP = 'DELETE' THEN
    IF OLD.thread_id IS NOT NULL THEN
      SELECT
        COUNT(*) FILTER (WHERE vote_type = 'up'),
        COUNT(*) FILTER (WHERE vote_type = 'down')
      INTO thread_upvotes, thread_downvotes
      FROM forum_votes
      WHERE thread_id = OLD.thread_id;

      UPDATE forum_threads
      SET upvotes = thread_upvotes,
          downvotes = thread_downvotes,
          score = thread_upvotes - thread_downvotes
      WHERE id = OLD.thread_id;
    END IF;
  END IF;
  RETURN NULL;
END;
$$;


ALTER FUNCTION public.update_thread_score() OWNER TO matthewmauer;

--
-- Name: update_todo_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_todo_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_todo_timestamp() OWNER TO matthewmauer;

--
-- Name: update_training_task_streak(integer, text); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_training_task_streak(p_user_id integer, p_task_type text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_current_streak INTEGER;
  v_last_completed TIMESTAMPTZ;
  v_new_streak INTEGER;
BEGIN
  -- Get current streak
  SELECT current_streak, last_completed_at
  INTO v_current_streak, v_last_completed
  FROM training_task_streaks
  WHERE user_id = p_user_id AND task_type = p_task_type;

  -- Initialize if not exists
  IF v_current_streak IS NULL THEN
    INSERT INTO training_task_streaks (user_id, task_type, current_streak, longest_streak, last_completed_at)
    VALUES (p_user_id, p_task_type, 1, 1, NOW())
    ON CONFLICT (user_id, task_type) DO UPDATE SET
      current_streak = 1,
      longest_streak = 1,
      last_completed_at = NOW();
    RETURN 1;
  END IF;

  -- Check if streak continues (within 48 hours)
  IF v_last_completed > NOW() - INTERVAL '48 hours' THEN
    v_new_streak := v_current_streak + 1;
  ELSE
    v_new_streak := 1; -- Reset streak
  END IF;

  -- Update streak
  UPDATE training_task_streaks
  SET current_streak = v_new_streak,
      longest_streak = GREATEST(longest_streak, v_new_streak),
      last_completed_at = NOW()
  WHERE user_id = p_user_id AND task_type = p_task_type;

  RETURN v_new_streak;
END;
$$;


ALTER FUNCTION public.update_training_task_streak(p_user_id integer, p_task_type text) OWNER TO matthewmauer;

--
-- Name: FUNCTION update_training_task_streak(p_user_id integer, p_task_type text); Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON FUNCTION public.update_training_task_streak(p_user_id integer, p_task_type text) IS 'Update user streak after task completion (called by trigger)';


--
-- Name: update_translation_usage(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_translation_usage() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE translation_cache
  SET use_count = use_count + 1,
      last_used_at = CURRENT_TIMESTAMP
  WHERE id = NEW.id;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_translation_usage() OWNER TO matthewmauer;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_updated_at_column() OWNER TO matthewmauer;

--
-- Name: update_user_profiles_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_user_profiles_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_user_profiles_timestamp() OWNER TO matthewmauer;

--
-- Name: update_user_progress_after_lesson(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_user_progress_after_lesson() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_progress RECORD;
  v_total_lessons INT;
  v_path_id UUID;
BEGIN
  -- Get lesson's path
  SELECT path_id INTO v_path_id
  FROM lessons
  WHERE lesson_id = NEW.lesson_id;

  -- Get or create user progress
  SELECT * INTO v_progress
  FROM user_progress
  WHERE user_id = NEW.user_id AND path_id = v_path_id;

  IF NOT FOUND THEN
    INSERT INTO user_progress (user_id, path_id, current_lesson_id)
    VALUES (NEW.user_id, v_path_id, NEW.lesson_id)
    RETURNING * INTO v_progress;
  END IF;

  -- Get total lessons in path
  SELECT COUNT(*) INTO v_total_lessons
  FROM lessons
  WHERE path_id = v_path_id AND status = 'published';

  -- Update progress
  UPDATE user_progress
  SET
    completed_lessons = ARRAY_APPEND(
      COALESCE(completed_lessons, ARRAY[]::UUID[]),
      NEW.lesson_id
    ),
    total_lessons_completed = total_lessons_completed + 1,
    completion_percentage = (
      (total_lessons_completed + 1)::DECIMAL / NULLIF(v_total_lessons, 0) * 100
    ),
    total_xp_earned = total_xp_earned + NEW.xp_earned,
    last_activity_date = CURRENT_DATE,
    last_accessed_at = NOW(),
    status = CASE
      WHEN (total_lessons_completed + 1) >= v_total_lessons THEN 'completed'
      ELSE 'in_progress'
    END,
    completed_at = CASE
      WHEN (total_lessons_completed + 1) >= v_total_lessons THEN NOW()
      ELSE completed_at
    END
  WHERE progress_id = v_progress.progress_id;

  -- Update streak
  PERFORM update_user_streak(NEW.user_id, v_path_id);

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_user_progress_after_lesson() OWNER TO matthewmauer;

--
-- Name: update_user_streak(character varying, uuid); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_user_streak(p_user_id character varying, p_path_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_last_activity DATE;
  v_current_streak INT;
BEGIN
  SELECT last_activity_date, current_streak_days
  INTO v_last_activity, v_current_streak
  FROM user_progress
  WHERE user_id = p_user_id AND path_id = p_path_id;

  IF v_last_activity IS NULL OR v_last_activity < CURRENT_DATE - INTERVAL '1 day' THEN
    -- Streak broken, reset to 1
    UPDATE user_progress
    SET current_streak_days = 1
    WHERE user_id = p_user_id AND path_id = p_path_id;
  ELSIF v_last_activity = CURRENT_DATE - INTERVAL '1 day' THEN
    -- Streak continues!
    UPDATE user_progress
    SET
      current_streak_days = current_streak_days + 1,
      longest_streak_days = GREATEST(longest_streak_days, current_streak_days + 1)
    WHERE user_id = p_user_id AND path_id = p_path_id;
  END IF;
  -- If v_last_activity = CURRENT_DATE, do nothing (already counted today)
END;
$$;


ALTER FUNCTION public.update_user_streak(p_user_id character varying, p_path_id uuid) OWNER TO matthewmauer;

--
-- Name: update_webhooks_timestamp(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_webhooks_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_webhooks_timestamp() OWNER TO matthewmauer;

--
-- Name: update_win_rate(); Type: FUNCTION; Schema: public; Owner: matthewmauer
--

CREATE FUNCTION public.update_win_rate() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.matches_played > 0 THEN
    NEW.win_rate = ROUND((NEW.wins::DECIMAL / NEW.matches_played) * 100, 2);
  ELSE
    NEW.win_rate = 0;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_win_rate() OWNER TO matthewmauer;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: _migrations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public._migrations (
    id integer NOT NULL,
    migration_file character varying(255) NOT NULL,
    applied_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public._migrations OWNER TO matthewmauer;

--
-- Name: _migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public._migrations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public._migrations_id_seq OWNER TO matthewmauer;

--
-- Name: _migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public._migrations_id_seq OWNED BY public._migrations.id;


--
-- Name: achievements; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.achievements (
    achievement_id uuid DEFAULT gen_random_uuid() NOT NULL,
    path_id uuid,
    achievement_name character varying(255) NOT NULL,
    achievement_slug character varying(255) NOT NULL,
    description text,
    icon_url text,
    rarity character varying(50) DEFAULT 'common'::character varying,
    unlock_type character varying(50) NOT NULL,
    unlock_criteria jsonb,
    xp_bonus integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.achievements OWNER TO matthewmauer;

--
-- Name: council_debates; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.council_debates (
    debate_id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    model1_name character varying(200) NOT NULL,
    model1_display_name character varying(200),
    model2_name character varying(200) NOT NULL,
    model2_display_name character varying(200),
    topic character varying(500),
    comment text NOT NULL,
    winner character varying(200),
    audience_favorite character varying(200),
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.council_debates OWNER TO matthewmauer;

--
-- Name: TABLE council_debates; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.council_debates IS 'Debates between models during council sessions';


--
-- Name: council_proposals; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.council_proposals (
    proposal_id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    model_name character varying(200) NOT NULL,
    model_display_name character varying(200),
    model_character character varying(200),
    model_emoji character varying(10),
    proposal text NOT NULL,
    formatted_proposal text,
    duration_ms integer,
    timed_out boolean DEFAULT false,
    error_message text,
    proposal_metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.council_proposals OWNER TO matthewmauer;

--
-- Name: TABLE council_proposals; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.council_proposals IS 'Individual model proposals in council sessions';


--
-- Name: council_sessions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.council_sessions (
    session_id uuid DEFAULT gen_random_uuid() NOT NULL,
    task text NOT NULL,
    task_type character varying(50),
    status character varying(50) DEFAULT 'running'::character varying NOT NULL,
    models jsonb DEFAULT '[]'::jsonb NOT NULL,
    model_count integer GENERATED ALWAYS AS (jsonb_array_length(models)) STORED,
    consensus jsonb,
    winning_proposal uuid,
    vote_results jsonb,
    task_metadata jsonb DEFAULT '{}'::jsonb,
    error_message text,
    started_at timestamp with time zone DEFAULT now(),
    completed_at timestamp with time zone,
    duration_ms integer GENERATED ALWAYS AS (
CASE
    WHEN (completed_at IS NOT NULL) THEN (EXTRACT(epoch FROM (completed_at - started_at)) * (1000)::numeric)
    ELSE NULL::numeric
END) STORED
);


ALTER TABLE public.council_sessions OWNER TO matthewmauer;

--
-- Name: TABLE council_sessions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.council_sessions IS 'AI Model Council collaborative building sessions';


--
-- Name: active_council_sessions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_council_sessions AS
 SELECT cs.session_id,
    cs.task,
    cs.task_type,
    cs.status,
    cs.model_count,
    cs.started_at,
    (EXTRACT(epoch FROM (now() - cs.started_at)) * (1000)::numeric) AS running_duration_ms,
    count(DISTINCT cp.proposal_id) AS proposals_received,
    count(DISTINCT cd.debate_id) AS debates_count
   FROM ((public.council_sessions cs
     LEFT JOIN public.council_proposals cp ON ((cp.session_id = cs.session_id)))
     LEFT JOIN public.council_debates cd ON ((cd.session_id = cs.session_id)))
  WHERE ((cs.status)::text = 'running'::text)
  GROUP BY cs.session_id, cs.task, cs.task_type, cs.status, cs.model_count, cs.started_at;


ALTER TABLE public.active_council_sessions OWNER TO matthewmauer;

--
-- Name: domain_parameter_presets; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_parameter_presets (
    preset_id text NOT NULL,
    domain_context text NOT NULL,
    preset_name text NOT NULL,
    preset_slug text NOT NULL,
    description text,
    temperature real DEFAULT 0.7 NOT NULL,
    top_p real DEFAULT 0.9,
    top_k integer,
    max_tokens integer DEFAULT 2000,
    frequency_penalty real DEFAULT 0,
    presence_penalty real DEFAULT 0,
    repetition_penalty real DEFAULT 1.0,
    stop_sequences text[],
    context_window_tokens integer,
    memory_tokens integer,
    enable_streaming boolean DEFAULT true,
    enable_content_filter boolean DEFAULT true,
    max_retries integer DEFAULT 3,
    timeout_seconds integer DEFAULT 120,
    system_prompt_suffix text,
    response_format text,
    mirostat integer,
    mirostat_tau real,
    mirostat_eta real,
    num_ctx integer,
    num_predict integer,
    openai_params jsonb,
    anthropic_params jsonb,
    ollama_params jsonb,
    times_used integer DEFAULT 0,
    avg_success_rate real,
    avg_response_time_ms real,
    avg_user_rating real,
    is_default boolean DEFAULT false,
    is_active boolean DEFAULT true,
    status text DEFAULT 'active'::text,
    version integer DEFAULT 1,
    parent_preset_id text,
    created_at timestamp with time zone DEFAULT now(),
    created_by text,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT domain_parameter_presets_frequency_penalty_check CHECK (((frequency_penalty >= ('-2'::integer)::double precision) AND (frequency_penalty <= (2)::double precision))),
    CONSTRAINT domain_parameter_presets_max_tokens_check CHECK ((max_tokens > 0)),
    CONSTRAINT domain_parameter_presets_presence_penalty_check CHECK (((presence_penalty >= ('-2'::integer)::double precision) AND (presence_penalty <= (2)::double precision))),
    CONSTRAINT domain_parameter_presets_repetition_penalty_check CHECK (((repetition_penalty >= (0)::double precision) AND (repetition_penalty <= (2)::double precision))),
    CONSTRAINT domain_parameter_presets_status_check CHECK ((status = ANY (ARRAY['active'::text, 'testing'::text, 'deprecated'::text, 'archived'::text]))),
    CONSTRAINT domain_parameter_presets_temperature_check CHECK (((temperature >= (0)::double precision) AND (temperature <= (2)::double precision))),
    CONSTRAINT domain_parameter_presets_top_k_check CHECK (((top_k IS NULL) OR (top_k > 0))),
    CONSTRAINT domain_parameter_presets_top_p_check CHECK (((top_p >= (0)::double precision) AND (top_p <= (1)::double precision)))
);


ALTER TABLE public.domain_parameter_presets OWNER TO matthewmauer;

--
-- Name: TABLE domain_parameter_presets; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.domain_parameter_presets IS 'Model parameter configurations per domain (temperature, max_tokens, etc.)';


--
-- Name: COLUMN domain_parameter_presets.temperature; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.domain_parameter_presets.temperature IS 'Sampling temperature: 0=deterministic, 2=random (0.0-2.0)';


--
-- Name: COLUMN domain_parameter_presets.system_prompt_suffix; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.domain_parameter_presets.system_prompt_suffix IS 'Append to system prompt for this domain';


--
-- Name: active_domain_presets; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_domain_presets AS
 SELECT dpp.preset_id,
    dpp.domain_context,
    dpp.preset_name,
    dpp.preset_slug,
    dpp.temperature,
    dpp.max_tokens,
    dpp.is_default,
    dpp.times_used,
    dpp.avg_success_rate,
    dpp.avg_user_rating
   FROM public.domain_parameter_presets dpp
  WHERE ((dpp.is_active = true) AND (dpp.status = 'active'::text))
  ORDER BY dpp.domain_context, dpp.is_default DESC, dpp.times_used DESC;


ALTER TABLE public.active_domain_presets OWNER TO matthewmauer;

--
-- Name: domain_context_snapshots; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_context_snapshots (
    snapshot_id text NOT NULL,
    domain_context text NOT NULL,
    bucket_id text,
    snapshot_name text NOT NULL,
    snapshot_tag text,
    description text,
    snapshot_type text DEFAULT 'full'::text NOT NULL,
    model_config jsonb NOT NULL,
    wrapper_config jsonb,
    style_guide jsonb,
    parameters jsonb,
    pattern_ids text[],
    artifact_ids text[],
    avg_success_rate real,
    avg_response_time_ms real,
    avg_user_rating real,
    total_requests_at_snapshot integer,
    parent_snapshot_id text,
    is_current boolean DEFAULT false,
    is_golden boolean DEFAULT false,
    status text DEFAULT 'draft'::text,
    rolled_back_from text,
    rollback_reason text,
    created_at timestamp with time zone DEFAULT now(),
    created_by text,
    activated_at timestamp with time zone,
    deactivated_at timestamp with time zone,
    CONSTRAINT domain_context_snapshots_snapshot_type_check CHECK ((snapshot_type = ANY (ARRAY['full'::text, 'config_only'::text, 'code_only'::text, 'incremental'::text]))),
    CONSTRAINT domain_context_snapshots_status_check CHECK ((status = ANY (ARRAY['draft'::text, 'testing'::text, 'production'::text, 'deprecated'::text, 'archived'::text])))
);


ALTER TABLE public.domain_context_snapshots OWNER TO matthewmauer;

--
-- Name: TABLE domain_context_snapshots; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.domain_context_snapshots IS 'Frozen state of a domain at a specific time - like package.lock for AI contexts';


--
-- Name: COLUMN domain_context_snapshots.is_golden; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.domain_context_snapshots.is_golden IS 'Known-good configuration that can be used for rollback';


--
-- Name: active_domain_snapshots; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_domain_snapshots AS
 SELECT dcs.snapshot_id,
    dcs.domain_context,
    dcs.bucket_id,
    dcs.snapshot_name,
    dcs.snapshot_tag,
    dcs.status,
    dcs.is_golden,
    dcs.activated_at,
    dcs.avg_success_rate,
    dcs.avg_user_rating
   FROM public.domain_context_snapshots dcs
  WHERE (dcs.is_current = true)
  ORDER BY dcs.domain_context;


ALTER TABLE public.active_domain_snapshots OWNER TO matthewmauer;

--
-- Name: domain_portfolio; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_portfolio (
    domain_id uuid DEFAULT gen_random_uuid() NOT NULL,
    domain_name character varying(255) NOT NULL,
    registrar character varying(255),
    registration_date date,
    expiry_date date,
    nameservers text[],
    owner_name character varying(255) DEFAULT 'Matthew Mauer'::character varying,
    owner_email character varying(255),
    owner_github character varying(255) DEFAULT 'matthewmauer'::character varying,
    brand_name character varying(255),
    brand_tagline text,
    brand_description text,
    logo_url text,
    primary_color character varying(7),
    secondary_color character varying(7),
    category character varying(50),
    primary_radi character varying(50),
    secondary_radi text[],
    services text[],
    keywords text[],
    status character varying(50) DEFAULT 'active'::character varying,
    interfaces_count integer DEFAULT 0,
    monthly_visitors integer DEFAULT 0,
    conversion_rate numeric(5,2) DEFAULT 0.00,
    avg_session_duration integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    last_whois_check timestamp without time zone
);


ALTER TABLE public.domain_portfolio OWNER TO matthewmauer;

--
-- Name: TABLE domain_portfolio; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.domain_portfolio IS 'Matthew Mauer portfolio of 12 domains with WHOIS and brand information';


--
-- Name: active_domains; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_domains AS
 SELECT domain_portfolio.domain_id,
    domain_portfolio.domain_name,
    domain_portfolio.brand_name,
    domain_portfolio.brand_tagline,
    domain_portfolio.logo_url,
    domain_portfolio.primary_color,
    domain_portfolio.category,
    domain_portfolio.primary_radi,
    domain_portfolio.services,
    domain_portfolio.interfaces_count,
    domain_portfolio.monthly_visitors
   FROM public.domain_portfolio
  WHERE ((domain_portfolio.status)::text = 'active'::text)
  ORDER BY domain_portfolio.monthly_visitors DESC;


ALTER TABLE public.active_domains OWNER TO matthewmauer;

--
-- Name: price_events; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_events (
    id integer NOT NULL,
    symbol character varying(20) NOT NULL,
    asset_type character varying(20) NOT NULL,
    event_type character varying(50) NOT NULL,
    description text,
    severity character varying(20),
    metadata jsonb,
    detected_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp without time zone,
    notified boolean DEFAULT false,
    acknowledged boolean DEFAULT false
);


ALTER TABLE public.price_events OWNER TO matthewmauer;

--
-- Name: active_events; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_events AS
 SELECT price_events.id,
    price_events.symbol,
    price_events.asset_type,
    price_events.event_type,
    price_events.description,
    price_events.severity,
    price_events.metadata,
    price_events.detected_at
   FROM public.price_events
  WHERE (((price_events.expires_at IS NULL) OR (price_events.expires_at > now())) AND (price_events.acknowledged = false))
  ORDER BY price_events.severity DESC, price_events.detected_at DESC;


ALTER TABLE public.active_events OWNER TO matthewmauer;

--
-- Name: experiment_statistics; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.experiment_statistics (
    id integer NOT NULL,
    experiment_id integer,
    variant_id integer,
    total_observations integer DEFAULT 0,
    success_count integer DEFAULT 0,
    success_rate real GENERATED ALWAYS AS (
CASE
    WHEN (total_observations > 0) THEN ((success_count)::real / (total_observations)::real)
    ELSE (0)::real
END) STORED,
    avg_response_time_ms real,
    avg_cost_usd real,
    avg_satisfaction real,
    conversion_count integer DEFAULT 0,
    conversion_rate real GENERATED ALWAYS AS (
CASE
    WHEN (total_observations > 0) THEN ((conversion_count)::real / (total_observations)::real)
    ELSE (0)::real
END) STORED,
    confidence_interval_lower real,
    confidence_interval_upper real,
    p_value real,
    is_significant boolean DEFAULT false,
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.experiment_statistics OWNER TO matthewmauer;

--
-- Name: TABLE experiment_statistics; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.experiment_statistics IS 'Aggregated statistics per variant with statistical significance';


--
-- Name: experiment_variants; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.experiment_variants (
    id integer NOT NULL,
    experiment_id integer,
    variant_name text NOT NULL,
    variant_config jsonb NOT NULL,
    traffic_percent real DEFAULT 50.0 NOT NULL,
    is_control boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT experiment_variants_traffic_percent_check CHECK (((traffic_percent >= (0)::double precision) AND (traffic_percent <= (100)::double precision)))
);


ALTER TABLE public.experiment_variants OWNER TO matthewmauer;

--
-- Name: TABLE experiment_variants; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.experiment_variants IS 'Experiment variants with traffic allocation (control vs treatments)';


--
-- Name: experiments; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.experiments (
    id integer NOT NULL,
    name text NOT NULL,
    description text,
    experiment_type text NOT NULL,
    domain text,
    user_profile text,
    primary_metric text DEFAULT 'success_rate'::text NOT NULL,
    secondary_metrics jsonb DEFAULT '[]'::jsonb,
    auto_optimize boolean DEFAULT true,
    min_sample_size integer DEFAULT 100,
    request_count integer DEFAULT 0,
    status text DEFAULT 'active'::text,
    winner_variant_id integer,
    created_at timestamp with time zone DEFAULT now(),
    started_at timestamp with time zone,
    ends_at timestamp with time zone,
    ended_at timestamp with time zone
);


ALTER TABLE public.experiments OWNER TO matthewmauer;

--
-- Name: TABLE experiments; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.experiments IS 'A/B testing experiments for model versions, wrappers, prompts, and parameters';


--
-- Name: active_experiments_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_experiments_summary AS
 SELECT e.id,
    e.name,
    e.experiment_type,
    e.domain,
    e.user_profile,
    e.primary_metric,
    e.status,
    count(DISTINCT ev.id) AS variant_count,
    sum(es.total_observations) AS total_observations,
    e.created_at,
    e.ends_at
   FROM ((public.experiments e
     LEFT JOIN public.experiment_variants ev ON ((ev.experiment_id = e.id)))
     LEFT JOIN public.experiment_statistics es ON ((es.experiment_id = e.id)))
  WHERE (e.status = 'active'::text)
  GROUP BY e.id, e.name, e.experiment_type, e.domain, e.user_profile, e.primary_metric, e.status, e.created_at, e.ends_at
  ORDER BY e.created_at DESC;


ALTER TABLE public.active_experiments_summary OWNER TO matthewmauer;

--
-- Name: price_alerts; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_alerts (
    id integer NOT NULL,
    user_id character varying(100),
    symbol character varying(20) NOT NULL,
    asset_type character varying(20) NOT NULL,
    condition character varying(10) NOT NULL,
    target_price numeric(20,8) NOT NULL,
    triggered boolean DEFAULT false,
    triggered_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    notification_sent boolean DEFAULT false
);


ALTER TABLE public.price_alerts OWNER TO matthewmauer;

--
-- Name: active_price_alerts; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_price_alerts AS
 SELECT price_alerts.id,
    price_alerts.user_id,
    price_alerts.symbol,
    price_alerts.asset_type,
    price_alerts.condition,
    price_alerts.target_price,
    price_alerts.created_at
   FROM public.price_alerts
  WHERE (price_alerts.triggered = false)
  ORDER BY price_alerts.created_at DESC;


ALTER TABLE public.active_price_alerts OWNER TO matthewmauer;

--
-- Name: qr_sessions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.qr_sessions (
    session_id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_token text NOT NULL,
    user_id uuid,
    session_type text NOT NULL,
    status text DEFAULT 'active'::text,
    metadata jsonb DEFAULT '{}'::jsonb,
    completion_data jsonb,
    started_at timestamp without time zone DEFAULT now(),
    completed_at timestamp without time zone,
    expires_at timestamp without time zone NOT NULL
);


ALTER TABLE public.qr_sessions OWNER TO matthewmauer;

--
-- Name: TABLE qr_sessions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.qr_sessions IS 'QR loop verification - same QR at start and end';


--
-- Name: active_qr_sessions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_qr_sessions AS
 SELECT qr_sessions.session_id,
    qr_sessions.user_id,
    qr_sessions.session_type,
    qr_sessions.started_at,
    qr_sessions.expires_at,
    EXTRACT(epoch FROM ((qr_sessions.expires_at)::timestamp with time zone - now())) AS seconds_remaining
   FROM public.qr_sessions
  WHERE ((qr_sessions.status = 'active'::text) AND (qr_sessions.expires_at > now()))
  ORDER BY qr_sessions.started_at DESC;


ALTER TABLE public.active_qr_sessions OWNER TO matthewmauer;

--
-- Name: VIEW active_qr_sessions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.active_qr_sessions IS 'Currently active QR sessions';


--
-- Name: visit_sessions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.visit_sessions (
    id integer NOT NULL,
    session_id uuid NOT NULL,
    device_id character varying(64),
    user_id uuid,
    page character varying(255),
    room_name character varying(100),
    start_time timestamp without time zone DEFAULT now(),
    end_time timestamp without time zone,
    duration_ms integer,
    total_interactions integer DEFAULT 0,
    interaction_data jsonb,
    metadata jsonb,
    last_heartbeat_at timestamp without time zone,
    heartbeat_count integer DEFAULT 0,
    is_active boolean DEFAULT true,
    bounce_detected boolean DEFAULT false,
    bounce_reason text,
    bounce_time_ms integer,
    ip_address text,
    ip_hash text,
    ip_rotations integer DEFAULT 0,
    ip_history jsonb DEFAULT '[]'::jsonb,
    affiliate_code text,
    referral_source text,
    campaign_id text,
    spam_score integer DEFAULT 0,
    is_bot boolean DEFAULT false,
    bot_reason text
);


ALTER TABLE public.visit_sessions OWNER TO matthewmauer;

--
-- Name: TABLE visit_sessions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.visit_sessions IS 'Session tracking with timer-based bounce detection and IP rotation tracking';


--
-- Name: COLUMN visit_sessions.heartbeat_count; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.visit_sessions.heartbeat_count IS 'Number of 5-second heartbeats received';


--
-- Name: COLUMN visit_sessions.bounce_detected; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.visit_sessions.bounce_detected IS 'Whether session was detected as a bounce (spam filter)';


--
-- Name: COLUMN visit_sessions.ip_rotations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.visit_sessions.ip_rotations IS 'Number of IP changes (residential proxy tracking)';


--
-- Name: COLUMN visit_sessions.affiliate_code; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.visit_sessions.affiliate_code IS 'Affiliate code from URL params (session-based, not cookie)';


--
-- Name: active_sessions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_sessions AS
 SELECT visit_sessions.session_id,
    visit_sessions.page,
    visit_sessions.room_name,
    visit_sessions.heartbeat_count,
    visit_sessions.last_heartbeat_at,
    EXTRACT(epoch FROM (now() - (visit_sessions.start_time)::timestamp with time zone)) AS session_duration_seconds,
    visit_sessions.total_interactions,
    visit_sessions.ip_rotations,
    visit_sessions.affiliate_code
   FROM public.visit_sessions
  WHERE ((visit_sessions.is_active = true) AND (visit_sessions.last_heartbeat_at > (now() - '00:00:30'::interval)))
  ORDER BY visit_sessions.last_heartbeat_at DESC;


ALTER TABLE public.active_sessions OWNER TO matthewmauer;

--
-- Name: stream_sessions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.stream_sessions (
    id bigint NOT NULL,
    stream_id character varying(255) NOT NULL,
    streamer_id character varying(255) NOT NULL,
    title character varying(500) NOT NULL,
    description text,
    language character varying(50),
    status character varying(20) DEFAULT 'active'::character varying NOT NULL,
    viewer_count integer DEFAULT 0,
    max_viewers integer DEFAULT 0,
    code_executions integer DEFAULT 0,
    chat_messages integer DEFAULT 0,
    started_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    ended_at timestamp without time zone,
    metadata jsonb
);


ALTER TABLE public.stream_sessions OWNER TO matthewmauer;

--
-- Name: TABLE stream_sessions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.stream_sessions IS 'Live coding stream sessions';


--
-- Name: stream_viewers; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.stream_viewers (
    id bigint NOT NULL,
    stream_id character varying(255) NOT NULL,
    viewer_id character varying(255) NOT NULL,
    username character varying(255) NOT NULL,
    joined_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    left_at timestamp without time zone,
    commands_executed integer DEFAULT 0
);


ALTER TABLE public.stream_viewers OWNER TO matthewmauer;

--
-- Name: TABLE stream_viewers; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.stream_viewers IS 'Viewer participation tracking';


--
-- Name: active_streams; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_streams AS
 SELECT s.stream_id,
    s.streamer_id,
    s.title,
    s.description,
    s.language,
    s.status,
    count(DISTINCT v.viewer_id) FILTER (WHERE (v.left_at IS NULL)) AS current_viewers,
    s.max_viewers,
    s.code_executions,
    s.chat_messages,
    s.started_at,
    EXTRACT(epoch FROM (now() - (s.started_at)::timestamp with time zone)) AS duration_seconds
   FROM (public.stream_sessions s
     LEFT JOIN public.stream_viewers v ON (((s.stream_id)::text = (v.stream_id)::text)))
  WHERE ((s.status)::text = 'active'::text)
  GROUP BY s.id, s.stream_id, s.streamer_id, s.title, s.description, s.language, s.status, s.max_viewers, s.code_executions, s.chat_messages, s.started_at
  ORDER BY (count(DISTINCT v.viewer_id) FILTER (WHERE (v.left_at IS NULL))) DESC, s.started_at DESC;


ALTER TABLE public.active_streams OWNER TO matthewmauer;

--
-- Name: gmail_webhook_configs; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.gmail_webhook_configs (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    email_address character varying(255) NOT NULL,
    access_token text NOT NULL,
    refresh_token text NOT NULL,
    relay_from_address character varying(255) DEFAULT 'noreply@calos.ai'::character varying,
    relay_rules jsonb DEFAULT '{}'::jsonb,
    last_history_id character varying(255),
    last_webhook_at timestamp without time zone,
    enabled boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.gmail_webhook_configs OWNER TO matthewmauer;

--
-- Name: active_webhook_configs; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.active_webhook_configs AS
 SELECT gmail_webhook_configs.id,
    gmail_webhook_configs.user_id,
    gmail_webhook_configs.email_address,
    gmail_webhook_configs.relay_from_address,
    gmail_webhook_configs.enabled,
    gmail_webhook_configs.last_webhook_at,
    gmail_webhook_configs.created_at
   FROM public.gmail_webhook_configs
  WHERE (gmail_webhook_configs.enabled = true);


ALTER TABLE public.active_webhook_configs OWNER TO matthewmauer;

--
-- Name: activity_comments; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.activity_comments (
    id integer NOT NULL,
    activity_id integer NOT NULL,
    user_id text NOT NULL,
    comment text NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.activity_comments OWNER TO matthewmauer;

--
-- Name: TABLE activity_comments; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.activity_comments IS 'Comments on activity feed posts';


--
-- Name: activity_comments_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.activity_comments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activity_comments_id_seq OWNER TO matthewmauer;

--
-- Name: activity_comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.activity_comments_id_seq OWNED BY public.activity_comments.id;


--
-- Name: activity_likes; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.activity_likes (
    id integer NOT NULL,
    activity_id integer NOT NULL,
    user_id text NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.activity_likes OWNER TO matthewmauer;

--
-- Name: TABLE activity_likes; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.activity_likes IS 'Likes on activity feed posts';


--
-- Name: activity_likes_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.activity_likes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activity_likes_id_seq OWNER TO matthewmauer;

--
-- Name: activity_likes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.activity_likes_id_seq OWNED BY public.activity_likes.id;


--
-- Name: activity_reposts; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.activity_reposts (
    id integer NOT NULL,
    activity_id integer NOT NULL,
    user_id text NOT NULL,
    comment text,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.activity_reposts OWNER TO matthewmauer;

--
-- Name: TABLE activity_reposts; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.activity_reposts IS 'Reposts of activity feed posts';


--
-- Name: activity_reposts_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.activity_reposts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activity_reposts_id_seq OWNER TO matthewmauer;

--
-- Name: activity_reposts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.activity_reposts_id_seq OWNED BY public.activity_reposts.id;


--
-- Name: activitypub_activities; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.activitypub_activities (
    activity_id integer NOT NULL,
    activity_type text NOT NULL,
    actor_id text NOT NULL,
    object_id text,
    activity_data jsonb NOT NULL,
    received_at timestamp without time zone DEFAULT now(),
    processed boolean DEFAULT false
);


ALTER TABLE public.activitypub_activities OWNER TO matthewmauer;

--
-- Name: TABLE activitypub_activities; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.activitypub_activities IS 'Incoming ActivityPub activities log';


--
-- Name: activitypub_activities_activity_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.activitypub_activities_activity_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activitypub_activities_activity_id_seq OWNER TO matthewmauer;

--
-- Name: activitypub_activities_activity_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.activitypub_activities_activity_id_seq OWNED BY public.activitypub_activities.activity_id;


--
-- Name: activitypub_followers; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.activitypub_followers (
    follower_id integer NOT NULL,
    actor_id text NOT NULL,
    inbox_url text NOT NULL,
    shared_inbox_url text,
    actor_data jsonb,
    followed_at timestamp without time zone DEFAULT now(),
    last_activity_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.activitypub_followers OWNER TO matthewmauer;

--
-- Name: TABLE activitypub_followers; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.activitypub_followers IS 'Mastodon/ActivityPub followers of CalRiven';


--
-- Name: activitypub_followers_follower_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.activitypub_followers_follower_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activitypub_followers_follower_id_seq OWNER TO matthewmauer;

--
-- Name: activitypub_followers_follower_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.activitypub_followers_follower_id_seq OWNED BY public.activitypub_followers.follower_id;


--
-- Name: activitypub_keys; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.activitypub_keys (
    key_id integer NOT NULL,
    actor_username text NOT NULL,
    public_key text NOT NULL,
    private_key text NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.activitypub_keys OWNER TO matthewmauer;

--
-- Name: TABLE activitypub_keys; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.activitypub_keys IS 'RSA keys for HTTP Signatures';


--
-- Name: activitypub_keys_key_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.activitypub_keys_key_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activitypub_keys_key_id_seq OWNER TO matthewmauer;

--
-- Name: activitypub_keys_key_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.activitypub_keys_key_id_seq OWNED BY public.activitypub_keys.key_id;


--
-- Name: activitypub_outbox; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.activitypub_outbox (
    outbox_id integer NOT NULL,
    activity_type text NOT NULL,
    object_type text NOT NULL,
    object_id text NOT NULL,
    activity_data jsonb NOT NULL,
    published_at timestamp without time zone DEFAULT now(),
    sent_to_followers integer DEFAULT 0
);


ALTER TABLE public.activitypub_outbox OWNER TO matthewmauer;

--
-- Name: TABLE activitypub_outbox; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.activitypub_outbox IS 'CalRiven published activities';


--
-- Name: activitypub_outbox_outbox_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.activitypub_outbox_outbox_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.activitypub_outbox_outbox_id_seq OWNER TO matthewmauer;

--
-- Name: activitypub_outbox_outbox_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.activitypub_outbox_outbox_id_seq OWNED BY public.activitypub_outbox.outbox_id;


--
-- Name: ad_campaigns; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.ad_campaigns (
    campaign_id uuid DEFAULT gen_random_uuid() NOT NULL,
    advertiser_id uuid,
    tenant_id uuid,
    created_by uuid,
    campaign_name character varying(200) NOT NULL,
    campaign_description text,
    campaign_type character varying(50) DEFAULT 'ai_chatbot'::character varying,
    target_vertical character varying(50),
    target_audience jsonb DEFAULT '{}'::jsonb,
    ad_copy text,
    ad_creative_url character varying(500),
    call_to_action character varying(200),
    landing_page_url character varying(500),
    budget_cents integer NOT NULL,
    daily_budget_cents integer,
    spent_cents integer DEFAULT 0,
    remaining_cents integer GENERATED ALWAYS AS ((budget_cents - spent_cents)) STORED,
    use_client_keys boolean DEFAULT false,
    client_has_openai boolean DEFAULT false,
    client_has_anthropic boolean DEFAULT false,
    client_has_deepseek boolean DEFAULT false,
    experiment_id integer,
    auto_optimize boolean DEFAULT true,
    total_impressions integer DEFAULT 0,
    total_clicks integer DEFAULT 0,
    total_conversions integer DEFAULT 0,
    conversion_rate numeric(5,4) GENERATED ALWAYS AS (
CASE
    WHEN (total_clicks > 0) THEN ((total_conversions)::numeric / (total_clicks)::numeric)
    ELSE (0)::numeric
END) STORED,
    total_revenue_cents integer DEFAULT 0,
    total_cost_cents integer DEFAULT 0,
    total_profit_cents integer GENERATED ALWAYS AS ((total_revenue_cents - total_cost_cents)) STORED,
    pricing_model character varying(50) DEFAULT 'commission'::character varying,
    commission_rate numeric(5,4) DEFAULT 0.25,
    cpc_cents integer,
    cpm_cents integer,
    cpa_cents integer,
    status character varying(50) DEFAULT 'draft'::character varying,
    starts_at timestamp with time zone,
    ends_at timestamp with time zone,
    paused_at timestamp with time zone,
    utm_source character varying(100),
    utm_medium character varying(100),
    utm_campaign character varying(100),
    metadata jsonb DEFAULT '{}'::jsonb,
    notes text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.ad_campaigns OWNER TO matthewmauer;

--
-- Name: TABLE ad_campaigns; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.ad_campaigns IS 'Advertising campaigns with A/B testing and budget tracking';


--
-- Name: analytics_conversions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.analytics_conversions (
    id integer NOT NULL,
    session_id text NOT NULL,
    user_id uuid NOT NULL,
    conversion_type text NOT NULL,
    conversion_value numeric(10,2) DEFAULT 0,
    currency text DEFAULT 'USD'::text,
    referral_code text,
    affiliate_code text,
    metadata jsonb DEFAULT '{}'::jsonb,
    "timestamp" timestamp without time zone DEFAULT now()
);


ALTER TABLE public.analytics_conversions OWNER TO matthewmauer;

--
-- Name: TABLE analytics_conversions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.analytics_conversions IS 'Track conversions (purchases, signups, subscriptions)';


--
-- Name: affiliate_session_tracking; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.affiliate_session_tracking AS
 SELECT vs.session_id,
    vs.affiliate_code,
    vs.referral_source,
    vs.campaign_id,
    vs.start_time,
    vs.end_time,
    vs.duration_ms,
    vs.total_interactions,
    vs.bounce_detected,
    vs.ip_rotations,
    ac.id AS conversion_id,
    ac.conversion_type,
    ac.conversion_value
   FROM (public.visit_sessions vs
     LEFT JOIN public.analytics_conversions ac ON (((vs.session_id)::text = ac.session_id)))
  WHERE (vs.affiliate_code IS NOT NULL)
  ORDER BY vs.start_time DESC;


ALTER TABLE public.affiliate_session_tracking OWNER TO matthewmauer;

--
-- Name: agent_activity_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.agent_activity_log (
    id integer NOT NULL,
    activity_id uuid NOT NULL,
    "timestamp" timestamp with time zone DEFAULT now() NOT NULL,
    agent character varying(100) NOT NULL,
    user_id character varying(255),
    session_id character varying(255),
    device_id character varying(255),
    identity_id uuid,
    origin_domain character varying(255),
    domain_context character varying(100),
    input text,
    result text,
    duration_ms integer,
    status character varying(50) DEFAULT 'success'::character varying,
    error_message text,
    detected_profile character varying(50),
    profile_confidence numeric(5,2),
    geolocation jsonb,
    client_ip character varying(50),
    platform character varying(50),
    full_context jsonb,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.agent_activity_log OWNER TO matthewmauer;

--
-- Name: TABLE agent_activity_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.agent_activity_log IS 'Tracks all agent activity across the system with full context';


--
-- Name: COLUMN agent_activity_log.agent; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.agent_activity_log.agent IS 'Agent identifier like @ollama:mistral, @gpt4, @claude';


--
-- Name: COLUMN agent_activity_log.identity_id; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.agent_activity_log.identity_id IS 'Links to unified identity graph';


--
-- Name: COLUMN agent_activity_log.origin_domain; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.agent_activity_log.origin_domain IS 'Domain where request originated (soulfra.com, deathtodata.com, etc.)';


--
-- Name: COLUMN agent_activity_log.detected_profile; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.agent_activity_log.detected_profile IS 'ICP profile detected (casual, professional, creative, etc.)';


--
-- Name: COLUMN agent_activity_log.geolocation; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.agent_activity_log.geolocation IS 'Geolocation data (city, region, country, timezone)';


--
-- Name: COLUMN agent_activity_log.full_context; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.agent_activity_log.full_context IS 'Complete context object for debugging';


--
-- Name: agent_activity_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.agent_activity_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.agent_activity_log_id_seq OWNER TO matthewmauer;

--
-- Name: agent_activity_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.agent_activity_log_id_seq OWNED BY public.agent_activity_log.id;


--
-- Name: agent_metrics; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.agent_metrics (
    id integer NOT NULL,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    agent_id character varying(100) NOT NULL,
    metric_type character varying(50) NOT NULL,
    value numeric,
    response_id integer,
    metadata jsonb,
    request_hash character varying(64)
);


ALTER TABLE public.agent_metrics OWNER TO matthewmauer;

--
-- Name: agent_metrics_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.agent_metrics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.agent_metrics_id_seq OWNER TO matthewmauer;

--
-- Name: agent_metrics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.agent_metrics_id_seq OWNED BY public.agent_metrics.id;


--
-- Name: agent_performance; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.agent_performance AS
 SELECT agent_metrics.agent_id,
    count(*) AS total_requests,
    avg(agent_metrics.value) FILTER (WHERE ((agent_metrics.metric_type)::text = 'latency'::text)) AS avg_latency_ms,
    min(agent_metrics.value) FILTER (WHERE ((agent_metrics.metric_type)::text = 'latency'::text)) AS min_latency_ms,
    max(agent_metrics.value) FILTER (WHERE ((agent_metrics.metric_type)::text = 'latency'::text)) AS max_latency_ms,
    percentile_cont((0.95)::double precision) WITHIN GROUP (ORDER BY ((agent_metrics.value)::double precision)) FILTER (WHERE ((agent_metrics.metric_type)::text = 'latency'::text)) AS p95_latency_ms,
    count(*) FILTER (WHERE ((agent_metrics.metric_type)::text = 'cache_hit'::text)) AS cache_hits,
    count(*) FILTER (WHERE ((agent_metrics.metric_type)::text = 'error'::text)) AS error_count,
    count(*) FILTER (WHERE ((agent_metrics.metric_type)::text = 'request'::text)) AS request_count
   FROM public.agent_metrics
  WHERE (agent_metrics."timestamp" > (CURRENT_TIMESTAMP - '24:00:00'::interval))
  GROUP BY agent_metrics.agent_id
  ORDER BY (count(*)) DESC;


ALTER TABLE public.agent_performance OWNER TO matthewmauer;

--
-- Name: ai_embeddings; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.ai_embeddings (
    id integer NOT NULL,
    response_id integer NOT NULL,
    embedding public.vector(1536),
    embedding_model character varying(100) DEFAULT 'text-embedding-ada-002'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.ai_embeddings OWNER TO matthewmauer;

--
-- Name: ai_embeddings_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.ai_embeddings_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ai_embeddings_id_seq OWNER TO matthewmauer;

--
-- Name: ai_embeddings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.ai_embeddings_id_seq OWNED BY public.ai_embeddings.id;


--
-- Name: ai_price_correlations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.ai_price_correlations (
    id integer NOT NULL,
    provider character varying(50) NOT NULL,
    model_name character varying(255) NOT NULL,
    ai_cost_per_1k numeric(10,6),
    asset_type character varying(50),
    asset_symbol character varying(20),
    asset_price numeric(20,8),
    correlation_coefficient numeric(5,4),
    sample_size integer,
    calculated_at timestamp with time zone DEFAULT now(),
    window_days integer DEFAULT 30,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.ai_price_correlations OWNER TO matthewmauer;

--
-- Name: TABLE ai_price_correlations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.ai_price_correlations IS 'Correlations between AI model pricing and crypto/stock prices for HFT algo';


--
-- Name: ai_price_correlations_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.ai_price_correlations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ai_price_correlations_id_seq OWNER TO matthewmauer;

--
-- Name: ai_price_correlations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.ai_price_correlations_id_seq OWNED BY public.ai_price_correlations.id;


--
-- Name: ai_responses; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.ai_responses (
    id integer NOT NULL,
    request_timestamp timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    response_timestamp timestamp without time zone,
    latency_ms integer,
    provider character varying(50) NOT NULL,
    model character varying(100) NOT NULL,
    query_hash character varying(64) NOT NULL,
    query_text text,
    messages jsonb NOT NULL,
    response text NOT NULL,
    metadata jsonb,
    cache_hit boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.ai_responses OWNER TO matthewmauer;

--
-- Name: ai_responses_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.ai_responses_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ai_responses_id_seq OWNER TO matthewmauer;

--
-- Name: ai_responses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.ai_responses_id_seq OWNED BY public.ai_responses.id;


--
-- Name: analytics_attribution; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.analytics_attribution (
    id integer NOT NULL,
    session_id text NOT NULL,
    user_id uuid NOT NULL,
    conversion_id integer,
    referral_code text,
    affiliate_code text,
    conversion_value numeric(10,2) DEFAULT 0,
    "timestamp" timestamp without time zone DEFAULT now()
);


ALTER TABLE public.analytics_attribution OWNER TO matthewmauer;

--
-- Name: TABLE analytics_attribution; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.analytics_attribution IS 'Track attribution for referrals and affiliates';


--
-- Name: analytics_attribution_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.analytics_attribution_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analytics_attribution_id_seq OWNER TO matthewmauer;

--
-- Name: analytics_attribution_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.analytics_attribution_id_seq OWNED BY public.analytics_attribution.id;


--
-- Name: analytics_attribution_performance; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.analytics_attribution_performance AS
 SELECT COALESCE(analytics_attribution.referral_code, analytics_attribution.affiliate_code) AS code,
        CASE
            WHEN (analytics_attribution.referral_code IS NOT NULL) THEN 'referral'::text
            ELSE 'affiliate'::text
        END AS code_type,
    count(*) AS conversion_count,
    count(DISTINCT analytics_attribution.user_id) AS unique_users,
    sum(analytics_attribution.conversion_value) AS total_value,
    avg(analytics_attribution.conversion_value) AS avg_value,
    min(analytics_attribution."timestamp") AS first_conversion,
    max(analytics_attribution."timestamp") AS last_conversion
   FROM public.analytics_attribution
  WHERE ((analytics_attribution.referral_code IS NOT NULL) OR (analytics_attribution.affiliate_code IS NOT NULL))
  GROUP BY COALESCE(analytics_attribution.referral_code, analytics_attribution.affiliate_code),
        CASE
            WHEN (analytics_attribution.referral_code IS NOT NULL) THEN 'referral'::text
            ELSE 'affiliate'::text
        END
  ORDER BY (sum(analytics_attribution.conversion_value)) DESC;


ALTER TABLE public.analytics_attribution_performance OWNER TO matthewmauer;

--
-- Name: VIEW analytics_attribution_performance; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.analytics_attribution_performance IS 'Attribution performance by referral/affiliate code';


--
-- Name: analytics_conversions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.analytics_conversions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analytics_conversions_id_seq OWNER TO matthewmauer;

--
-- Name: analytics_conversions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.analytics_conversions_id_seq OWNED BY public.analytics_conversions.id;


--
-- Name: analytics_daily_conversions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.analytics_daily_conversions AS
 SELECT date(analytics_conversions."timestamp") AS date,
    analytics_conversions.conversion_type,
    count(*) AS conversion_count,
    count(DISTINCT analytics_conversions.user_id) AS unique_users,
    sum(analytics_conversions.conversion_value) AS total_value,
    avg(analytics_conversions.conversion_value) AS avg_value,
    analytics_conversions.currency
   FROM public.analytics_conversions
  GROUP BY (date(analytics_conversions."timestamp")), analytics_conversions.conversion_type, analytics_conversions.currency
  ORDER BY (date(analytics_conversions."timestamp")) DESC, (count(*)) DESC;


ALTER TABLE public.analytics_daily_conversions OWNER TO matthewmauer;

--
-- Name: VIEW analytics_daily_conversions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.analytics_daily_conversions IS 'Daily aggregated conversion statistics';


--
-- Name: analytics_feature_usage; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.analytics_feature_usage (
    id integer NOT NULL,
    session_id text NOT NULL,
    user_id uuid,
    feature_name text NOT NULL,
    feature_type text NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb,
    "timestamp" timestamp without time zone DEFAULT now()
);


ALTER TABLE public.analytics_feature_usage OWNER TO matthewmauer;

--
-- Name: TABLE analytics_feature_usage; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.analytics_feature_usage IS 'Track feature usage (button clicks, form submissions)';


--
-- Name: analytics_daily_feature_usage; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.analytics_daily_feature_usage AS
 SELECT date(analytics_feature_usage."timestamp") AS date,
    analytics_feature_usage.feature_name,
    analytics_feature_usage.feature_type,
    count(*) AS usage_count,
    count(DISTINCT analytics_feature_usage.session_id) AS unique_sessions,
    count(DISTINCT analytics_feature_usage.user_id) FILTER (WHERE (analytics_feature_usage.user_id IS NOT NULL)) AS unique_users
   FROM public.analytics_feature_usage
  GROUP BY (date(analytics_feature_usage."timestamp")), analytics_feature_usage.feature_name, analytics_feature_usage.feature_type
  ORDER BY (date(analytics_feature_usage."timestamp")) DESC, (count(*)) DESC;


ALTER TABLE public.analytics_daily_feature_usage OWNER TO matthewmauer;

--
-- Name: VIEW analytics_daily_feature_usage; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.analytics_daily_feature_usage IS 'Daily aggregated feature usage statistics';


--
-- Name: analytics_page_views; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.analytics_page_views (
    id integer NOT NULL,
    session_id text NOT NULL,
    user_id uuid,
    path text NOT NULL,
    referrer text,
    user_agent text,
    ip_hash text,
    "timestamp" timestamp without time zone DEFAULT now()
);


ALTER TABLE public.analytics_page_views OWNER TO matthewmauer;

--
-- Name: TABLE analytics_page_views; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.analytics_page_views IS 'Anonymous page view tracking (server-side only)';


--
-- Name: COLUMN analytics_page_views.ip_hash; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.analytics_page_views.ip_hash IS 'SHA-256 hash of IP address (one-way, for security not tracking)';


--
-- Name: analytics_daily_page_views; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.analytics_daily_page_views AS
 SELECT date(analytics_page_views."timestamp") AS date,
    analytics_page_views.path,
    count(*) AS view_count,
    count(DISTINCT analytics_page_views.session_id) AS unique_sessions,
    count(DISTINCT analytics_page_views.user_id) FILTER (WHERE (analytics_page_views.user_id IS NOT NULL)) AS unique_users
   FROM public.analytics_page_views
  GROUP BY (date(analytics_page_views."timestamp")), analytics_page_views.path
  ORDER BY (date(analytics_page_views."timestamp")) DESC, (count(*)) DESC;


ALTER TABLE public.analytics_daily_page_views OWNER TO matthewmauer;

--
-- Name: VIEW analytics_daily_page_views; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.analytics_daily_page_views IS 'Daily aggregated page view statistics';


--
-- Name: analytics_feature_usage_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.analytics_feature_usage_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analytics_feature_usage_id_seq OWNER TO matthewmauer;

--
-- Name: analytics_feature_usage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.analytics_feature_usage_id_seq OWNED BY public.analytics_feature_usage.id;


--
-- Name: analytics_page_views_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.analytics_page_views_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.analytics_page_views_id_seq OWNER TO matthewmauer;

--
-- Name: analytics_page_views_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.analytics_page_views_id_seq OWNED BY public.analytics_page_views.id;


--
-- Name: analytics_session_duration; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.analytics_session_duration AS
 SELECT analytics_page_views.session_id,
    min(analytics_page_views."timestamp") AS session_start,
    max(analytics_page_views."timestamp") AS session_end,
    EXTRACT(epoch FROM (max(analytics_page_views."timestamp") - min(analytics_page_views."timestamp"))) AS duration_seconds,
    count(*) AS page_views
   FROM public.analytics_page_views
  GROUP BY analytics_page_views.session_id
 HAVING (count(*) > 1);


ALTER TABLE public.analytics_session_duration OWNER TO matthewmauer;

--
-- Name: VIEW analytics_session_duration; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.analytics_session_duration IS 'Session duration and page view count';


--
-- Name: analytics_top_referrers; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.analytics_top_referrers AS
 SELECT analytics_page_views.referrer,
    count(*) AS visit_count,
    count(DISTINCT analytics_page_views.session_id) AS unique_sessions,
    count(DISTINCT analytics_page_views.user_id) FILTER (WHERE (analytics_page_views.user_id IS NOT NULL)) AS unique_users,
    max(analytics_page_views."timestamp") AS last_visit
   FROM public.analytics_page_views
  WHERE ((analytics_page_views.referrer IS NOT NULL) AND (analytics_page_views.referrer <> ''::text))
  GROUP BY analytics_page_views.referrer
  ORDER BY (count(*)) DESC;


ALTER TABLE public.analytics_top_referrers OWNER TO matthewmauer;

--
-- Name: VIEW analytics_top_referrers; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.analytics_top_referrers IS 'Top traffic sources by referrer';


--
-- Name: animation_sequences; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.animation_sequences (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    display_name character varying(255),
    description text,
    sheet_id integer,
    frames integer[],
    frame_delays integer[],
    default_fps integer DEFAULT 12,
    loop boolean DEFAULT true,
    ping_pong boolean DEFAULT false,
    category character varying(100),
    tags text[],
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.animation_sequences OWNER TO matthewmauer;

--
-- Name: TABLE animation_sequences; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.animation_sequences IS 'Frame-by-frame animation definitions';


--
-- Name: animation_sequences_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.animation_sequences_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.animation_sequences_id_seq OWNER TO matthewmauer;

--
-- Name: animation_sequences_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.animation_sequences_id_seq OWNED BY public.animation_sequences.id;


--
-- Name: api_keys; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.api_keys (
    key_id uuid DEFAULT gen_random_uuid() NOT NULL,
    api_key text NOT NULL,
    tenant_id text NOT NULL,
    app_id uuid,
    created_at timestamp without time zone DEFAULT now(),
    last_used timestamp without time zone
);


ALTER TABLE public.api_keys OWNER TO matthewmauer;

--
-- Name: TABLE api_keys; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.api_keys IS 'API keys for app instances';


--
-- Name: api_request_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.api_request_log (
    id integer NOT NULL,
    developer_id integer,
    api_key character varying(64),
    endpoint character varying(255),
    method character varying(10),
    request_headers jsonb,
    request_body jsonb,
    query_params jsonb,
    status_code integer,
    response_body jsonb,
    latency_ms integer,
    ip_address inet,
    user_agent text,
    origin character varying(255),
    requested_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.api_request_log OWNER TO matthewmauer;

--
-- Name: api_request_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.api_request_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.api_request_log_id_seq OWNER TO matthewmauer;

--
-- Name: api_request_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.api_request_log_id_seq OWNED BY public.api_request_log.id;


--
-- Name: api_usage; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.api_usage (
    id integer NOT NULL,
    developer_id integer NOT NULL,
    endpoint character varying(255) NOT NULL,
    method character varying(10) NOT NULL,
    hour_bucket timestamp without time zone NOT NULL,
    requests_count integer DEFAULT 0,
    success_count integer DEFAULT 0,
    error_count integer DEFAULT 0,
    avg_latency_ms integer,
    total_latency_ms bigint DEFAULT 0
);


ALTER TABLE public.api_usage OWNER TO matthewmauer;

--
-- Name: api_usage_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.api_usage_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.api_usage_id_seq OWNER TO matthewmauer;

--
-- Name: api_usage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.api_usage_id_seq OWNED BY public.api_usage.id;


--
-- Name: app_instances; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.app_instances (
    tenant_id text NOT NULL,
    user_id uuid NOT NULL,
    template_id text NOT NULL,
    status text DEFAULT 'active'::text,
    created_at timestamp without time zone DEFAULT now(),
    last_accessed timestamp without time zone DEFAULT now()
);


ALTER TABLE public.app_instances OWNER TO matthewmauer;

--
-- Name: TABLE app_instances; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.app_instances IS 'Isolated tenant instances for each app installation';


--
-- Name: app_launch_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.app_launch_log (
    user_id uuid NOT NULL,
    app_id uuid NOT NULL,
    last_opened_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.app_launch_log OWNER TO matthewmauer;

--
-- Name: TABLE app_launch_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.app_launch_log IS 'Track recently used apps';


--
-- Name: app_ratings; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.app_ratings (
    rating_id uuid DEFAULT gen_random_uuid() NOT NULL,
    template_id text NOT NULL,
    user_id uuid NOT NULL,
    rating integer NOT NULL,
    review text,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT app_ratings_rating_check CHECK (((rating >= 1) AND (rating <= 5)))
);


ALTER TABLE public.app_ratings OWNER TO matthewmauer;

--
-- Name: TABLE app_ratings; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.app_ratings IS 'User ratings for app templates';


--
-- Name: app_templates; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.app_templates (
    template_id text NOT NULL,
    name text NOT NULL,
    description text,
    icon text NOT NULL,
    category text NOT NULL,
    tags jsonb DEFAULT '[]'::jsonb,
    features jsonb DEFAULT '[]'::jsonb,
    schema_sql text,
    config jsonb DEFAULT '{}'::jsonb,
    price_cents integer DEFAULT 0,
    install_count integer DEFAULT 0,
    rating numeric(2,1) DEFAULT 0.0,
    featured boolean DEFAULT false,
    status text DEFAULT 'active'::text,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.app_templates OWNER TO matthewmauer;

--
-- Name: TABLE app_templates; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.app_templates IS 'Pre-built app templates users can install (like Bonk Game SDK)';


--
-- Name: arbitrage_opportunities; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.arbitrage_opportunities (
    id bigint NOT NULL,
    symbol character varying(20) NOT NULL,
    source1 character varying(50) NOT NULL,
    price1 numeric(20,8) NOT NULL,
    source2 character varying(50) NOT NULL,
    price2 numeric(20,8) NOT NULL,
    spread_absolute numeric(20,8) NOT NULL,
    spread_percent numeric(10,4) NOT NULL,
    is_data_error boolean DEFAULT false,
    detected_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.arbitrage_opportunities OWNER TO matthewmauer;

--
-- Name: TABLE arbitrage_opportunities; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.arbitrage_opportunities IS 'Records price discrepancies between sources that may indicate arbitrage opportunities or data errors';


--
-- Name: COLUMN arbitrage_opportunities.spread_percent; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.arbitrage_opportunities.spread_percent IS 'Percentage difference: (price2 - price1) / price1 * 100';


--
-- Name: COLUMN arbitrage_opportunities.is_data_error; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.arbitrage_opportunities.is_data_error IS 'TRUE if spread > 20% (likely bad data)';


--
-- Name: arbitrage_opportunities_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.arbitrage_opportunities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.arbitrage_opportunities_id_seq OWNER TO matthewmauer;

--
-- Name: arbitrage_opportunities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.arbitrage_opportunities_id_seq OWNED BY public.arbitrage_opportunities.id;


--
-- Name: arbitrage_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.arbitrage_summary AS
 SELECT arbitrage_opportunities.symbol,
    count(*) AS total_opportunities,
    avg(arbitrage_opportunities.spread_percent) AS avg_spread,
    max(arbitrage_opportunities.spread_percent) AS max_spread,
    min(arbitrage_opportunities.spread_percent) AS min_spread,
    max(arbitrage_opportunities.detected_at) AS last_opportunity,
    count(*) FILTER (WHERE (arbitrage_opportunities.is_data_error = true)) AS data_errors
   FROM public.arbitrage_opportunities
  WHERE (arbitrage_opportunities.detected_at > (now() - '7 days'::interval))
  GROUP BY arbitrage_opportunities.symbol
  ORDER BY (count(*)) DESC;


ALTER TABLE public.arbitrage_summary OWNER TO matthewmauer;

--
-- Name: archetypes; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.archetypes (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    slug character varying(100) NOT NULL,
    description text,
    icon character varying(50),
    traits jsonb DEFAULT '[]'::jsonb,
    example_brands text[],
    color character varying(20),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.archetypes OWNER TO matthewmauer;

--
-- Name: archetypes_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.archetypes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.archetypes_id_seq OWNER TO matthewmauer;

--
-- Name: archetypes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.archetypes_id_seq OWNED BY public.archetypes.id;


--
-- Name: artifact_collection_members; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.artifact_collection_members (
    id integer NOT NULL,
    collection_id text NOT NULL,
    artifact_id text NOT NULL,
    "position" integer DEFAULT 0,
    added_at timestamp with time zone DEFAULT now(),
    added_by text
);


ALTER TABLE public.artifact_collection_members OWNER TO matthewmauer;

--
-- Name: artifact_collection_members_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.artifact_collection_members_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.artifact_collection_members_id_seq OWNER TO matthewmauer;

--
-- Name: artifact_collection_members_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.artifact_collection_members_id_seq OWNED BY public.artifact_collection_members.id;


--
-- Name: artifact_collections; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.artifact_collections (
    collection_id text NOT NULL,
    collection_name text NOT NULL,
    collection_slug text NOT NULL,
    description text,
    bucket_id text,
    domain_context text,
    tags text[],
    category text,
    visibility text DEFAULT 'private'::text,
    created_at timestamp with time zone DEFAULT now(),
    created_by text,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT artifact_collections_visibility_check CHECK ((visibility = ANY (ARRAY['private'::text, 'team'::text, 'public'::text])))
);


ALTER TABLE public.artifact_collections OWNER TO matthewmauer;

--
-- Name: TABLE artifact_collections; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.artifact_collections IS 'Group related artifacts into collections (components, APIs, utilities)';


--
-- Name: artifact_dependencies; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.artifact_dependencies (
    id integer NOT NULL,
    artifact_id text NOT NULL,
    depends_on_artifact_id text,
    depends_on_external text,
    dependency_type text NOT NULL,
    required boolean DEFAULT true,
    optional_context text,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.artifact_dependencies OWNER TO matthewmauer;

--
-- Name: TABLE artifact_dependencies; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.artifact_dependencies IS 'Track imports and dependencies between artifacts';


--
-- Name: artifact_dependencies_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.artifact_dependencies_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.artifact_dependencies_id_seq OWNER TO matthewmauer;

--
-- Name: artifact_dependencies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.artifact_dependencies_id_seq OWNED BY public.artifact_dependencies.id;


--
-- Name: bucket_artifacts; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.bucket_artifacts (
    artifact_id text NOT NULL,
    bucket_id text NOT NULL,
    domain_context text,
    domain_url text,
    artifact_type text NOT NULL,
    language text,
    framework text,
    code text NOT NULL,
    code_hash text,
    artifact_name text,
    description text,
    tags text[],
    original_prompt text NOT NULL,
    reasoning_log_id integer,
    request_id text,
    parent_artifact_id text,
    model_id text NOT NULL,
    wrapper_name text,
    model_parameters jsonb,
    user_rating integer,
    times_used integer DEFAULT 0,
    times_modified integer DEFAULT 0,
    success_score real,
    version integer DEFAULT 1,
    is_current boolean DEFAULT true,
    superseded_by text,
    file_path text,
    file_size integer,
    mime_type text,
    status text DEFAULT 'active'::text,
    visibility text DEFAULT 'private'::text,
    last_used_at timestamp with time zone,
    last_modified_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    created_by text,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT bucket_artifacts_status_check CHECK ((status = ANY (ARRAY['active'::text, 'archived'::text, 'deprecated'::text, 'failed'::text]))),
    CONSTRAINT bucket_artifacts_user_rating_check CHECK (((user_rating >= 1) AND (user_rating <= 5))),
    CONSTRAINT bucket_artifacts_visibility_check CHECK ((visibility = ANY (ARRAY['private'::text, 'team'::text, 'public'::text])))
);


ALTER TABLE public.bucket_artifacts OWNER TO matthewmauer;

--
-- Name: TABLE bucket_artifacts; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.bucket_artifacts IS 'AI-generated code artifacts with full context: prompt → reasoning → code → bucket → domain';


--
-- Name: COLUMN bucket_artifacts.code_hash; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.bucket_artifacts.code_hash IS 'SHA-256 hash for deduplication across buckets';


--
-- Name: COLUMN bucket_artifacts.original_prompt; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.bucket_artifacts.original_prompt IS 'The user prompt that led to this artifact being generated';


--
-- Name: COLUMN bucket_artifacts.reasoning_log_id; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.bucket_artifacts.reasoning_log_id IS 'WHY this artifact was generated (links to bucket_reasoning_log)';


--
-- Name: artifact_dependency_graph; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.artifact_dependency_graph AS
 SELECT ba.artifact_id,
    ba.artifact_name,
    ba.artifact_type,
    array_agg(DISTINCT ad.depends_on_artifact_id) FILTER (WHERE (ad.depends_on_artifact_id IS NOT NULL)) AS internal_deps,
    array_agg(DISTINCT ad.depends_on_external) FILTER (WHERE (ad.depends_on_external IS NOT NULL)) AS external_deps
   FROM (public.bucket_artifacts ba
     LEFT JOIN public.artifact_dependencies ad ON ((ba.artifact_id = ad.artifact_id)))
  WHERE ((ba.status = 'active'::text) AND (ba.is_current = true))
  GROUP BY ba.artifact_id, ba.artifact_name, ba.artifact_type;


ALTER TABLE public.artifact_dependency_graph OWNER TO matthewmauer;

--
-- Name: artifact_usage_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.artifact_usage_log (
    id integer NOT NULL,
    artifact_id text NOT NULL,
    used_by text,
    usage_type text NOT NULL,
    used_in_request_id text,
    used_in_session_id text,
    success boolean DEFAULT true,
    error_message text,
    user_feedback text,
    user_rating integer,
    "timestamp" timestamp with time zone DEFAULT now(),
    CONSTRAINT artifact_usage_log_user_rating_check CHECK (((user_rating >= 1) AND (user_rating <= 5)))
);


ALTER TABLE public.artifact_usage_log OWNER TO matthewmauer;

--
-- Name: TABLE artifact_usage_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.artifact_usage_log IS 'Track when and how artifacts are used';


--
-- Name: artifact_usage_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.artifact_usage_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.artifact_usage_log_id_seq OWNER TO matthewmauer;

--
-- Name: artifact_usage_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.artifact_usage_log_id_seq OWNED BY public.artifact_usage_log.id;


--
-- Name: arxiv_papers; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.arxiv_papers (
    id integer NOT NULL,
    arxiv_id character varying(50) NOT NULL,
    title text NOT NULL,
    authors text[],
    abstract text,
    pdf_url text,
    published_date date,
    categories text[],
    pdf_path text,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.arxiv_papers OWNER TO matthewmauer;

--
-- Name: arxiv_papers_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.arxiv_papers_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.arxiv_papers_id_seq OWNER TO matthewmauer;

--
-- Name: arxiv_papers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.arxiv_papers_id_seq OWNED BY public.arxiv_papers.id;


--
-- Name: authorship_registry; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.authorship_registry (
    id integer NOT NULL,
    user_id integer,
    ip_type character varying(50) NOT NULL,
    title character varying(500) NOT NULL,
    description text,
    filing_number character varying(255),
    filing_date date,
    registration_number character varying(255),
    registration_date date,
    status character varying(50) DEFAULT 'draft'::character varying,
    related_files text[],
    related_repos text[],
    related_commits text[],
    related_code jsonb,
    soulfra_hash character varying(64),
    soulfra_signature text,
    signed_at timestamp without time zone,
    signed_by character varying(255),
    previous_hash character varying(64),
    proof_chain jsonb,
    tags text[],
    category character varying(100),
    jurisdiction character varying(100),
    is_public boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.authorship_registry OWNER TO matthewmauer;

--
-- Name: authorship_registry_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.authorship_registry_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.authorship_registry_id_seq OWNER TO matthewmauer;

--
-- Name: authorship_registry_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.authorship_registry_id_seq OWNED BY public.authorship_registry.id;


--
-- Name: automated_flows; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.automated_flows (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    steps jsonb DEFAULT '[]'::jsonb NOT NULL,
    trigger character varying(50) DEFAULT 'manual'::character varying NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.automated_flows OWNER TO matthewmauer;

--
-- Name: TABLE automated_flows; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.automated_flows IS 'DocuSign-style automated flows';


--
-- Name: COLUMN automated_flows.steps; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.automated_flows.steps IS 'Array of steps with order, type, config';


--
-- Name: COLUMN automated_flows.trigger; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.automated_flows.trigger IS 'How flow is triggered: manual, api, webhook, schedule';


--
-- Name: autonomous_code_matches; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.autonomous_code_matches (
    match_id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    file_path text NOT NULL,
    match_score numeric(5,4),
    match_reason text,
    was_helpful boolean,
    incorporated boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.autonomous_code_matches OWNER TO matthewmauer;

--
-- Name: TABLE autonomous_code_matches; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.autonomous_code_matches IS 'Code search results from autonomous builds';


--
-- Name: autonomous_improvements; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.autonomous_improvements (
    improvement_id uuid DEFAULT gen_random_uuid() NOT NULL,
    improvement_type character varying(100) NOT NULL,
    description text NOT NULL,
    baseline_metric numeric(10,2),
    improved_metric numeric(10,2),
    improvement_percentage numeric(5,2) GENERATED ALWAYS AS (
CASE
    WHEN (baseline_metric > (0)::numeric) THEN (((improved_metric - baseline_metric) / baseline_metric) * (100)::numeric)
    ELSE NULL::numeric
END) STORED,
    evidence jsonb,
    implemented boolean DEFAULT false,
    implemented_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.autonomous_improvements OWNER TO matthewmauer;

--
-- Name: TABLE autonomous_improvements; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.autonomous_improvements IS 'Self-improvement tracking for autonomous mode';


--
-- Name: autonomous_improvement_leaderboard; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.autonomous_improvement_leaderboard AS
 SELECT ai.improvement_type,
    count(*) AS improvement_count,
    avg(ai.improvement_percentage) AS avg_improvement,
    sum(
        CASE
            WHEN ai.implemented THEN 1
            ELSE 0
        END) AS implemented_count,
    max(ai.improvement_percentage) AS best_improvement
   FROM public.autonomous_improvements ai
  GROUP BY ai.improvement_type
  ORDER BY (avg(ai.improvement_percentage)) DESC NULLS LAST;


ALTER TABLE public.autonomous_improvement_leaderboard OWNER TO matthewmauer;

--
-- Name: VIEW autonomous_improvement_leaderboard; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.autonomous_improvement_leaderboard IS 'Self-improvement tracking';


--
-- Name: autonomous_patterns; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.autonomous_patterns (
    pattern_id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    action character varying(200) NOT NULL,
    context jsonb NOT NULL,
    similarity_score numeric(3,2),
    matched_session_id uuid,
    times_reused integer DEFAULT 0,
    success_rate numeric(3,2),
    pattern_metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.autonomous_patterns OWNER TO matthewmauer;

--
-- Name: TABLE autonomous_patterns; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.autonomous_patterns IS 'Learned patterns from successful autonomous builds';


--
-- Name: autonomous_sessions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.autonomous_sessions (
    session_id uuid DEFAULT gen_random_uuid() NOT NULL,
    prompt text NOT NULL,
    intent jsonb,
    similar_patterns jsonb DEFAULT '[]'::jsonb,
    existing_code jsonb DEFAULT '[]'::jsonb,
    council_session_id uuid,
    consensus jsonb,
    result jsonb,
    success boolean,
    error_message text,
    files_generated jsonb DEFAULT '[]'::jsonb,
    tests_passed integer DEFAULT 0,
    tests_failed integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    completed_at timestamp with time zone,
    duration_ms integer GENERATED ALWAYS AS (
CASE
    WHEN (completed_at IS NOT NULL) THEN (EXTRACT(epoch FROM (completed_at - created_at)) * (1000)::numeric)
    ELSE NULL::numeric
END) STORED
);


ALTER TABLE public.autonomous_sessions OWNER TO matthewmauer;

--
-- Name: TABLE autonomous_sessions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.autonomous_sessions IS 'Autonomous mode build sessions (copilot mode)';


--
-- Name: handle_reservations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.handle_reservations (
    reservation_id uuid DEFAULT gen_random_uuid() NOT NULL,
    handle character varying(30) NOT NULL,
    handle_lowercase character varying(30) NOT NULL,
    reservation_type text NOT NULL,
    reserved_for_user_id integer,
    reserved_by_admin text,
    status text DEFAULT 'reserved'::text,
    price_cents integer DEFAULT 0,
    reason text,
    notes text,
    reserved_at timestamp with time zone DEFAULT now(),
    expires_at timestamp with time zone,
    claimed_at timestamp with time zone,
    CONSTRAINT handle_reservations_handle_lowercase CHECK (((handle_lowercase)::text = lower((handle)::text)))
);


ALTER TABLE public.handle_reservations OWNER TO matthewmauer;

--
-- Name: available_premium_handles; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.available_premium_handles AS
 SELECT handle_reservations.handle,
    handle_reservations.price_cents,
    ((handle_reservations.price_cents)::numeric / 100.0) AS price_dollars,
    handle_reservations.reserved_at,
    handle_reservations.expires_at
   FROM public.handle_reservations
  WHERE ((handle_reservations.reservation_type = 'premium'::text) AND (handle_reservations.status = 'reserved'::text) AND ((handle_reservations.expires_at IS NULL) OR (handle_reservations.expires_at > now())))
  ORDER BY handle_reservations.price_cents DESC;


ALTER TABLE public.available_premium_handles OWNER TO matthewmauer;

--
-- Name: backtest_results; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.backtest_results (
    id integer NOT NULL,
    strategy_name character varying(100) NOT NULL,
    symbol character varying(20) NOT NULL,
    asset_type character varying(20) NOT NULL,
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone NOT NULL,
    initial_capital numeric(20,2) NOT NULL,
    final_capital numeric(20,2),
    total_return_percent numeric(10,4),
    total_trades integer,
    winning_trades integer,
    losing_trades integer,
    win_rate numeric(10,4),
    max_drawdown numeric(10,4),
    sharpe_ratio numeric(10,4),
    trades jsonb,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    execution_time_ms integer,
    notes text
);


ALTER TABLE public.backtest_results OWNER TO matthewmauer;

--
-- Name: backtest_results_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.backtest_results_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.backtest_results_id_seq OWNER TO matthewmauer;

--
-- Name: backtest_results_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.backtest_results_id_seq OWNED BY public.backtest_results.id;


--
-- Name: benchmark_measurements; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.benchmark_measurements (
    id integer NOT NULL,
    model_id text NOT NULL,
    prompt_tokens integer NOT NULL,
    response_tokens integer NOT NULL,
    response_time_ms integer NOT NULL,
    tokens_per_second real GENERATED ALWAYS AS (
CASE
    WHEN (response_time_ms > 0) THEN ((response_tokens)::real / ((response_time_ms)::real / (1000)::double precision))
    ELSE (0)::double precision
END) STORED,
    prompt_type text,
    was_cached boolean DEFAULT false,
    hardware_load real,
    measured_at timestamp with time zone DEFAULT now(),
    measurement_source text,
    usage_log_id integer
);


ALTER TABLE public.benchmark_measurements OWNER TO matthewmauer;

--
-- Name: TABLE benchmark_measurements; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.benchmark_measurements IS 'Individual throughput measurements for statistical analysis';


--
-- Name: benchmark_measurements_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.benchmark_measurements_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.benchmark_measurements_id_seq OWNER TO matthewmauer;

--
-- Name: benchmark_measurements_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.benchmark_measurements_id_seq OWNED BY public.benchmark_measurements.id;


--
-- Name: biometric_challenges; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.biometric_challenges (
    challenge_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    challenge text NOT NULL,
    type text NOT NULL,
    expires_at timestamp without time zone NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.biometric_challenges OWNER TO matthewmauer;

--
-- Name: TABLE biometric_challenges; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.biometric_challenges IS 'WebAuthn challenges for biometric auth';


--
-- Name: biometric_credentials; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.biometric_credentials (
    credential_id text NOT NULL,
    user_id uuid NOT NULL,
    public_key text NOT NULL,
    counter integer DEFAULT 0,
    device_type text,
    created_at timestamp without time zone DEFAULT now(),
    last_used timestamp without time zone
);


ALTER TABLE public.biometric_credentials OWNER TO matthewmauer;

--
-- Name: TABLE biometric_credentials; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.biometric_credentials IS 'WebAuthn biometric credentials (FaceID/TouchID)';


--
-- Name: block_time_profiles; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.block_time_profiles (
    id integer NOT NULL,
    profile_name text NOT NULL,
    profile_slug text NOT NULL,
    target_seconds integer NOT NULL,
    tolerance_seconds integer NOT NULL,
    auto_adjust boolean DEFAULT false,
    adjustment_window integer,
    description text,
    best_for text[],
    min_chunk_tokens integer,
    max_chunk_tokens integer,
    is_default boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.block_time_profiles OWNER TO matthewmauer;

--
-- Name: TABLE block_time_profiles; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.block_time_profiles IS 'Block time targets - Bitcoin (10min), RuneScape (600ms), Balanced (30s), Longform (2min)';


--
-- Name: block_time_profiles_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.block_time_profiles_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.block_time_profiles_id_seq OWNER TO matthewmauer;

--
-- Name: block_time_profiles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.block_time_profiles_id_seq OWNED BY public.block_time_profiles.id;


--
-- Name: blocked_handles; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.blocked_handles (
    block_id uuid DEFAULT gen_random_uuid() NOT NULL,
    handle_pattern character varying(50) NOT NULL,
    block_reason text NOT NULL,
    blocked_by_admin text,
    notes text,
    blocked_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.blocked_handles OWNER TO matthewmauer;

--
-- Name: bounce_analytics_by_page; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.bounce_analytics_by_page AS
 SELECT visit_sessions.page,
    count(*) AS total_sessions,
    sum(
        CASE
            WHEN visit_sessions.bounce_detected THEN 1
            ELSE 0
        END) AS bounced_sessions,
    round(((100.0 * (sum(
        CASE
            WHEN visit_sessions.bounce_detected THEN 1
            ELSE 0
        END))::numeric) / (NULLIF(count(*), 0))::numeric), 2) AS bounce_rate_percent,
    avg(
        CASE
            WHEN visit_sessions.bounce_detected THEN visit_sessions.bounce_time_ms
            ELSE NULL::integer
        END) AS avg_bounce_time_ms,
    count(DISTINCT visit_sessions.bounce_reason) AS unique_bounce_reasons
   FROM public.visit_sessions
  WHERE (visit_sessions.page IS NOT NULL)
  GROUP BY visit_sessions.page
  ORDER BY (round(((100.0 * (sum(
        CASE
            WHEN visit_sessions.bounce_detected THEN 1
            ELSE 0
        END))::numeric) / (NULLIF(count(*), 0))::numeric), 2)) DESC;


ALTER TABLE public.bounce_analytics_by_page OWNER TO matthewmauer;

--
-- Name: brand_bot_posts; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.brand_bot_posts (
    id integer NOT NULL,
    domain character varying(255) NOT NULL,
    thread_id integer,
    template_id integer,
    domain_id integer,
    title character varying(1000) NOT NULL,
    body text NOT NULL,
    variables_used jsonb DEFAULT '{}'::jsonb,
    posted_at timestamp without time zone DEFAULT now(),
    upvotes integer DEFAULT 0,
    downvotes integer DEFAULT 0,
    comment_count integer DEFAULT 0,
    engagement_score double precision DEFAULT 0.0,
    marked_as_bot boolean DEFAULT true,
    active boolean DEFAULT true
);


ALTER TABLE public.brand_bot_posts OWNER TO matthewmauer;

--
-- Name: TABLE brand_bot_posts; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.brand_bot_posts IS 'Bot posts about YOUR brands (ALWAYS marked as bot content)';


--
-- Name: brand_discussion_templates; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.brand_discussion_templates (
    id integer NOT NULL,
    slug character varying(255) NOT NULL,
    template_type character varying(100),
    title_template character varying(1000) NOT NULL,
    body_template text NOT NULL,
    variables jsonb DEFAULT '{}'::jsonb,
    suitable_for_domains integer[],
    engagement_potential integer DEFAULT 5,
    used_count integer DEFAULT 0,
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.brand_discussion_templates OWNER TO matthewmauer;

--
-- Name: TABLE brand_discussion_templates; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.brand_discussion_templates IS 'Discussion templates for YOUR brands';


--
-- Name: brand_domains; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.brand_domains (
    id integer NOT NULL,
    slug character varying(255) NOT NULL,
    name character varying(500) NOT NULL,
    ecosystem character varying(255),
    focus_area character varying(100),
    founded_year integer,
    creator character varying(255),
    description text,
    complexity_level integer DEFAULT 5,
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.brand_domains OWNER TO matthewmauer;

--
-- Name: TABLE brand_domains; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.brand_domains IS 'YOUR brand domains (not video games)';


--
-- Name: brand_ideas; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.brand_ideas (
    id integer NOT NULL,
    profile_id integer NOT NULL,
    brand_name character varying(255) NOT NULL,
    tagline text,
    description text NOT NULL,
    target_audience text,
    unique_value_prop text,
    business_model character varying(100),
    revenue_streams text[],
    brand_personality text[],
    brand_values text[],
    competitors text[],
    differentiation text,
    viability_score integer,
    actionability_score integer,
    bonus_amount numeric(10,2) DEFAULT 0.00,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.brand_ideas OWNER TO matthewmauer;

--
-- Name: brand_ideas_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.brand_ideas_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.brand_ideas_id_seq OWNER TO matthewmauer;

--
-- Name: brand_ideas_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.brand_ideas_id_seq OWNED BY public.brand_ideas.id;


--
-- Name: brand_knowledge; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.brand_knowledge (
    id integer NOT NULL,
    domain_id integer,
    slug character varying(255) NOT NULL,
    title character varying(500) NOT NULL,
    knowledge_type character varying(100),
    content text NOT NULL,
    source character varying(500),
    related_characters integer[],
    related_events integer[],
    related_locations integer[],
    interpretation_difficulty integer DEFAULT 5,
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.brand_knowledge OWNER TO matthewmauer;

--
-- Name: TABLE brand_knowledge; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.brand_knowledge IS 'Brand knowledge and philosophy (not game lore)';


--
-- Name: brand_milestones; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.brand_milestones (
    id integer NOT NULL,
    domain_id integer,
    slug character varying(255) NOT NULL,
    name character varying(500) NOT NULL,
    milestone_type character varying(100),
    timeline character varying(255),
    project_scope character varying(500),
    description text,
    participants integer[],
    consequences text,
    significance integer DEFAULT 5,
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.brand_milestones OWNER TO matthewmauer;

--
-- Name: TABLE brand_milestones; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.brand_milestones IS 'Major brand milestones (not game events)';


--
-- Name: brand_personas; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.brand_personas (
    id integer NOT NULL,
    domain_id integer,
    slug character varying(255) NOT NULL,
    name character varying(500) NOT NULL,
    role character varying(100),
    persona_type character varying(100),
    domain_affiliation character varying(255),
    backstory text,
    motivations text,
    relationships jsonb DEFAULT '[]'::jsonb,
    key_quotes text[],
    image_url character varying(1000),
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.brand_personas OWNER TO matthewmauer;

--
-- Name: TABLE brand_personas; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.brand_personas IS 'Brand personas and AI agents (not game characters)';


--
-- Name: brand_projects; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.brand_projects (
    id integer NOT NULL,
    domain_id integer,
    slug character varying(255) NOT NULL,
    name character varying(500) NOT NULL,
    project_type character varying(100),
    parent_project_id integer,
    description text,
    contributors character varying(500)[],
    significance text,
    secrets text,
    related_events integer[],
    map_url character varying(1000),
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.brand_projects OWNER TO matthewmauer;

--
-- Name: TABLE brand_projects; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.brand_projects IS 'Brand projects and platforms (not game locations)';


--
-- Name: price_correlations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_correlations (
    id bigint NOT NULL,
    symbol1 character varying(20) NOT NULL,
    symbol2 character varying(20) NOT NULL,
    correlation numeric(10,4) NOT NULL,
    strength character varying(20) NOT NULL,
    relationship character varying(20) NOT NULL,
    data_points integer NOT NULL,
    timeframe character varying(10) NOT NULL,
    calculated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.price_correlations OWNER TO matthewmauer;

--
-- Name: TABLE price_correlations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.price_correlations IS 'Tracks price correlations between asset pairs over different timeframes';


--
-- Name: COLUMN price_correlations.correlation; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.price_correlations.correlation IS 'Pearson correlation coefficient (-1 to 1)';


--
-- Name: COLUMN price_correlations.strength; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.price_correlations.strength IS 'strong (|r|>0.7), moderate (|r|>0.4), or weak';


--
-- Name: COLUMN price_correlations.relationship; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.price_correlations.relationship IS 'positive (r>0.4), inverse (r<-0.4), or neutral';


--
-- Name: btc_correlations; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.btc_correlations AS
 SELECT
        CASE
            WHEN ((price_correlations.symbol1)::text = 'BTC'::text) THEN price_correlations.symbol2
            WHEN ((price_correlations.symbol2)::text = 'BTC'::text) THEN price_correlations.symbol1
            ELSE NULL::character varying
        END AS asset,
    price_correlations.correlation,
    price_correlations.strength,
    price_correlations.relationship,
    price_correlations.timeframe,
    price_correlations.calculated_at
   FROM public.price_correlations
  WHERE ((((price_correlations.symbol1)::text = 'BTC'::text) OR ((price_correlations.symbol2)::text = 'BTC'::text)) AND ((price_correlations.timeframe)::text = '24h'::text))
  ORDER BY price_correlations.calculated_at DESC;


ALTER TABLE public.btc_correlations OWNER TO matthewmauer;

--
-- Name: VIEW btc_correlations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.btc_correlations IS 'BTC correlation with all other tracked assets';


--
-- Name: bucket_comments; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.bucket_comments (
    comment_id integer NOT NULL,
    bucket_id text NOT NULL,
    version integer NOT NULL,
    author text NOT NULL,
    author_type text,
    comment_text text NOT NULL,
    comment_type text,
    related_reasoning_id integer,
    related_todo_id integer,
    related_request_id text,
    parent_comment_id integer,
    thread_depth integer DEFAULT 0,
    "timestamp" timestamp without time zone DEFAULT now(),
    edited_at timestamp without time zone,
    tags text[],
    CONSTRAINT bucket_comments_author_type_check CHECK ((author_type = ANY (ARRAY['human'::text, 'ai'::text, 'system'::text])))
);


ALTER TABLE public.bucket_comments OWNER TO matthewmauer;

--
-- Name: bucket_comments_comment_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.bucket_comments_comment_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bucket_comments_comment_id_seq OWNER TO matthewmauer;

--
-- Name: bucket_comments_comment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.bucket_comments_comment_id_seq OWNED BY public.bucket_comments.comment_id;


--
-- Name: bucket_database_stats; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.bucket_database_stats (
    id integer NOT NULL,
    bucket_id character varying(50) NOT NULL,
    bucket_name character varying(255),
    total_tables integer DEFAULT 0,
    total_records bigint DEFAULT 0,
    database_size_mb numeric(10,2) DEFAULT 0,
    records_created_today integer DEFAULT 0,
    records_updated_today integer DEFAULT 0,
    records_deleted_today integer DEFAULT 0,
    queries_today integer DEFAULT 0,
    top_tables jsonb DEFAULT '[]'::jsonb,
    last_write_at timestamp without time zone,
    last_read_at timestamp without time zone,
    computed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.bucket_database_stats OWNER TO matthewmauer;

--
-- Name: bucket_database_stats_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.bucket_database_stats_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bucket_database_stats_id_seq OWNER TO matthewmauer;

--
-- Name: bucket_database_stats_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.bucket_database_stats_id_seq OWNED BY public.bucket_database_stats.id;


--
-- Name: bucket_instances; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.bucket_instances (
    bucket_id text NOT NULL,
    bucket_name text NOT NULL,
    bucket_slug text NOT NULL,
    category text NOT NULL,
    domain_context text,
    domain_url text,
    ollama_model text NOT NULL,
    model_family text,
    model_version text,
    workflow_id text,
    workflow_config jsonb,
    profile_config jsonb,
    total_requests integer DEFAULT 0,
    successful_requests integer DEFAULT 0,
    failed_requests integer DEFAULT 0,
    total_cost_usd numeric(10,6) DEFAULT 0,
    avg_response_time_ms real,
    current_version integer DEFAULT 1,
    status text DEFAULT 'active'::text,
    minio_bucket_path text,
    description text,
    tags text[],
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT bucket_instances_status_check CHECK ((status = ANY (ARRAY['active'::text, 'paused'::text, 'testing'::text, 'archived'::text])))
);


ALTER TABLE public.bucket_instances OWNER TO matthewmauer;

--
-- Name: bucket_reasoning_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.bucket_reasoning_log (
    reasoning_id integer NOT NULL,
    bucket_id text NOT NULL,
    version integer NOT NULL,
    decision_type text NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now(),
    request_id text,
    prompt_text text,
    user_intent text,
    reasoning text NOT NULL,
    alternatives_considered jsonb,
    decision_factors jsonb,
    decision_made text NOT NULL,
    outcome text,
    outcome_metrics jsonb,
    should_repeat boolean,
    lessons_learned text,
    created_by text,
    tags text[]
);


ALTER TABLE public.bucket_reasoning_log OWNER TO matthewmauer;

--
-- Name: bucket_reasoning_log_reasoning_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.bucket_reasoning_log_reasoning_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bucket_reasoning_log_reasoning_id_seq OWNER TO matthewmauer;

--
-- Name: bucket_reasoning_log_reasoning_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.bucket_reasoning_log_reasoning_id_seq OWNED BY public.bucket_reasoning_log.reasoning_id;


--
-- Name: bucket_todos; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.bucket_todos (
    todo_id integer NOT NULL,
    bucket_id text NOT NULL,
    version integer NOT NULL,
    title text NOT NULL,
    description text,
    priority integer DEFAULT 50,
    status text DEFAULT 'pending'::text,
    assigned_to text,
    why_needed text,
    blocking_reason text,
    created_at timestamp without time zone DEFAULT now(),
    started_at timestamp without time zone,
    completed_at timestamp without time zone,
    estimated_effort text,
    actual_effort text,
    related_reasoning_id integer,
    related_request_id text,
    tags text[],
    CONSTRAINT bucket_todos_priority_check CHECK (((priority >= 0) AND (priority <= 100))),
    CONSTRAINT bucket_todos_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text, 'cancelled'::text, 'blocked'::text])))
);


ALTER TABLE public.bucket_todos OWNER TO matthewmauer;

--
-- Name: bucket_todos_todo_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.bucket_todos_todo_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bucket_todos_todo_id_seq OWNER TO matthewmauer;

--
-- Name: bucket_todos_todo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.bucket_todos_todo_id_seq OWNED BY public.bucket_todos.todo_id;


--
-- Name: bucket_versions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.bucket_versions (
    version_id integer NOT NULL,
    bucket_id text NOT NULL,
    version_number integer NOT NULL,
    version_name text,
    version_type text,
    config_snapshot jsonb NOT NULL,
    changes_summary text NOT NULL,
    reasoning text NOT NULL,
    config_diff jsonb,
    metrics jsonb,
    improvement_over_previous jsonb,
    status text DEFAULT 'active'::text,
    created_at timestamp without time zone DEFAULT now(),
    created_by text,
    tags text[],
    CONSTRAINT bucket_versions_status_check CHECK ((status = ANY (ARRAY['active'::text, 'archived'::text, 'rolled_back'::text])))
);


ALTER TABLE public.bucket_versions OWNER TO matthewmauer;

--
-- Name: bucket_versions_version_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.bucket_versions_version_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bucket_versions_version_id_seq OWNER TO matthewmauer;

--
-- Name: bucket_versions_version_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.bucket_versions_version_id_seq OWNED BY public.bucket_versions.version_id;


--
-- Name: campaign_performance; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.campaign_performance AS
 SELECT c.campaign_id,
    c.campaign_name,
    c.advertiser_id,
    c.target_vertical,
    c.status,
    c.use_client_keys,
    round(((c.budget_cents)::numeric / (100)::numeric), 2) AS budget_dollars,
    round(((c.spent_cents)::numeric / (100)::numeric), 2) AS spent_dollars,
    round(((c.remaining_cents)::numeric / (100)::numeric), 2) AS remaining_dollars,
    c.total_impressions,
    c.total_clicks,
    c.total_conversions,
    round((c.conversion_rate * (100)::numeric), 2) AS conversion_rate_percent,
    round(((c.total_revenue_cents)::numeric / (100)::numeric), 2) AS revenue_dollars,
    round(((c.total_cost_cents)::numeric / (100)::numeric), 2) AS cost_dollars,
    round(((c.total_profit_cents)::numeric / (100)::numeric), 2) AS profit_dollars,
        CASE
            WHEN (c.total_cost_cents > 0) THEN round((((c.total_profit_cents)::numeric / (c.total_cost_cents)::numeric) * (100)::numeric), 2)
            ELSE (0)::numeric
        END AS roi_percent,
    c.starts_at,
    c.ends_at,
    c.created_at
   FROM public.ad_campaigns c
  ORDER BY c.created_at DESC;


ALTER TABLE public.campaign_performance OWNER TO matthewmauer;

--
-- Name: campaign_variants; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.campaign_variants (
    variant_id uuid DEFAULT gen_random_uuid() NOT NULL,
    campaign_id uuid NOT NULL,
    experiment_variant_id integer,
    variant_name character varying(100) NOT NULL,
    variant_description text,
    ai_provider character varying(50),
    ai_model character varying(100),
    system_prompt text,
    temperature numeric(3,2) DEFAULT 0.7,
    max_tokens integer DEFAULT 500,
    traffic_weight numeric(5,4) DEFAULT 0.33,
    impressions integer DEFAULT 0,
    clicks integer DEFAULT 0,
    conversions integer DEFAULT 0,
    revenue_cents integer DEFAULT 0,
    cost_cents integer DEFAULT 0,
    ctr numeric(5,4) GENERATED ALWAYS AS (
CASE
    WHEN (impressions > 0) THEN ((clicks)::numeric / (impressions)::numeric)
    ELSE (0)::numeric
END) STORED,
    conversion_rate numeric(5,4) GENERATED ALWAYS AS (
CASE
    WHEN (clicks > 0) THEN ((conversions)::numeric / (clicks)::numeric)
    ELSE (0)::numeric
END) STORED,
    roi numeric(10,4) GENERATED ALWAYS AS (
CASE
    WHEN (cost_cents > 0) THEN (((revenue_cents - cost_cents))::numeric / (cost_cents)::numeric)
    ELSE (0)::numeric
END) STORED,
    is_active boolean DEFAULT true,
    is_winner boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.campaign_variants OWNER TO matthewmauer;

--
-- Name: TABLE campaign_variants; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.campaign_variants IS 'A/B test variants for campaigns with AI model configurations';


--
-- Name: challenge_details; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.challenge_details AS
SELECT
    NULL::uuid AS challenge_id,
    NULL::text AS challenge_prompt,
    NULL::character varying(50) AS challenge_type,
    NULL::character varying(50) AS status,
    NULL::timestamp without time zone AS created_at,
    NULL::bigint AS total_implementations,
    NULL::bigint AS judged_implementations,
    NULL::numeric AS highest_score,
    NULL::numeric AS avg_score,
    NULL::character varying(255) AS winner_domain,
    NULL::character varying(255) AS winner_brand,
    NULL::numeric(10,2) AS winner_score;


ALTER TABLE public.challenge_details OWNER TO matthewmauer;

--
-- Name: domain_challenges; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_challenges (
    challenge_id uuid DEFAULT gen_random_uuid() NOT NULL,
    challenge_prompt text NOT NULL,
    challenge_type character varying(50) DEFAULT 'component'::character varying,
    context jsonb DEFAULT '{}'::jsonb,
    expected_services text[],
    created_at timestamp without time zone DEFAULT now(),
    completed_at timestamp without time zone,
    winner_domain_id uuid,
    winner_score numeric(10,2),
    status character varying(50) DEFAULT 'pending'::character varying
);


ALTER TABLE public.domain_challenges OWNER TO matthewmauer;

--
-- Name: domain_implementations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_implementations (
    implementation_id uuid DEFAULT gen_random_uuid() NOT NULL,
    challenge_id uuid NOT NULL,
    domain_id uuid NOT NULL,
    model_name character varying(255) DEFAULT 'codellama:7b'::character varying,
    implementation_code text NOT NULL,
    implementation_type character varying(50) DEFAULT 'html'::character varying,
    file_name character varying(255),
    description text,
    generation_time_ms integer,
    created_at timestamp without time zone DEFAULT now(),
    code_length integer,
    has_comments boolean DEFAULT false,
    uses_domain_colors boolean DEFAULT false,
    uses_expected_services boolean DEFAULT false,
    syntax_valid boolean DEFAULT true,
    swipe_right_count integer DEFAULT 0,
    swipe_left_count integer DEFAULT 0,
    feedback_count integer DEFAULT 0,
    total_score numeric(10,2) DEFAULT 0
);


ALTER TABLE public.domain_implementations OWNER TO matthewmauer;

--
-- Name: challenge_leaderboard; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.challenge_leaderboard AS
 SELECT dp.domain_name,
    dp.brand_name,
    dp.primary_color,
    count(DISTINCT di.challenge_id) AS challenges_completed,
    count(DISTINCT
        CASE
            WHEN (dc.winner_domain_id = dp.domain_id) THEN dc.challenge_id
            ELSE NULL::uuid
        END) AS wins,
    round(avg(di.total_score), 2) AS avg_score,
    sum(di.swipe_right_count) AS total_likes,
    sum(di.swipe_left_count) AS total_dislikes,
    round((((sum(di.swipe_right_count))::numeric / (NULLIF(sum((di.swipe_right_count + di.swipe_left_count)), 0))::numeric) * (100)::numeric), 2) AS win_rate_pct
   FROM ((public.domain_portfolio dp
     LEFT JOIN public.domain_implementations di ON ((dp.domain_id = di.domain_id)))
     LEFT JOIN public.domain_challenges dc ON ((di.challenge_id = dc.challenge_id)))
  WHERE ((dp.status)::text = 'active'::text)
  GROUP BY dp.domain_id, dp.domain_name, dp.brand_name, dp.primary_color
  ORDER BY (count(DISTINCT
        CASE
            WHEN (dc.winner_domain_id = dp.domain_id) THEN dc.challenge_id
            ELSE NULL::uuid
        END)) DESC, (round(avg(di.total_score), 2)) DESC;


ALTER TABLE public.challenge_leaderboard OWNER TO matthewmauer;

--
-- Name: knowledge_chats; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.knowledge_chats (
    id integer NOT NULL,
    session_id character varying(100) NOT NULL,
    user_query text NOT NULL,
    ai_response text NOT NULL,
    source_notes integer[],
    context_chunks integer[],
    model character varying(100),
    latency_ms integer,
    confidence_score numeric(3,2),
    voice_input boolean DEFAULT false,
    voice_output boolean DEFAULT false,
    audio_path text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.knowledge_chats OWNER TO matthewmauer;

--
-- Name: chat_sessions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.chat_sessions AS
 SELECT knowledge_chats.session_id,
    count(*) AS message_count,
    min(knowledge_chats.created_at) AS started_at,
    max(knowledge_chats.created_at) AS last_message_at,
    ( SELECT count(DISTINCT note_id.note_id) AS count
           FROM unnest(array_agg(knowledge_chats.source_notes)) note_id(note_id)) AS unique_notes_referenced
   FROM public.knowledge_chats
  GROUP BY knowledge_chats.session_id
  ORDER BY (max(knowledge_chats.created_at)) DESC;


ALTER TABLE public.chat_sessions OWNER TO matthewmauer;

--
-- Name: code_embeddings; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.code_embeddings (
    id integer NOT NULL,
    snippet_id integer NOT NULL,
    embedding public.vector(1536),
    embedding_model character varying(100) DEFAULT 'text-embedding-ada-002'::character varying,
    embedding_source character varying(50) DEFAULT 'combined'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.code_embeddings OWNER TO matthewmauer;

--
-- Name: code_embeddings_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.code_embeddings_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.code_embeddings_id_seq OWNER TO matthewmauer;

--
-- Name: code_embeddings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.code_embeddings_id_seq OWNED BY public.code_embeddings.id;


--
-- Name: code_repositories; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.code_repositories (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    source character varying(50) NOT NULL,
    repo_url text,
    local_path text,
    language character varying(50),
    description text,
    last_indexed timestamp without time zone,
    file_count integer DEFAULT 0,
    snippet_count integer DEFAULT 0,
    is_active boolean DEFAULT true,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.code_repositories OWNER TO matthewmauer;

--
-- Name: code_repositories_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.code_repositories_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.code_repositories_id_seq OWNER TO matthewmauer;

--
-- Name: code_repositories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.code_repositories_id_seq OWNED BY public.code_repositories.id;


--
-- Name: code_room_messages; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.code_room_messages (
    id integer NOT NULL,
    room_id integer,
    user_id integer,
    message text NOT NULL,
    message_type character varying(50) DEFAULT 'text'::character varying,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.code_room_messages OWNER TO matthewmauer;

--
-- Name: code_room_messages_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.code_room_messages_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.code_room_messages_id_seq OWNER TO matthewmauer;

--
-- Name: code_room_messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.code_room_messages_id_seq OWNED BY public.code_room_messages.id;


--
-- Name: code_room_repositories; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.code_room_repositories (
    id integer NOT NULL,
    room_id integer,
    repo_id integer,
    added_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.code_room_repositories OWNER TO matthewmauer;

--
-- Name: code_room_repositories_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.code_room_repositories_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.code_room_repositories_id_seq OWNER TO matthewmauer;

--
-- Name: code_room_repositories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.code_room_repositories_id_seq OWNED BY public.code_room_repositories.id;


--
-- Name: code_rooms; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.code_rooms (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    slug character varying(255) NOT NULL,
    description text,
    room_type character varying(50) DEFAULT 'language'::character varying,
    primary_language character varying(50),
    tags text[],
    ollama_model_name character varying(255),
    model_training_status character varying(50) DEFAULT 'pending'::character varying,
    last_trained timestamp without time zone,
    repo_count integer DEFAULT 0,
    snippet_count integer DEFAULT 0,
    member_count integer DEFAULT 0,
    is_public boolean DEFAULT true,
    created_by integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.code_rooms OWNER TO matthewmauer;

--
-- Name: code_rooms_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.code_rooms_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.code_rooms_id_seq OWNER TO matthewmauer;

--
-- Name: code_rooms_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.code_rooms_id_seq OWNED BY public.code_rooms.id;


--
-- Name: code_snippets; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.code_snippets (
    id integer NOT NULL,
    repo_id integer,
    file_path text NOT NULL,
    filename character varying(255) NOT NULL,
    language character varying(50) NOT NULL,
    code text NOT NULL,
    function_name character varying(255),
    snippet_type character varying(50),
    docstring text,
    description text,
    tags text[],
    dependencies text[],
    example_usage text,
    start_line integer,
    end_line integer,
    search_vector tsvector,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.code_snippets OWNER TO matthewmauer;

--
-- Name: code_snippets_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.code_snippets_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.code_snippets_id_seq OWNER TO matthewmauer;

--
-- Name: code_snippets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.code_snippets_id_seq OWNED BY public.code_snippets.id;


--
-- Name: code_usage; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.code_usage (
    id integer NOT NULL,
    snippet_id integer,
    used_in_response integer,
    query text,
    context character varying(100),
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.code_usage OWNER TO matthewmauer;

--
-- Name: code_usage_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.code_usage_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.code_usage_id_seq OWNER TO matthewmauer;

--
-- Name: code_usage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.code_usage_id_seq OWNED BY public.code_usage.id;


--
-- Name: combined_scores; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.combined_scores AS
SELECT
    NULL::integer AS submission_id,
    NULL::character varying(255) AS user_id,
    NULL::integer AS challenge_id,
    NULL::character varying(500) AS file_name,
    NULL::character varying(50) AS content_type,
    NULL::text[] AS grading_tracks,
    NULL::numeric AS average_score,
    NULL::bigint AS tracks_graded,
    NULL::jsonb AS scores_by_track,
    NULL::timestamp without time zone AS created_at;


ALTER TABLE public.combined_scores OWNER TO matthewmauer;

--
-- Name: compaction_results; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.compaction_results (
    id integer NOT NULL,
    project jsonb NOT NULL,
    stages jsonb NOT NULL,
    timing jsonb NOT NULL,
    final_scores jsonb,
    errors jsonb DEFAULT '[]'::jsonb,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.compaction_results OWNER TO matthewmauer;

--
-- Name: TABLE compaction_results; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.compaction_results IS 'Results from code compaction and grading pipeline';


--
-- Name: COLUMN compaction_results.project; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.compaction_results.project IS 'Project metadata: title, description';


--
-- Name: COLUMN compaction_results.stages; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.compaction_results.stages IS 'Pipeline stages: compaction, preprocessing, localGrading, ollama';


--
-- Name: COLUMN compaction_results.timing; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.compaction_results.timing IS 'Timing data for each stage in milliseconds';


--
-- Name: COLUMN compaction_results.final_scores; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.compaction_results.final_scores IS 'Final scores: local (math-based), ollama (AI-based), combined';


--
-- Name: COLUMN compaction_results.errors; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.compaction_results.errors IS 'Array of errors that occurred during pipeline';


--
-- Name: compaction_results_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.compaction_results_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.compaction_results_id_seq OWNER TO matthewmauer;

--
-- Name: compaction_results_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.compaction_results_id_seq OWNED BY public.compaction_results.id;


--
-- Name: compaction_statistics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.compaction_statistics AS
 SELECT count(*) AS total_compactions,
    avg((((((compaction_results.stages -> 'compaction'::text) -> 'stats'::text) -> 'reduction'::text) ->> 'tokens'::text))::numeric) AS avg_token_reduction,
    avg((((((compaction_results.stages -> 'compaction'::text) -> 'stats'::text) -> 'reduction'::text) ->> 'size'::text))::numeric) AS avg_size_reduction,
    avg(((compaction_results.final_scores ->> 'local'::text))::numeric) AS avg_local_score,
    avg(((compaction_results.final_scores ->> 'ollama'::text))::numeric) AS avg_ollama_score,
    avg(((compaction_results.final_scores ->> 'combined'::text))::numeric) AS avg_combined_score,
    sum(((compaction_results.timing ->> 'total'::text))::numeric) AS total_processing_time_ms,
    avg(((compaction_results.timing ->> 'total'::text))::numeric) AS avg_processing_time_ms
   FROM public.compaction_results
  WHERE ((compaction_results.stages -> 'compaction'::text) IS NOT NULL);


ALTER TABLE public.compaction_statistics OWNER TO matthewmauer;

--
-- Name: component_usage_stats; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.component_usage_stats (
    stat_id integer NOT NULL,
    component_type text NOT NULL,
    component_id text NOT NULL,
    total_uses integer DEFAULT 0,
    successful_uses integer DEFAULT 0,
    failed_uses integer DEFAULT 0,
    success_rate real DEFAULT 0,
    avg_execution_time_ms real,
    min_execution_time_ms integer,
    max_execution_time_ms integer,
    unique_users integer DEFAULT 0,
    unique_sessions integer DEFAULT 0,
    unique_sources integer DEFAULT 0,
    first_used_at timestamp without time zone,
    last_used_at timestamp without time zone,
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.component_usage_stats OWNER TO matthewmauer;

--
-- Name: TABLE component_usage_stats; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.component_usage_stats IS 'Aggregated usage statistics for each component';


--
-- Name: component_performance; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.component_performance AS
 SELECT component_usage_stats.component_type,
    component_usage_stats.component_id,
    component_usage_stats.total_uses,
    component_usage_stats.success_rate,
    component_usage_stats.avg_execution_time_ms,
    component_usage_stats.min_execution_time_ms,
    component_usage_stats.max_execution_time_ms,
    component_usage_stats.last_used_at
   FROM public.component_usage_stats
  WHERE (component_usage_stats.total_uses >= 10)
  ORDER BY component_usage_stats.success_rate DESC, component_usage_stats.avg_execution_time_ms;


ALTER TABLE public.component_performance OWNER TO matthewmauer;

--
-- Name: component_relationships; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.component_relationships (
    relationship_id integer NOT NULL,
    source_type text NOT NULL,
    source_id text NOT NULL,
    target_type text NOT NULL,
    target_id text NOT NULL,
    relationship_type text NOT NULL,
    user_id uuid,
    session_id text,
    request_id uuid,
    metadata jsonb DEFAULT '{}'::jsonb,
    execution_time_ms integer,
    success boolean,
    error_message text,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT component_relationships_relationship_type_check CHECK ((relationship_type = ANY (ARRAY['uses_pattern'::text, 'uses_model'::text, 'uses_bucket'::text, 'uses_domain'::text, 'uses_preset'::text, 'uses_artifact'::text, 'depends_on'::text, 'references'::text, 'extends'::text]))),
    CONSTRAINT component_relationships_source_type_check CHECK ((source_type = ANY (ARRAY['request'::text, 'bucket'::text, 'artifact'::text, 'workflow'::text, 'pattern'::text]))),
    CONSTRAINT component_relationships_target_type_check CHECK ((target_type = ANY (ARRAY['pattern'::text, 'model'::text, 'bucket'::text, 'domain'::text, 'preset'::text, 'artifact'::text, 'workflow'::text])))
);


ALTER TABLE public.component_relationships OWNER TO matthewmauer;

--
-- Name: TABLE component_relationships; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.component_relationships IS 'Tracks all component usage relationships (xrefs) throughout the system';


--
-- Name: component_relationships_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.component_relationships_relationship_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.component_relationships_relationship_id_seq OWNER TO matthewmauer;

--
-- Name: component_relationships_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.component_relationships_relationship_id_seq OWNED BY public.component_relationships.relationship_id;


--
-- Name: component_usage_stats_stat_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.component_usage_stats_stat_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.component_usage_stats_stat_id_seq OWNER TO matthewmauer;

--
-- Name: component_usage_stats_stat_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.component_usage_stats_stat_id_seq OWNED BY public.component_usage_stats.stat_id;


--
-- Name: contact_exports; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.contact_exports (
    id integer NOT NULL,
    export_format character varying(50) NOT NULL,
    profile_ids integer[],
    profile_count integer,
    file_path text,
    file_size bigint,
    filters jsonb DEFAULT '{}'::jsonb,
    session_id character varying(100),
    user_id character varying(100),
    downloaded boolean DEFAULT false,
    download_count integer DEFAULT 0,
    last_downloaded_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.contact_exports OWNER TO matthewmauer;

--
-- Name: contact_exports_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.contact_exports_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contact_exports_id_seq OWNER TO matthewmauer;

--
-- Name: contact_exports_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.contact_exports_id_seq OWNED BY public.contact_exports.id;


--
-- Name: published_content; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.published_content (
    id integer NOT NULL,
    title character varying(500) NOT NULL,
    slug character varying(255) NOT NULL,
    content_type character varying(50) NOT NULL,
    markdown_content text NOT NULL,
    html_content text,
    excerpt text,
    code_snippets integer[],
    source_repos integer[],
    tags text[],
    category character varying(100),
    language character varying(50),
    featured_image text,
    og_image text,
    meta_description text,
    status character varying(50) DEFAULT 'draft'::character varying,
    published_at timestamp without time zone,
    author character varying(255),
    view_count integer DEFAULT 0,
    guid character varying(255),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.published_content OWNER TO matthewmauer;

--
-- Name: content_feed; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.content_feed AS
 SELECT pc.id,
    pc.title,
    pc.slug,
    pc.content_type,
    pc.excerpt,
    pc.tags,
    pc.published_at,
    pc.view_count,
    array_length(pc.code_snippets, 1) AS code_snippet_count
   FROM public.published_content pc
  WHERE ((pc.status)::text = 'published'::text)
  ORDER BY pc.published_at DESC
 LIMIT 50;


ALTER TABLE public.content_feed OWNER TO matthewmauer;

--
-- Name: content_generation_queue; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.content_generation_queue (
    id integer NOT NULL,
    topic text NOT NULL,
    content_type character varying(50) NOT NULL,
    target_language character varying(50),
    target_repos integer[],
    status character varying(50) DEFAULT 'pending'::character varying,
    progress integer DEFAULT 0,
    result_content_id integer,
    user_prompt text,
    generation_params jsonb,
    started_at timestamp without time zone,
    completed_at timestamp without time zone,
    error_message text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.content_generation_queue OWNER TO matthewmauer;

--
-- Name: content_generation_queue_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.content_generation_queue_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.content_generation_queue_id_seq OWNER TO matthewmauer;

--
-- Name: content_generation_queue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.content_generation_queue_id_seq OWNED BY public.content_generation_queue.id;


--
-- Name: content_notifications; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.content_notifications (
    id integer NOT NULL,
    content_id integer,
    subscriber_id integer,
    method character varying(50) NOT NULL,
    status character varying(50) DEFAULT 'pending'::character varying,
    sent_at timestamp without time zone,
    error_message text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.content_notifications OWNER TO matthewmauer;

--
-- Name: content_notifications_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.content_notifications_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.content_notifications_id_seq OWNER TO matthewmauer;

--
-- Name: content_notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.content_notifications_id_seq OWNED BY public.content_notifications.id;


--
-- Name: content_subscribers; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.content_subscribers (
    id integer NOT NULL,
    email character varying(255) NOT NULL,
    name character varying(255),
    subscribed_to character varying(50)[] DEFAULT ARRAY['all'::text],
    notification_method character varying(50)[] DEFAULT ARRAY['email'::text],
    verified boolean DEFAULT false,
    verification_token character varying(255),
    unsubscribed boolean DEFAULT false,
    ip_address inet,
    user_agent text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.content_subscribers OWNER TO matthewmauer;

--
-- Name: content_subscribers_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.content_subscribers_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.content_subscribers_id_seq OWNER TO matthewmauer;

--
-- Name: content_subscribers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.content_subscribers_id_seq OWNED BY public.content_subscribers.id;


--
-- Name: context_drift_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.context_drift_log (
    drift_id integer NOT NULL,
    snapshot_id text NOT NULL,
    bucket_id text,
    domain_context text NOT NULL,
    drift_type text NOT NULL,
    drift_severity text DEFAULT 'low'::text,
    expected_value text,
    actual_value text,
    drift_magnitude real,
    performance_impact text,
    requests_affected integer,
    resolved boolean DEFAULT false,
    resolution_action text,
    resolved_at timestamp with time zone,
    resolved_by text,
    detected_at timestamp with time zone DEFAULT now(),
    CONSTRAINT context_drift_log_drift_severity_check CHECK ((drift_severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])))
);


ALTER TABLE public.context_drift_log OWNER TO matthewmauer;

--
-- Name: TABLE context_drift_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.context_drift_log IS 'Detect when domains drift from their snapshots';


--
-- Name: context_drift_log_drift_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.context_drift_log_drift_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.context_drift_log_drift_id_seq OWNER TO matthewmauer;

--
-- Name: context_drift_log_drift_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.context_drift_log_drift_id_seq OWNED BY public.context_drift_log.drift_id;


--
-- Name: context_lock_files; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.context_lock_files (
    lock_id text NOT NULL,
    snapshot_id text NOT NULL,
    lock_name text NOT NULL,
    lock_version text NOT NULL,
    model_dependencies jsonb NOT NULL,
    code_dependencies jsonb NOT NULL,
    external_dependencies jsonb,
    lock_hash text NOT NULL,
    verified boolean DEFAULT false,
    verification_date timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    created_by text
);


ALTER TABLE public.context_lock_files OWNER TO matthewmauer;

--
-- Name: TABLE context_lock_files; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.context_lock_files IS 'Exact dependencies at a point in time (package.lock equivalent)';


--
-- Name: conversations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.conversations (
    id integer NOT NULL,
    started_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    title text,
    messages jsonb NOT NULL,
    agents_used text[],
    message_count integer DEFAULT 0,
    last_agent character varying(100)
);


ALTER TABLE public.conversations OWNER TO matthewmauer;

--
-- Name: conversations_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.conversations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.conversations_id_seq OWNER TO matthewmauer;

--
-- Name: conversations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.conversations_id_seq OWNED BY public.conversations.id;


--
-- Name: cross_domain_analytics; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.cross_domain_analytics (
    event_id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    event_type character varying(50),
    source_domain_id uuid,
    target_domain_id uuid,
    utm_source character varying(255),
    utm_medium character varying(255),
    utm_campaign character varying(255),
    utm_content character varying(255),
    conversion_type character varying(50),
    conversion_value numeric(10,2),
    user_agent text,
    referrer text,
    page_path text,
    "timestamp" timestamp without time zone DEFAULT now()
);


ALTER TABLE public.cross_domain_analytics OWNER TO matthewmauer;

--
-- Name: TABLE cross_domain_analytics; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.cross_domain_analytics IS 'User journey tracking across the entire portfolio';


--
-- Name: conversion_funnel; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.conversion_funnel AS
 SELECT cross_domain_analytics.session_id,
    min(cross_domain_analytics."timestamp") AS first_touch,
    max(cross_domain_analytics."timestamp") AS last_touch,
    EXTRACT(epoch FROM (max(cross_domain_analytics."timestamp") - min(cross_domain_analytics."timestamp"))) AS session_duration_seconds,
    count(*) AS total_events,
    count(DISTINCT cross_domain_analytics.source_domain_id) AS domains_visited,
    max(
        CASE
            WHEN ((cross_domain_analytics.event_type)::text = ANY ((ARRAY['signup'::character varying, 'purchase'::character varying])::text[])) THEN 1
            ELSE 0
        END) AS converted,
    sum(cross_domain_analytics.conversion_value) AS total_value
   FROM public.cross_domain_analytics
  GROUP BY cross_domain_analytics.session_id
  ORDER BY (min(cross_domain_analytics."timestamp")) DESC;


ALTER TABLE public.conversion_funnel OWNER TO matthewmauer;

--
-- Name: council_model_stats; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.council_model_stats (
    model_name character varying(200) NOT NULL,
    total_sessions integer DEFAULT 0,
    total_proposals integer DEFAULT 0,
    avg_response_time_ms numeric(10,2),
    timeout_count integer DEFAULT 0,
    error_count integer DEFAULT 0,
    times_in_consensus integer DEFAULT 0,
    times_won_vote integer DEFAULT 0,
    debates_participated integer DEFAULT 0,
    debates_won integer DEFAULT 0,
    last_session_id uuid,
    last_seen timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.council_model_stats OWNER TO matthewmauer;

--
-- Name: TABLE council_model_stats; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.council_model_stats IS 'Aggregate performance statistics per model';


--
-- Name: council_workflows; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.council_workflows (
    workflow_id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    task_title character varying(500) NOT NULL,
    task_description text,
    task_type character varying(50),
    assigned_model character varying(200),
    priority integer DEFAULT 5,
    estimated_duration_minutes integer,
    depends_on uuid,
    blocks jsonb DEFAULT '[]'::jsonb,
    status character varying(50) DEFAULT 'pending'::character varying,
    task_metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    started_at timestamp with time zone,
    completed_at timestamp with time zone
);


ALTER TABLE public.council_workflows OWNER TO matthewmauer;

--
-- Name: TABLE council_workflows; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.council_workflows IS 'Breakdown of tasks from council consensus';


--
-- Name: council_session_summaries; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.council_session_summaries AS
 SELECT cs.session_id,
    cs.task,
    cs.task_type,
    cs.status,
    cs.model_count,
    count(DISTINCT cp.proposal_id) AS proposal_count,
    count(DISTINCT cd.debate_id) AS debate_count,
    count(DISTINCT cw.workflow_id) AS task_count,
    (cs.consensus ->> 'approach'::text) AS winning_approach,
    ((cs.vote_results -> 'winner'::text) ->> 'model'::text) AS winning_model,
    cs.duration_ms,
    cs.started_at,
    cs.completed_at
   FROM (((public.council_sessions cs
     LEFT JOIN public.council_proposals cp ON ((cp.session_id = cs.session_id)))
     LEFT JOIN public.council_debates cd ON ((cd.session_id = cs.session_id)))
     LEFT JOIN public.council_workflows cw ON ((cw.session_id = cs.session_id)))
  WHERE ((cs.status)::text = 'completed'::text)
  GROUP BY cs.session_id, cs.task, cs.task_type, cs.status, cs.model_count, cs.consensus, cs.vote_results, cs.duration_ms, cs.started_at, cs.completed_at;


ALTER TABLE public.council_session_summaries OWNER TO matthewmauer;

--
-- Name: council_themes; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.council_themes (
    theme_id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    theme_name character varying(200) NOT NULL,
    theme_description text,
    supporting_models jsonb DEFAULT '[]'::jsonb,
    support_count integer GENERATED ALWAYS AS (jsonb_array_length(supporting_models)) STORED,
    confidence numeric(3,2),
    rank integer,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.council_themes OWNER TO matthewmauer;

--
-- Name: TABLE council_themes; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.council_themes IS 'Extracted themes and approaches from proposals';


--
-- Name: credential_usage_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.credential_usage_log (
    id integer NOT NULL,
    credential_id integer,
    used_by character varying(255),
    operation character varying(100),
    success boolean,
    error_message text,
    ip_address inet,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.credential_usage_log OWNER TO matthewmauer;

--
-- Name: credential_usage_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.credential_usage_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.credential_usage_log_id_seq OWNER TO matthewmauer;

--
-- Name: credential_usage_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.credential_usage_log_id_seq OWNED BY public.credential_usage_log.id;


--
-- Name: curated_content; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.curated_content (
    id integer NOT NULL,
    external_id character varying(255) NOT NULL,
    title text NOT NULL,
    url text,
    description text,
    content text,
    source character varying(100) NOT NULL,
    source_icon character varying(10),
    author character varying(255),
    score integer DEFAULT 0,
    comments integer DEFAULT 0,
    topics text,
    tags text[],
    published_at timestamp without time zone,
    fetched_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    metadata jsonb
);


ALTER TABLE public.curated_content OWNER TO matthewmauer;

--
-- Name: TABLE curated_content; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.curated_content IS 'Cached aggregated content from all sources';


--
-- Name: curated_content_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.curated_content_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.curated_content_id_seq OWNER TO matthewmauer;

--
-- Name: curated_content_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.curated_content_id_seq OWNED BY public.curated_content.id;


--
-- Name: curation_configs; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.curation_configs (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    topics text,
    sources text,
    custom_rss text,
    frequency character varying(50) DEFAULT 'daily'::character varying,
    delivery_time time without time zone DEFAULT '09:00:00'::time without time zone,
    email character varying(255),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_fetched_at timestamp without time zone
);


ALTER TABLE public.curation_configs OWNER TO matthewmauer;

--
-- Name: TABLE curation_configs; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.curation_configs IS 'User content curation preferences and delivery settings';


--
-- Name: curation_configs_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.curation_configs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.curation_configs_id_seq OWNER TO matthewmauer;

--
-- Name: curation_configs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.curation_configs_id_seq OWNED BY public.curation_configs.id;


--
-- Name: curation_reading_history; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.curation_reading_history (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    content_id integer,
    read_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    read_duration integer,
    clicked boolean DEFAULT false,
    bookmarked boolean DEFAULT false,
    shared boolean DEFAULT false,
    rating integer,
    feedback text,
    CONSTRAINT curation_reading_history_rating_check CHECK (((rating >= 1) AND (rating <= 5)))
);


ALTER TABLE public.curation_reading_history OWNER TO matthewmauer;

--
-- Name: TABLE curation_reading_history; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.curation_reading_history IS 'User engagement with curated content';


--
-- Name: curation_reading_history_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.curation_reading_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.curation_reading_history_id_seq OWNER TO matthewmauer;

--
-- Name: curation_reading_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.curation_reading_history_id_seq OWNED BY public.curation_reading_history.id;


--
-- Name: data_normalization_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.data_normalization_log (
    log_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id character varying(255) NOT NULL,
    game_id uuid,
    task_type character varying(50) NOT NULL,
    original_value text NOT NULL,
    normalized_value text NOT NULL,
    corrections_applied text[],
    confidence_score numeric(3,2),
    was_correct boolean,
    feedback text,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.data_normalization_log OWNER TO matthewmauer;

--
-- Name: TABLE data_normalization_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.data_normalization_log IS 'Track data quality fixes - teaching data literacy';


--
-- Name: data_quality_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.data_quality_log (
    id integer NOT NULL,
    check_type character varying(50) NOT NULL,
    symbol character varying(20),
    asset_type character varying(20),
    status character varying(20) NOT NULL,
    issues_found integer DEFAULT 0,
    issues_fixed integer DEFAULT 0,
    details jsonb,
    checked_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.data_quality_log OWNER TO matthewmauer;

--
-- Name: data_quality_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.data_quality_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.data_quality_log_id_seq OWNER TO matthewmauer;

--
-- Name: data_quality_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.data_quality_log_id_seq OWNED BY public.data_quality_log.id;


--
-- Name: data_quality_stats; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.data_quality_stats AS
 SELECT data_normalization_log.user_id,
    data_normalization_log.task_type,
    count(*) AS total_normalizations,
    count(
        CASE
            WHEN (data_normalization_log.was_correct = true) THEN 1
            ELSE NULL::integer
        END) AS correct_count,
    round((((count(
        CASE
            WHEN (data_normalization_log.was_correct = true) THEN 1
            ELSE NULL::integer
        END))::numeric / (NULLIF(count(*), 0))::numeric) * (100)::numeric), 2) AS accuracy_percentage,
    (avg(data_normalization_log.confidence_score))::numeric(3,2) AS avg_confidence
   FROM public.data_normalization_log
  GROUP BY data_normalization_log.user_id, data_normalization_log.task_type
  ORDER BY data_normalization_log.user_id, data_normalization_log.task_type;


ALTER TABLE public.data_quality_stats OWNER TO matthewmauer;

--
-- Name: VIEW data_quality_stats; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.data_quality_stats IS 'Track data normalization accuracy by user';


--
-- Name: data_quality_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.data_quality_summary AS
 SELECT data_quality_log.symbol,
    data_quality_log.asset_type,
    data_quality_log.check_type,
    count(*) AS total_checks,
    sum(
        CASE
            WHEN ((data_quality_log.status)::text = 'pass'::text) THEN 1
            ELSE 0
        END) AS passed,
    sum(
        CASE
            WHEN ((data_quality_log.status)::text = 'warning'::text) THEN 1
            ELSE 0
        END) AS warnings,
    sum(
        CASE
            WHEN ((data_quality_log.status)::text = 'fail'::text) THEN 1
            ELSE 0
        END) AS failures,
    max(data_quality_log.checked_at) AS last_check
   FROM public.data_quality_log
  WHERE (data_quality_log.checked_at > (now() - '7 days'::interval))
  GROUP BY data_quality_log.symbol, data_quality_log.asset_type, data_quality_log.check_type
  ORDER BY (sum(
        CASE
            WHEN ((data_quality_log.status)::text = 'fail'::text) THEN 1
            ELSE 0
        END)) DESC, (sum(
        CASE
            WHEN ((data_quality_log.status)::text = 'warning'::text) THEN 1
            ELSE 0
        END)) DESC;


ALTER TABLE public.data_quality_summary OWNER TO matthewmauer;

--
-- Name: data_replicas; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.data_replicas (
    id integer NOT NULL,
    data_type character varying(50) NOT NULL,
    params jsonb NOT NULL,
    validated_data jsonb NOT NULL,
    source_count integer NOT NULL,
    sources jsonb NOT NULL,
    replicated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.data_replicas OWNER TO matthewmauer;

--
-- Name: data_replicas_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.data_replicas_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.data_replicas_id_seq OWNER TO matthewmauer;

--
-- Name: data_replicas_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.data_replicas_id_seq OWNED BY public.data_replicas.id;


--
-- Name: data_source_stats; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.data_source_stats (
    id integer NOT NULL,
    source_name character varying(50) NOT NULL,
    data_type character varying(50) NOT NULL,
    requests integer DEFAULT 0,
    successes integer DEFAULT 0,
    failures integer DEFAULT 0,
    average_latency_ms integer DEFAULT 0,
    last_success timestamp without time zone,
    last_failure timestamp without time zone,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.data_source_stats OWNER TO matthewmauer;

--
-- Name: data_source_stats_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.data_source_stats_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.data_source_stats_id_seq OWNER TO matthewmauer;

--
-- Name: data_source_stats_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.data_source_stats_id_seq OWNED BY public.data_source_stats.id;


--
-- Name: fine_tune_datasets; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.fine_tune_datasets (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    provider character varying(50),
    base_model character varying(100),
    format character varying(50) DEFAULT 'chat'::character varying,
    data jsonb NOT NULL,
    validation_data jsonb,
    status character varying(50) DEFAULT 'draft'::character varying,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.fine_tune_datasets OWNER TO matthewmauer;

--
-- Name: fine_tune_runs; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.fine_tune_runs (
    id integer NOT NULL,
    dataset_id integer NOT NULL,
    provider character varying(50) NOT NULL,
    base_model character varying(100) NOT NULL,
    fine_tuned_model character varying(100),
    job_id character varying(255),
    status character varying(50) DEFAULT 'pending'::character varying,
    hyperparameters jsonb,
    metrics jsonb,
    started_at timestamp without time zone,
    completed_at timestamp without time zone,
    error_message text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.fine_tune_runs OWNER TO matthewmauer;

--
-- Name: dataset_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.dataset_summary AS
 SELECT d.id,
    d.name,
    d.provider,
    d.status,
    jsonb_array_length(d.data) AS training_examples,
    count(r.id) AS total_runs,
    count(r.id) FILTER (WHERE ((r.status)::text = 'success'::text)) AS successful_runs
   FROM (public.fine_tune_datasets d
     LEFT JOIN public.fine_tune_runs r ON ((r.dataset_id = d.id)))
  GROUP BY d.id, d.name, d.provider, d.status, d.data;


ALTER TABLE public.dataset_summary OWNER TO matthewmauer;

--
-- Name: decision_archives; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.decision_archives (
    id integer NOT NULL,
    decision_id integer NOT NULL,
    archived_by text NOT NULL,
    archive_reason text NOT NULL,
    archive_category text DEFAULT 'historical'::text,
    archive_metadata jsonb DEFAULT '{}'::jsonb,
    impact_at_archive jsonb DEFAULT '{}'::jsonb,
    archived_at timestamp without time zone DEFAULT now(),
    restored_by text,
    restore_reason text,
    restored_at timestamp without time zone
);


ALTER TABLE public.decision_archives OWNER TO matthewmauer;

--
-- Name: TABLE decision_archives; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.decision_archives IS 'Archive tracking with restoration capability';


--
-- Name: decision_archives_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.decision_archives_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.decision_archives_id_seq OWNER TO matthewmauer;

--
-- Name: decision_archives_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.decision_archives_id_seq OWNED BY public.decision_archives.id;


--
-- Name: decision_references; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.decision_references (
    id integer NOT NULL,
    decision_id integer NOT NULL,
    referenced_decision_id integer NOT NULL,
    reference_type text DEFAULT 'related'::text,
    created_by text NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.decision_references OWNER TO matthewmauer;

--
-- Name: TABLE decision_references; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.decision_references IS 'Links between related decisions (supersedes, blocks, etc.)';


--
-- Name: decision_references_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.decision_references_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.decision_references_id_seq OWNER TO matthewmauer;

--
-- Name: decision_references_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.decision_references_id_seq OWNED BY public.decision_references.id;


--
-- Name: decision_todos; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.decision_todos (
    id integer NOT NULL,
    decision_id integer NOT NULL,
    title text NOT NULL,
    description text DEFAULT ''::text,
    assigned_to text,
    priority text DEFAULT 'medium'::text,
    due_date timestamp without time zone,
    context jsonb DEFAULT '{}'::jsonb,
    tags text[] DEFAULT ARRAY[]::text[],
    status text DEFAULT 'pending'::text,
    completed_by text,
    completed_at timestamp without time zone,
    completion_notes jsonb,
    archived_at timestamp without time zone,
    created_by text NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.decision_todos OWNER TO matthewmauer;

--
-- Name: TABLE decision_todos; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.decision_todos IS 'Todos linked to decisions for complete traceability';


--
-- Name: decision_todos_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.decision_todos_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.decision_todos_id_seq OWNER TO matthewmauer;

--
-- Name: decision_todos_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.decision_todos_id_seq OWNED BY public.decision_todos.id;


--
-- Name: decision_versions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.decision_versions (
    id integer NOT NULL,
    decision_id integer NOT NULL,
    version integer NOT NULL,
    title text NOT NULL,
    content text NOT NULL,
    context jsonb DEFAULT '{}'::jsonb,
    status text NOT NULL,
    changed_by text NOT NULL,
    change_reason text NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.decision_versions OWNER TO matthewmauer;

--
-- Name: TABLE decision_versions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.decision_versions IS 'Complete version history for every decision change';


--
-- Name: decision_versions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.decision_versions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.decision_versions_id_seq OWNER TO matthewmauer;

--
-- Name: decision_versions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.decision_versions_id_seq OWNED BY public.decision_versions.id;


--
-- Name: decisions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.decisions (
    id integer NOT NULL,
    title text NOT NULL,
    content text NOT NULL,
    category text DEFAULT 'general'::text,
    created_by text NOT NULL,
    context jsonb DEFAULT '{}'::jsonb,
    status text DEFAULT 'draft'::text,
    version integer DEFAULT 1,
    deprecated_reason text,
    replaced_by integer,
    deprecated_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.decisions OWNER TO matthewmauer;

--
-- Name: TABLE decisions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.decisions IS 'Core decisions with version tracking and lifecycle management';


--
-- Name: decisions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.decisions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.decisions_id_seq OWNER TO matthewmauer;

--
-- Name: decisions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.decisions_id_seq OWNED BY public.decisions.id;


--
-- Name: dependency_snapshots; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.dependency_snapshots (
    id integer NOT NULL,
    snapshot_name character varying(255),
    total_packages integer,
    total_dependencies integer,
    max_depth integer,
    circular_dependencies integer,
    high_risk_packages integer,
    leftpad_style_packages integer,
    unfunded_critical_packages integer,
    graph_json jsonb,
    graph_mermaid text,
    graph_dot text,
    minio_snapshot_path text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.dependency_snapshots OWNER TO matthewmauer;

--
-- Name: TABLE dependency_snapshots; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.dependency_snapshots IS 'Periodic snapshots of the entire dependency graph';


--
-- Name: dependency_snapshots_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.dependency_snapshots_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dependency_snapshots_id_seq OWNER TO matthewmauer;

--
-- Name: dependency_snapshots_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.dependency_snapshots_id_seq OWNED BY public.dependency_snapshots.id;


--
-- Name: developer_subscriptions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.developer_subscriptions (
    id integer NOT NULL,
    developer_id integer NOT NULL,
    tier character varying(50) NOT NULL,
    status character varying(50) DEFAULT 'active'::character varying,
    billing_cycle character varying(50) DEFAULT 'monthly'::character varying,
    amount_cents integer,
    currency character varying(10) DEFAULT 'USD'::character varying,
    payment_method character varying(50),
    external_subscription_id character varying(255),
    started_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    current_period_start timestamp without time zone,
    current_period_end timestamp without time zone,
    cancelled_at timestamp without time zone,
    ended_at timestamp without time zone
);


ALTER TABLE public.developer_subscriptions OWNER TO matthewmauer;

--
-- Name: developer_subscriptions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.developer_subscriptions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.developer_subscriptions_id_seq OWNER TO matthewmauer;

--
-- Name: developer_subscriptions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.developer_subscriptions_id_seq OWNED BY public.developer_subscriptions.id;


--
-- Name: developers; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.developers (
    id integer NOT NULL,
    email character varying(255) NOT NULL,
    name character varying(255),
    company character varying(255),
    api_key character varying(64) NOT NULL,
    api_secret character varying(64) NOT NULL,
    tier character varying(50) DEFAULT 'free'::character varying,
    rate_limit_per_hour integer DEFAULT 100,
    rate_limit_per_day integer DEFAULT 1000,
    batch_size_limit integer DEFAULT 100,
    webhook_limit integer DEFAULT 1,
    allowed_domains text[],
    ip_whitelist text[],
    status character varying(50) DEFAULT 'active'::character varying,
    email_verified boolean DEFAULT false,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_used_at timestamp without time zone
);


ALTER TABLE public.developers OWNER TO matthewmauer;

--
-- Name: developer_usage_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.developer_usage_summary AS
 SELECT d.id AS developer_id,
    d.email,
    d.name,
    d.tier,
    count(DISTINCT (au.hour_bucket)::date) AS active_days,
    sum(au.requests_count) AS total_requests,
    avg(au.avg_latency_ms) AS avg_latency_ms,
    max(au.hour_bucket) AS last_active
   FROM (public.developers d
     LEFT JOIN public.api_usage au ON ((d.id = au.developer_id)))
  GROUP BY d.id, d.email, d.name, d.tier;


ALTER TABLE public.developer_usage_summary OWNER TO matthewmauer;

--
-- Name: developers_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.developers_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.developers_id_seq OWNER TO matthewmauer;

--
-- Name: developers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.developers_id_seq OWNED BY public.developers.id;


--
-- Name: user_devices; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_devices (
    id integer NOT NULL,
    device_id character varying(64) NOT NULL,
    user_id uuid,
    first_seen timestamp without time zone DEFAULT now(),
    last_seen timestamp without time zone DEFAULT now(),
    fingerprint_data jsonb,
    total_votes integer DEFAULT 0,
    total_matches_played integer DEFAULT 0,
    trust_score numeric(3,2) DEFAULT 0.50,
    consistency_score numeric(3,2) DEFAULT 0.50,
    reputation_score numeric(3,2) DEFAULT 0.50,
    current_badge character varying(50) DEFAULT 'newcomer'::character varying,
    badge_earned_at timestamp without time zone,
    can_vote boolean DEFAULT true,
    can_chat boolean DEFAULT false,
    can_create_polls boolean DEFAULT false,
    can_moderate boolean DEFAULT false,
    is_suspicious boolean DEFAULT false,
    is_blocked boolean DEFAULT false,
    blocked_reason text,
    blocked_until timestamp without time zone,
    days_active integer DEFAULT 1,
    last_active_date date DEFAULT CURRENT_DATE
);


ALTER TABLE public.user_devices OWNER TO matthewmauer;

--
-- Name: device_leaderboard; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.device_leaderboard AS
 SELECT user_devices.device_id,
    user_devices.user_id,
    user_devices.current_badge,
    user_devices.total_votes,
    user_devices.trust_score,
    user_devices.reputation_score,
    user_devices.days_active,
    user_devices.first_seen,
    user_devices.last_seen
   FROM public.user_devices
  WHERE ((NOT user_devices.is_blocked) AND (NOT user_devices.is_suspicious))
  ORDER BY user_devices.reputation_score DESC, user_devices.total_votes DESC
 LIMIT 100;


ALTER TABLE public.device_leaderboard OWNER TO matthewmauer;

--
-- Name: discovered_models; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.discovered_models (
    id integer NOT NULL,
    model_id character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    provider character varying(100) NOT NULL,
    family character varying(100),
    reported_family character varying(100),
    detected_family character varying(100),
    architecture jsonb DEFAULT '[]'::jsonb,
    parameter_size character varying(50),
    quantization character varying(50),
    format character varying(50),
    capabilities jsonb DEFAULT '[]'::jsonb,
    metadata jsonb DEFAULT '{}'::jsonb,
    discovered_at timestamp without time zone DEFAULT now(),
    last_seen_at timestamp without time zone DEFAULT now(),
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.discovered_models OWNER TO matthewmauer;

--
-- Name: TABLE discovered_models; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.discovered_models IS 'Registry of all discovered AI models from various providers';


--
-- Name: discovered_models_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.discovered_models_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.discovered_models_id_seq OWNER TO matthewmauer;

--
-- Name: discovered_models_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.discovered_models_id_seq OWNED BY public.discovered_models.id;


--
-- Name: document_chunks; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.document_chunks (
    id integer NOT NULL,
    note_id integer NOT NULL,
    chunk_index integer NOT NULL,
    content text NOT NULL,
    embedding public.vector(1536),
    token_count integer,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.document_chunks OWNER TO matthewmauer;

--
-- Name: document_chunks_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.document_chunks_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.document_chunks_id_seq OWNER TO matthewmauer;

--
-- Name: document_chunks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.document_chunks_id_seq OWNED BY public.document_chunks.id;


--
-- Name: domain_anti_patterns; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_anti_patterns (
    id integer NOT NULL,
    domain_context text NOT NULL,
    anti_pattern_name text NOT NULL,
    anti_pattern_category text,
    bad_code_example text NOT NULL,
    why_bad text NOT NULL,
    good_code_example text,
    why_good text,
    severity text DEFAULT 'warning'::text,
    auto_detect_pattern text,
    times_detected integer DEFAULT 0,
    related_good_pattern_id text,
    tags text[],
    created_at timestamp with time zone DEFAULT now(),
    created_by text,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT domain_anti_patterns_severity_check CHECK ((severity = ANY (ARRAY['info'::text, 'warning'::text, 'error'::text, 'critical'::text])))
);


ALTER TABLE public.domain_anti_patterns OWNER TO matthewmauer;

--
-- Name: TABLE domain_anti_patterns; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.domain_anti_patterns IS 'Things that DON''T work well in each domain';


--
-- Name: domain_anti_patterns_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.domain_anti_patterns_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.domain_anti_patterns_id_seq OWNER TO matthewmauer;

--
-- Name: domain_anti_patterns_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.domain_anti_patterns_id_seq OWNED BY public.domain_anti_patterns.id;


--
-- Name: domain_code_examples; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_code_examples (
    example_id text NOT NULL,
    domain_context text NOT NULL,
    domain_url text,
    pattern_name text NOT NULL,
    pattern_category text,
    pattern_type text NOT NULL,
    language text NOT NULL,
    framework text,
    code text NOT NULL,
    code_hash text,
    title text NOT NULL,
    description text NOT NULL,
    usage_notes text,
    example_usage text,
    use_cases text[],
    tags text[],
    related_patterns text[],
    original_prompt text,
    generated_by_model text,
    generated_from_artifact_id text,
    complexity_score text,
    maintainability_score real,
    user_rating real,
    times_used integer DEFAULT 0,
    success_rate real,
    domain_style jsonb,
    domain_conventions jsonb,
    version integer DEFAULT 1,
    is_current boolean DEFAULT true,
    superseded_by text,
    status text DEFAULT 'active'::text,
    visibility text DEFAULT 'domain'::text,
    created_at timestamp with time zone DEFAULT now(),
    created_by text,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT domain_code_examples_status_check CHECK ((status = ANY (ARRAY['active'::text, 'deprecated'::text, 'archived'::text, 'testing'::text]))),
    CONSTRAINT domain_code_examples_visibility_check CHECK ((visibility = ANY (ARRAY['private'::text, 'domain'::text, 'public'::text])))
);


ALTER TABLE public.domain_code_examples OWNER TO matthewmauer;

--
-- Name: TABLE domain_code_examples; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.domain_code_examples IS 'Domain-specific code patterns and examples (not user repos, but AI-generated design patterns per domain)';


--
-- Name: COLUMN domain_code_examples.domain_context; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.domain_code_examples.domain_context IS 'Which domain this pattern belongs to (code, creative, reasoning, fact, simple)';


--
-- Name: COLUMN domain_code_examples.pattern_name; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.domain_code_examples.pattern_name IS 'Unique identifier for this pattern (e.g., api_authentication, data_validation)';


--
-- Name: domain_judgments; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_judgments (
    judgment_id uuid DEFAULT gen_random_uuid() NOT NULL,
    implementation_id uuid NOT NULL,
    session_id uuid NOT NULL,
    vote_direction character varying(10),
    teacher_comment text,
    comparison_implementation_id uuid,
    judged_at timestamp without time zone DEFAULT now(),
    creativity_score integer,
    functionality_score integer,
    code_quality_score integer,
    brand_alignment_score integer,
    CONSTRAINT domain_judgments_brand_alignment_score_check CHECK (((brand_alignment_score >= 1) AND (brand_alignment_score <= 5))),
    CONSTRAINT domain_judgments_code_quality_score_check CHECK (((code_quality_score >= 1) AND (code_quality_score <= 5))),
    CONSTRAINT domain_judgments_creativity_score_check CHECK (((creativity_score >= 1) AND (creativity_score <= 5))),
    CONSTRAINT domain_judgments_functionality_score_check CHECK (((functionality_score >= 1) AND (functionality_score <= 5))),
    CONSTRAINT domain_judgments_vote_direction_check CHECK (((vote_direction)::text = ANY ((ARRAY['left'::character varying, 'right'::character varying])::text[])))
);


ALTER TABLE public.domain_judgments OWNER TO matthewmauer;

--
-- Name: domain_knowledge_graph; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_knowledge_graph (
    id integer NOT NULL,
    source_type text NOT NULL,
    source_id text NOT NULL,
    target_type text NOT NULL,
    target_id text NOT NULL,
    relationship_type text NOT NULL,
    relationship_strength real DEFAULT 0.5,
    context text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT domain_knowledge_graph_relationship_strength_check CHECK (((relationship_strength >= (0)::double precision) AND (relationship_strength <= (1)::double precision)))
);


ALTER TABLE public.domain_knowledge_graph OWNER TO matthewmauer;

--
-- Name: TABLE domain_knowledge_graph; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.domain_knowledge_graph IS 'Relationships between patterns, concepts, and domains';


--
-- Name: domain_knowledge_graph_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.domain_knowledge_graph_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.domain_knowledge_graph_id_seq OWNER TO matthewmauer;

--
-- Name: domain_knowledge_graph_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.domain_knowledge_graph_id_seq OWNED BY public.domain_knowledge_graph.id;


--
-- Name: domain_model_parameters; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_model_parameters (
    id integer NOT NULL,
    domain_context text NOT NULL,
    model_id text NOT NULL,
    recommended_preset_id text,
    override_params jsonb,
    avg_success_rate real,
    avg_response_time_ms real,
    avg_cost_per_1k_tokens real,
    avg_user_rating real,
    total_requests integer DEFAULT 0,
    optimization_notes text,
    last_optimized_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.domain_model_parameters OWNER TO matthewmauer;

--
-- Name: TABLE domain_model_parameters; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.domain_model_parameters IS 'Optimal parameters for specific domain+model combinations';


--
-- Name: domain_model_parameters_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.domain_model_parameters_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.domain_model_parameters_id_seq OWNER TO matthewmauer;

--
-- Name: domain_model_parameters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.domain_model_parameters_id_seq OWNED BY public.domain_model_parameters.id;


--
-- Name: domain_names; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_names (
    id integer NOT NULL,
    domain character varying(255) NOT NULL,
    type character varying(50) DEFAULT 'free'::character varying,
    active boolean DEFAULT true,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.domain_names OWNER TO matthewmauer;

--
-- Name: domain_names_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.domain_names_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.domain_names_id_seq OWNER TO matthewmauer;

--
-- Name: domain_names_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.domain_names_id_seq OWNED BY public.domain_names.id;


--
-- Name: domain_pattern_coverage; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.domain_pattern_coverage AS
 SELECT domain_code_examples.domain_context,
    count(*) AS total_patterns,
    count(DISTINCT domain_code_examples.pattern_category) AS categories,
    count(DISTINCT domain_code_examples.language) AS languages,
    avg(domain_code_examples.success_rate) AS avg_success_rate,
    sum(domain_code_examples.times_used) AS total_uses
   FROM public.domain_code_examples
  WHERE ((domain_code_examples.status = 'active'::text) AND (domain_code_examples.is_current = true))
  GROUP BY domain_code_examples.domain_context
  ORDER BY (count(*)) DESC;


ALTER TABLE public.domain_pattern_coverage OWNER TO matthewmauer;

--
-- Name: domain_pattern_usage; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_pattern_usage (
    id integer NOT NULL,
    example_id text NOT NULL,
    used_in_request_id text,
    used_in_artifact_id text,
    used_by text,
    success boolean DEFAULT true,
    modified boolean DEFAULT false,
    modifications text,
    user_rating integer,
    feedback_text text,
    "timestamp" timestamp with time zone DEFAULT now(),
    CONSTRAINT domain_pattern_usage_user_rating_check CHECK (((user_rating >= 1) AND (user_rating <= 5)))
);


ALTER TABLE public.domain_pattern_usage OWNER TO matthewmauer;

--
-- Name: domain_pattern_usage_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.domain_pattern_usage_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.domain_pattern_usage_id_seq OWNER TO matthewmauer;

--
-- Name: domain_pattern_usage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.domain_pattern_usage_id_seq OWNED BY public.domain_pattern_usage.id;


--
-- Name: profile_matches; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.profile_matches (
    id integer NOT NULL,
    first_name character varying(100) NOT NULL,
    last_name character varying(100) NOT NULL,
    full_name character varying(200) GENERATED ALWAYS AS ((((first_name)::text || ' '::text) || (last_name)::text)) STORED,
    email character varying(255),
    phone character varying(50),
    domain character varying(255),
    country_code character varying(10),
    country_name character varying(100),
    metadata jsonb DEFAULT '{}'::jsonb,
    match_score integer DEFAULT 50,
    first_name_origin character varying(100),
    last_name_origin character varying(100),
    generation_method character varying(50) DEFAULT 'random'::character varying,
    session_id character varying(100),
    user_id character varying(100),
    exported boolean DEFAULT false,
    export_format character varying(50),
    exported_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.profile_matches OWNER TO matthewmauer;

--
-- Name: domain_statistics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.domain_statistics AS
 SELECT profile_matches.domain,
    count(*) AS usage_count,
    count(DISTINCT profile_matches.session_id) AS unique_sessions
   FROM public.profile_matches
  GROUP BY profile_matches.domain
  ORDER BY (count(*)) DESC;


ALTER TABLE public.domain_statistics OWNER TO matthewmauer;

--
-- Name: domain_style_guides; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.domain_style_guides (
    id integer NOT NULL,
    domain_context text NOT NULL,
    indent_style text DEFAULT 'spaces'::text,
    indent_size integer DEFAULT 2,
    quote_style text DEFAULT 'single'::text,
    line_length integer DEFAULT 100,
    trailing_commas boolean DEFAULT true,
    variable_case text DEFAULT 'camelCase'::text,
    function_case text DEFAULT 'camelCase'::text,
    class_case text DEFAULT 'PascalCase'::text,
    constant_case text DEFAULT 'UPPER_SNAKE'::text,
    file_structure jsonb,
    import_order text[],
    language_preferences jsonb,
    requires_docstrings boolean DEFAULT true,
    docstring_style text,
    best_practices text[],
    anti_patterns text[],
    description text,
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.domain_style_guides OWNER TO matthewmauer;

--
-- Name: TABLE domain_style_guides; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.domain_style_guides IS 'Coding style and conventions per domain (indent, quotes, naming, etc.)';


--
-- Name: domain_style_guides_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.domain_style_guides_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.domain_style_guides_id_seq OWNER TO matthewmauer;

--
-- Name: domain_style_guides_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.domain_style_guides_id_seq OWNED BY public.domain_style_guides.id;


--
-- Name: drip_campaigns; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.drip_campaigns (
    campaign_id uuid DEFAULT gen_random_uuid() NOT NULL,
    path_id uuid,
    campaign_name character varying(255) NOT NULL,
    campaign_slug character varying(255) NOT NULL,
    description text,
    trigger_event character varying(100) NOT NULL,
    trigger_conditions jsonb,
    channel character varying(50) DEFAULT 'email'::character varying,
    delay_minutes integer DEFAULT 0,
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.drip_campaigns OWNER TO matthewmauer;

--
-- Name: elo_blocked_voters; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.elo_blocked_voters (
    id integer NOT NULL,
    block_type character varying(20),
    block_value text,
    reason text,
    blocked_by character varying(20) DEFAULT 'system'::character varying,
    blocked_at timestamp without time zone DEFAULT now(),
    expires_at timestamp without time zone,
    evidence_pattern_ids integer[],
    evidence_vote_ids integer[]
);


ALTER TABLE public.elo_blocked_voters OWNER TO matthewmauer;

--
-- Name: elo_blocked_voters_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.elo_blocked_voters_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elo_blocked_voters_id_seq OWNER TO matthewmauer;

--
-- Name: elo_blocked_voters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.elo_blocked_voters_id_seq OWNED BY public.elo_blocked_voters.id;


--
-- Name: elo_items; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.elo_items (
    id integer NOT NULL,
    item_type character varying(50) NOT NULL,
    item_name character varying(255) NOT NULL,
    item_data jsonb DEFAULT '{}'::jsonb,
    elo_rating integer DEFAULT 1500,
    peak_rating integer DEFAULT 1500,
    rating_confidence integer DEFAULT 0,
    matches_played integer DEFAULT 0,
    wins integer DEFAULT 0,
    losses integer DEFAULT 0,
    draws integer DEFAULT 0,
    win_rate numeric(5,2) DEFAULT 0.00,
    avg_opponent_rating integer DEFAULT 1500,
    performance_rating integer DEFAULT 1500,
    rank integer,
    tier character varying(50),
    created_by character varying(100),
    tags text[],
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_match_at timestamp without time zone
);


ALTER TABLE public.elo_items OWNER TO matthewmauer;

--
-- Name: elo_items_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.elo_items_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elo_items_id_seq OWNER TO matthewmauer;

--
-- Name: elo_items_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.elo_items_id_seq OWNED BY public.elo_items.id;


--
-- Name: elo_leaderboards; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.elo_leaderboards AS
 SELECT ei.id,
    ei.item_type,
    ei.item_name,
    ei.item_data,
    ei.elo_rating,
    ei.peak_rating,
    ei.matches_played,
    ei.wins,
    ei.losses,
    ei.draws,
    ei.win_rate,
    ei.tier,
    row_number() OVER (PARTITION BY ei.item_type ORDER BY ei.elo_rating DESC) AS rank,
    ei.rating_confidence,
    ei.last_match_at,
    ei.created_at
   FROM public.elo_items ei
  WHERE (ei.matches_played >= 5)
  ORDER BY ei.item_type, ei.elo_rating DESC;


ALTER TABLE public.elo_leaderboards OWNER TO matthewmauer;

--
-- Name: elo_matches; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.elo_matches (
    id integer NOT NULL,
    item_a_id integer NOT NULL,
    item_b_id integer NOT NULL,
    item_a_rating_before integer NOT NULL,
    item_b_rating_before integer NOT NULL,
    item_a_rating_after integer NOT NULL,
    item_b_rating_after integer NOT NULL,
    winner_id integer,
    result character varying(20) NOT NULL,
    score numeric(3,2) DEFAULT 1.00,
    rating_change integer NOT NULL,
    expected_score numeric(5,4),
    match_type character varying(50) DEFAULT 'swipe'::character varying,
    session_id character varying(100),
    user_id character varying(100),
    metadata jsonb DEFAULT '{}'::jsonb,
    matched_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.elo_matches OWNER TO matthewmauer;

--
-- Name: elo_matches_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.elo_matches_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elo_matches_id_seq OWNER TO matthewmauer;

--
-- Name: elo_matches_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.elo_matches_id_seq OWNED BY public.elo_matches.id;


--
-- Name: elo_rating_history; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.elo_rating_history (
    id integer NOT NULL,
    item_id integer NOT NULL,
    elo_rating integer NOT NULL,
    matches_played integer NOT NULL,
    rank integer,
    tier character varying(50),
    match_id integer,
    change_type character varying(50),
    rating_change integer DEFAULT 0,
    recorded_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.elo_rating_history OWNER TO matthewmauer;

--
-- Name: elo_rating_history_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.elo_rating_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elo_rating_history_id_seq OWNER TO matthewmauer;

--
-- Name: elo_rating_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.elo_rating_history_id_seq OWNED BY public.elo_rating_history.id;


--
-- Name: elo_recent_matches; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.elo_recent_matches AS
 SELECT em.id,
    em.matched_at,
    a.item_name AS item_a_name,
    a.elo_rating AS item_a_current_rating,
    b.item_name AS item_b_name,
    b.elo_rating AS item_b_current_rating,
    em.result,
    em.rating_change,
    em.expected_score,
        CASE
            WHEN (em.winner_id = em.item_a_id) THEN a.item_name
            WHEN (em.winner_id = em.item_b_id) THEN b.item_name
            ELSE 'Draw'::character varying
        END AS winner_name,
    em.match_type,
    em.session_id
   FROM ((public.elo_matches em
     JOIN public.elo_items a ON ((em.item_a_id = a.id)))
     JOIN public.elo_items b ON ((em.item_b_id = b.id)))
  ORDER BY em.matched_at DESC;


ALTER TABLE public.elo_recent_matches OWNER TO matthewmauer;

--
-- Name: elo_spam_patterns; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.elo_spam_patterns (
    id integer NOT NULL,
    identifier_type character varying(20),
    identifier_value text,
    pattern_type character varying(50),
    pattern_data jsonb,
    severity character varying(20) DEFAULT 'low'::character varying,
    confidence_score numeric(3,2),
    action_taken character varying(50),
    first_detected_at timestamp without time zone DEFAULT now(),
    last_detected_at timestamp without time zone DEFAULT now(),
    occurrences integer DEFAULT 1
);


ALTER TABLE public.elo_spam_patterns OWNER TO matthewmauer;

--
-- Name: elo_spam_patterns_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.elo_spam_patterns_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elo_spam_patterns_id_seq OWNER TO matthewmauer;

--
-- Name: elo_spam_patterns_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.elo_spam_patterns_id_seq OWNED BY public.elo_spam_patterns.id;


--
-- Name: elo_user_votes; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.elo_user_votes (
    id integer NOT NULL,
    match_id integer,
    item_a_id integer,
    item_b_id integer,
    winner_id integer,
    user_id uuid,
    session_id character varying(100),
    device_fingerprint character varying(64),
    ip_address inet,
    user_tier character varying(20) DEFAULT 'anonymous'::character varying,
    vote_duration_ms integer,
    is_suspicious boolean DEFAULT false,
    suspicious_reason text,
    voted_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.elo_user_votes OWNER TO matthewmauer;

--
-- Name: elo_suspicious_voters; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.elo_suspicious_voters AS
 SELECT COALESCE((elo_user_votes.user_id)::text, (elo_user_votes.session_id)::text, (elo_user_votes.device_fingerprint)::text, (elo_user_votes.ip_address)::text) AS identifier,
    elo_user_votes.user_tier,
    count(*) AS total_votes,
    count(*) FILTER (WHERE elo_user_votes.is_suspicious) AS suspicious_votes,
    array_agg(DISTINCT elo_user_votes.suspicious_reason) FILTER (WHERE (elo_user_votes.suspicious_reason IS NOT NULL)) AS reasons,
    min(elo_user_votes.voted_at) AS first_vote,
    max(elo_user_votes.voted_at) AS last_vote,
    ((count(*))::numeric / EXTRACT(epoch FROM ((max(elo_user_votes.voted_at) - min(elo_user_votes.voted_at)) + '00:00:01'::interval))) AS votes_per_second
   FROM public.elo_user_votes
  GROUP BY COALESCE((elo_user_votes.user_id)::text, (elo_user_votes.session_id)::text, (elo_user_votes.device_fingerprint)::text, (elo_user_votes.ip_address)::text), elo_user_votes.user_tier
 HAVING ((count(*) FILTER (WHERE elo_user_votes.is_suspicious) > 0) OR (((count(*))::numeric / EXTRACT(epoch FROM ((max(elo_user_votes.voted_at) - min(elo_user_votes.voted_at)) + '00:00:01'::interval))) > 0.1))
  ORDER BY (count(*) FILTER (WHERE elo_user_votes.is_suspicious)) DESC, ((count(*))::numeric / EXTRACT(epoch FROM ((max(elo_user_votes.voted_at) - min(elo_user_votes.voted_at)) + '00:00:01'::interval))) DESC;


ALTER TABLE public.elo_suspicious_voters OWNER TO matthewmauer;

--
-- Name: elo_type_stats; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.elo_type_stats AS
 SELECT elo_items.item_type,
    count(*) AS total_items,
    avg(elo_items.elo_rating) AS avg_rating,
    max(elo_items.elo_rating) AS max_rating,
    min(elo_items.elo_rating) AS min_rating,
    sum(elo_items.matches_played) AS total_matches,
    avg(elo_items.matches_played) AS avg_matches_per_item,
    avg(elo_items.win_rate) AS avg_win_rate,
    max(elo_items.last_match_at) AS last_activity
   FROM public.elo_items
  GROUP BY elo_items.item_type;


ALTER TABLE public.elo_type_stats OWNER TO matthewmauer;

--
-- Name: elo_user_votes_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.elo_user_votes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.elo_user_votes_id_seq OWNER TO matthewmauer;

--
-- Name: elo_user_votes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.elo_user_votes_id_seq OWNED BY public.elo_user_votes.id;


--
-- Name: elo_vote_statistics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.elo_vote_statistics AS
 SELECT date_trunc('hour'::text, elo_user_votes.voted_at) AS hour,
    elo_user_votes.user_tier,
    count(*) AS total_votes,
    count(DISTINCT elo_user_votes.user_id) AS unique_users,
    count(DISTINCT elo_user_votes.session_id) AS unique_sessions,
    count(DISTINCT elo_user_votes.ip_address) AS unique_ips,
    count(*) FILTER (WHERE elo_user_votes.is_suspicious) AS suspicious_votes,
    avg(elo_user_votes.vote_duration_ms) AS avg_vote_duration_ms
   FROM public.elo_user_votes
  WHERE (elo_user_votes.voted_at > (now() - '7 days'::interval))
  GROUP BY (date_trunc('hour'::text, elo_user_votes.voted_at)), elo_user_votes.user_tier
  ORDER BY (date_trunc('hour'::text, elo_user_votes.voted_at)) DESC;


ALTER TABLE public.elo_vote_statistics OWNER TO matthewmauer;

--
-- Name: email_breach_tracker; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.email_breach_tracker (
    tracker_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id character varying(255) NOT NULL,
    base_email character varying(255) NOT NULL,
    tagged_email character varying(255) NOT NULL,
    service_tag character varying(100) NOT NULL,
    breach_detected boolean DEFAULT false,
    breach_detected_at timestamp with time zone,
    breach_source text,
    spam_count integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    last_checked_at timestamp with time zone DEFAULT now(),
    notes text
);


ALTER TABLE public.email_breach_tracker OWNER TO matthewmauer;

--
-- Name: TABLE email_breach_tracker; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.email_breach_tracker IS 'Track which services leaked your email using +tags (privacy lesson)';


--
-- Name: COLUMN email_breach_tracker.tagged_email; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.email_breach_tracker.tagged_email IS 'user+amazon@gmail.com - track where spam comes from';


--
-- Name: email_breach_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.email_breach_summary AS
 SELECT email_breach_tracker.user_id,
    count(*) AS total_tagged_emails,
    count(
        CASE
            WHEN (email_breach_tracker.breach_detected = true) THEN 1
            ELSE NULL::integer
        END) AS breached_count,
    round((((count(
        CASE
            WHEN (email_breach_tracker.breach_detected = true) THEN 1
            ELSE NULL::integer
        END))::numeric / (NULLIF(count(*), 0))::numeric) * (100)::numeric), 2) AS breach_percentage,
    sum(email_breach_tracker.spam_count) AS total_spam_received
   FROM public.email_breach_tracker
  GROUP BY email_breach_tracker.user_id;


ALTER TABLE public.email_breach_summary OWNER TO matthewmauer;

--
-- Name: VIEW email_breach_summary; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.email_breach_summary IS 'Summary of email breach tracking per user';


--
-- Name: email_relay_logs; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.email_relay_logs (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    original_from character varying(255) NOT NULL,
    relayed_from character varying(255) NOT NULL,
    recipient_to text NOT NULL,
    subject text,
    gmail_message_id character varying(255),
    relay_message_id character varying(255),
    status character varying(50) NOT NULL,
    error_message text,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.email_relay_logs OWNER TO matthewmauer;

--
-- Name: email_relay_logs_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.email_relay_logs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.email_relay_logs_id_seq OWNER TO matthewmauer;

--
-- Name: email_relay_logs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.email_relay_logs_id_seq OWNED BY public.email_relay_logs.id;


--
-- Name: gmail_sent_emails; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.gmail_sent_emails (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    send_as_email character varying(255) NOT NULL,
    recipient_to text NOT NULL,
    subject text,
    gmail_message_id character varying(255),
    thread_id character varying(255),
    status character varying(50) NOT NULL,
    error_message text,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.gmail_sent_emails OWNER TO matthewmauer;

--
-- Name: email_stats_by_alias; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.email_stats_by_alias AS
 SELECT gmail_sent_emails.user_id,
    gmail_sent_emails.send_as_email,
    count(*) AS total_sent,
    count(*) FILTER (WHERE ((gmail_sent_emails.status)::text = 'sent'::text)) AS successful,
    count(*) FILTER (WHERE ((gmail_sent_emails.status)::text = 'failed'::text)) AS failed,
    max(gmail_sent_emails.created_at) AS last_sent,
    min(gmail_sent_emails.created_at) AS first_sent
   FROM public.gmail_sent_emails
  GROUP BY gmail_sent_emails.user_id, gmail_sent_emails.send_as_email;


ALTER TABLE public.email_stats_by_alias OWNER TO matthewmauer;

--
-- Name: embed_analytics; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.embed_analytics (
    id integer NOT NULL,
    site_id character varying(32),
    date date NOT NULL,
    unique_visitors integer DEFAULT 0,
    total_sessions integer DEFAULT 0,
    total_page_views integer DEFAULT 0,
    avg_session_duration numeric(10,2),
    avg_pages_per_session numeric(10,2),
    bounce_rate numeric(5,2),
    consent_shown integer DEFAULT 0,
    consent_accepted integer DEFAULT 0,
    consent_rejected integer DEFAULT 0,
    login_attempts integer DEFAULT 0,
    successful_logins integer DEFAULT 0,
    new_signups integer DEFAULT 0,
    conversions integer DEFAULT 0,
    conversion_value numeric(10,2) DEFAULT 0,
    computed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.embed_analytics OWNER TO matthewmauer;

--
-- Name: embed_analytics_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.embed_analytics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.embed_analytics_id_seq OWNER TO matthewmauer;

--
-- Name: embed_analytics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.embed_analytics_id_seq OWNED BY public.embed_analytics.id;


--
-- Name: embed_consents; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.embed_consents (
    id integer NOT NULL,
    site_id character varying(32),
    visitor_id character varying(64) NOT NULL,
    analytics_consent boolean DEFAULT false,
    marketing_consent boolean DEFAULT false,
    functional_consent boolean DEFAULT true,
    consent_version character varying(20),
    ip_hash character varying(64),
    user_agent text,
    granted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp without time zone,
    revoked_at timestamp without time zone
);


ALTER TABLE public.embed_consents OWNER TO matthewmauer;

--
-- Name: embed_consents_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.embed_consents_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.embed_consents_id_seq OWNER TO matthewmauer;

--
-- Name: embed_consents_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.embed_consents_id_seq OWNED BY public.embed_consents.id;


--
-- Name: embed_events; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.embed_events (
    id bigint NOT NULL,
    site_id character varying(32),
    session_id character varying(64) NOT NULL,
    visitor_id character varying(64),
    user_id integer,
    event_type character varying(50) NOT NULL,
    event_name character varying(100),
    event_data jsonb DEFAULT '{}'::jsonb,
    page_url text,
    page_title character varying(500),
    referrer text,
    user_agent text,
    ip_hash character varying(64),
    country_code character varying(2),
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.embed_events OWNER TO matthewmauer;

--
-- Name: embed_events_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.embed_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.embed_events_id_seq OWNER TO matthewmauer;

--
-- Name: embed_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.embed_events_id_seq OWNED BY public.embed_events.id;


--
-- Name: embed_sessions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.embed_sessions (
    id bigint NOT NULL,
    site_id character varying(32),
    session_id character varying(64) NOT NULL,
    visitor_id character varying(64) NOT NULL,
    user_id integer,
    started_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_seen_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    ended_at timestamp without time zone,
    duration_seconds integer,
    page_views integer DEFAULT 0,
    events_count integer DEFAULT 0,
    entry_url text,
    exit_url text,
    referrer text,
    user_agent text,
    ip_hash character varying(64),
    country_code character varying(2),
    converted boolean DEFAULT false,
    conversion_type character varying(50),
    conversion_value numeric(10,2)
);


ALTER TABLE public.embed_sessions OWNER TO matthewmauer;

--
-- Name: embed_sessions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.embed_sessions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.embed_sessions_id_seq OWNER TO matthewmauer;

--
-- Name: embed_sessions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.embed_sessions_id_seq OWNED BY public.embed_sessions.id;


--
-- Name: embed_sites; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.embed_sites (
    id integer NOT NULL,
    site_id character varying(32) NOT NULL,
    user_id integer,
    domain character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    config jsonb DEFAULT '{}'::jsonb,
    allowed_origins text[],
    consent_enabled boolean DEFAULT true,
    auth_enabled boolean DEFAULT true,
    analytics_enabled boolean DEFAULT true,
    theme jsonb DEFAULT '{}'::jsonb,
    consent_text jsonb DEFAULT '{}'::jsonb,
    api_key character varying(64) NOT NULL,
    webhook_url character varying(500),
    webhook_secret character varying(64),
    status character varying(20) DEFAULT 'active'::character varying,
    last_event_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.embed_sites OWNER TO matthewmauer;

--
-- Name: embed_sites_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.embed_sites_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.embed_sites_id_seq OWNER TO matthewmauer;

--
-- Name: embed_sites_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.embed_sites_id_seq OWNED BY public.embed_sites.id;


--
-- Name: embed_widgets; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.embed_widgets (
    id integer NOT NULL,
    site_id character varying(32),
    widget_type character varying(50) NOT NULL,
    widget_name character varying(100) NOT NULL,
    enabled boolean DEFAULT true,
    config jsonb DEFAULT '{}'::jsonb,
    "position" character varying(20) DEFAULT 'bottom-right'::character varying,
    z_index integer DEFAULT 9999,
    custom_css text,
    custom_html text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.embed_widgets OWNER TO matthewmauer;

--
-- Name: embed_widgets_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.embed_widgets_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.embed_widgets_id_seq OWNER TO matthewmauer;

--
-- Name: embed_widgets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.embed_widgets_id_seq OWNED BY public.embed_widgets.id;


--
-- Name: endpoint_popularity; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.endpoint_popularity AS
 SELECT api_usage.endpoint,
    count(DISTINCT api_usage.developer_id) AS unique_developers,
    sum(api_usage.requests_count) AS total_requests,
    avg(api_usage.avg_latency_ms) AS avg_latency_ms,
    sum(api_usage.error_count) AS total_errors,
    round(((100.0 * (sum(api_usage.error_count))::numeric) / (NULLIF(sum(api_usage.requests_count), 0))::numeric), 2) AS error_rate
   FROM public.api_usage
  GROUP BY api_usage.endpoint
  ORDER BY (sum(api_usage.requests_count)) DESC;


ALTER TABLE public.endpoint_popularity OWNER TO matthewmauer;

--
-- Name: equipped_items; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.equipped_items (
    app_id uuid NOT NULL,
    user_id uuid NOT NULL,
    equipment_slot text NOT NULL,
    item_id text NOT NULL,
    item_type text NOT NULL,
    item_name text NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb,
    equipped_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.equipped_items OWNER TO matthewmauer;

--
-- Name: TABLE equipped_items; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.equipped_items IS 'Items currently equipped by player';


--
-- Name: error_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.error_log (
    id integer NOT NULL,
    "timestamp" timestamp without time zone,
    message text
);


ALTER TABLE public.error_log OWNER TO matthewmauer;

--
-- Name: error_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.error_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.error_log_id_seq OWNER TO matthewmauer;

--
-- Name: error_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.error_log_id_seq OWNED BY public.error_log.id;


--
-- Name: error_logs; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.error_logs (
    id integer NOT NULL,
    level text NOT NULL,
    message text NOT NULL,
    "timestamp" timestamp with time zone DEFAULT now(),
    CONSTRAINT error_logs_level_check CHECK ((level = ANY (ARRAY['info'::text, 'warning'::text, 'error'::text])))
);


ALTER TABLE public.error_logs OWNER TO matthewmauer;

--
-- Name: error_logs_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.error_logs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.error_logs_id_seq OWNER TO matthewmauer;

--
-- Name: error_logs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.error_logs_id_seq OWNED BY public.error_logs.id;


--
-- Name: errors; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.errors (
    id integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    service character varying(255),
    error text
);


ALTER TABLE public.errors OWNER TO matthewmauer;

--
-- Name: errors_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.errors_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.errors_id_seq OWNER TO matthewmauer;

--
-- Name: errors_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.errors_id_seq OWNED BY public.errors.id;


--
-- Name: event_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.event_log (
    id bigint NOT NULL,
    event_id character varying(255) NOT NULL,
    event_type character varying(100) NOT NULL,
    event_data jsonb NOT NULL,
    "timestamp" timestamp without time zone NOT NULL,
    ttl integer NOT NULL,
    propagation_path jsonb NOT NULL,
    origin_instance character varying(255) NOT NULL,
    recorded_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.event_log OWNER TO matthewmauer;

--
-- Name: TABLE event_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.event_log IS 'Wave propagation event log for distributed broadcasting';


--
-- Name: COLUMN event_log.event_id; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.event_log.event_id IS 'Unique event identifier for echo detection';


--
-- Name: COLUMN event_log.ttl; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.event_log.ttl IS 'Time-to-live (hops remaining) for wave propagation';


--
-- Name: COLUMN event_log.propagation_path; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.event_log.propagation_path IS 'JSON array of instance IDs in propagation path';


--
-- Name: event_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.event_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.event_log_id_seq OWNER TO matthewmauer;

--
-- Name: event_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.event_log_id_seq OWNED BY public.event_log.id;


--
-- Name: experiment_assignments; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.experiment_assignments (
    id integer NOT NULL,
    experiment_id integer,
    variant_id integer,
    user_id integer,
    session_id text,
    assigned_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.experiment_assignments OWNER TO matthewmauer;

--
-- Name: TABLE experiment_assignments; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.experiment_assignments IS 'Sticky user-to-variant assignments for consistent experience';


--
-- Name: experiment_assignments_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.experiment_assignments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.experiment_assignments_id_seq OWNER TO matthewmauer;

--
-- Name: experiment_assignments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.experiment_assignments_id_seq OWNED BY public.experiment_assignments.id;


--
-- Name: experiment_results; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.experiment_results (
    id integer NOT NULL,
    experiment_id integer,
    variant_id integer,
    user_id integer,
    session_id text,
    success boolean DEFAULT false,
    response_time_ms integer,
    cost_usd real,
    user_satisfaction real,
    conversion boolean DEFAULT false,
    metrics jsonb,
    recorded_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.experiment_results OWNER TO matthewmauer;

--
-- Name: TABLE experiment_results; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.experiment_results IS 'Individual observations with metrics (success, time, cost, satisfaction)';


--
-- Name: experiment_results_comparison; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.experiment_results_comparison AS
 SELECT e.id AS experiment_id,
    e.name AS experiment_name,
    e.primary_metric,
    ev.id AS variant_id,
    ev.variant_name,
    ev.is_control,
    es.total_observations,
    es.success_rate,
    es.avg_response_time_ms,
    es.avg_cost_usd,
    es.avg_satisfaction,
    es.conversion_rate,
    es.is_significant,
    es.p_value
   FROM ((public.experiments e
     JOIN public.experiment_variants ev ON ((ev.experiment_id = e.id)))
     LEFT JOIN public.experiment_statistics es ON ((es.variant_id = ev.id)))
  ORDER BY e.id, ev.is_control DESC, es.success_rate DESC;


ALTER TABLE public.experiment_results_comparison OWNER TO matthewmauer;

--
-- Name: experiment_results_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.experiment_results_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.experiment_results_id_seq OWNER TO matthewmauer;

--
-- Name: experiment_results_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.experiment_results_id_seq OWNED BY public.experiment_results.id;


--
-- Name: experiment_statistics_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.experiment_statistics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.experiment_statistics_id_seq OWNER TO matthewmauer;

--
-- Name: experiment_statistics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.experiment_statistics_id_seq OWNED BY public.experiment_statistics.id;


--
-- Name: experiment_variants_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.experiment_variants_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.experiment_variants_id_seq OWNER TO matthewmauer;

--
-- Name: experiment_variants_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.experiment_variants_id_seq OWNED BY public.experiment_variants.id;


--
-- Name: experiments_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.experiments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.experiments_id_seq OWNER TO matthewmauer;

--
-- Name: experiments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.experiments_id_seq OWNED BY public.experiments.id;


--
-- Name: fast_responses; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.fast_responses AS
 SELECT ai_responses.provider,
    ai_responses.model,
    ai_responses.latency_ms,
    ai_responses.cache_hit,
    ai_responses.request_timestamp
   FROM public.ai_responses
  WHERE ((ai_responses.latency_ms < 100) AND (ai_responses.latency_ms IS NOT NULL))
  ORDER BY ai_responses.request_timestamp DESC;


ALTER TABLE public.fast_responses OWNER TO matthewmauer;

--
-- Name: file_permissions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.file_permissions (
    id integer NOT NULL,
    item_type character varying(10) NOT NULL,
    item_id integer NOT NULL,
    user_id integer,
    group_id integer,
    can_read boolean DEFAULT true,
    can_write boolean DEFAULT false,
    can_execute boolean DEFAULT false,
    can_delete boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.file_permissions OWNER TO matthewmauer;

--
-- Name: TABLE file_permissions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.file_permissions IS 'Access control for files and folders';


--
-- Name: file_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.file_permissions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.file_permissions_id_seq OWNER TO matthewmauer;

--
-- Name: file_permissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.file_permissions_id_seq OWNED BY public.file_permissions.id;


--
-- Name: fine_tune_datasets_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.fine_tune_datasets_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fine_tune_datasets_id_seq OWNER TO matthewmauer;

--
-- Name: fine_tune_datasets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.fine_tune_datasets_id_seq OWNED BY public.fine_tune_datasets.id;


--
-- Name: fine_tune_runs_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.fine_tune_runs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.fine_tune_runs_id_seq OWNER TO matthewmauer;

--
-- Name: fine_tune_runs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.fine_tune_runs_id_seq OWNED BY public.fine_tune_runs.id;


--
-- Name: first_names; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.first_names (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    gender character varying(20),
    origin character varying(100),
    popularity integer DEFAULT 50,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.first_names OWNER TO matthewmauer;

--
-- Name: first_names_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.first_names_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.first_names_id_seq OWNER TO matthewmauer;

--
-- Name: first_names_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.first_names_id_seq OWNED BY public.first_names.id;


--
-- Name: flow_executions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.flow_executions (
    id character varying(100) NOT NULL,
    flow_id uuid,
    status character varying(20) DEFAULT 'in_progress'::character varying NOT NULL,
    current_step integer DEFAULT 0,
    context jsonb DEFAULT '{}'::jsonb,
    step_results jsonb DEFAULT '{}'::jsonb,
    error_message text,
    started_at timestamp without time zone DEFAULT now(),
    completed_at timestamp without time zone,
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.flow_executions OWNER TO matthewmauer;

--
-- Name: TABLE flow_executions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.flow_executions IS 'Execution history with step-by-step results';


--
-- Name: COLUMN flow_executions.step_results; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.flow_executions.step_results IS 'Results from each step execution';


--
-- Name: forum_karma; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.forum_karma (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    post_karma integer DEFAULT 0,
    comment_karma integer DEFAULT 0,
    total_karma integer DEFAULT 0,
    threads_created integer DEFAULT 0,
    comments_created integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.forum_karma OWNER TO matthewmauer;

--
-- Name: TABLE forum_karma; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.forum_karma IS 'User karma scores and activity stats';


--
-- Name: forum_karma_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.forum_karma_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.forum_karma_id_seq OWNER TO matthewmauer;

--
-- Name: forum_karma_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.forum_karma_id_seq OWNED BY public.forum_karma.id;


--
-- Name: forum_posts; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.forum_posts (
    id integer NOT NULL,
    thread_id integer NOT NULL,
    parent_id integer,
    depth integer DEFAULT 0,
    author_id character varying(255) NOT NULL,
    author_name character varying(255),
    body text NOT NULL,
    score integer DEFAULT 0,
    upvotes integer DEFAULT 0,
    downvotes integer DEFAULT 0,
    deleted boolean DEFAULT false,
    edited boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    metadata jsonb
);


ALTER TABLE public.forum_posts OWNER TO matthewmauer;

--
-- Name: TABLE forum_posts; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.forum_posts IS 'Comments/replies in discussion threads (nested)';


--
-- Name: forum_posts_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.forum_posts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.forum_posts_id_seq OWNER TO matthewmauer;

--
-- Name: forum_posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.forum_posts_id_seq OWNED BY public.forum_posts.id;


--
-- Name: forum_threads; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.forum_threads (
    id integer NOT NULL,
    content_id integer,
    title text NOT NULL,
    url text,
    author_id character varying(255) NOT NULL,
    author_name character varying(255),
    body text,
    score integer DEFAULT 0,
    upvotes integer DEFAULT 0,
    downvotes integer DEFAULT 0,
    comment_count integer DEFAULT 0,
    view_count integer DEFAULT 0,
    pinned boolean DEFAULT false,
    locked boolean DEFAULT false,
    archived boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_activity_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    tags text[],
    flair character varying(100)
);


ALTER TABLE public.forum_threads OWNER TO matthewmauer;

--
-- Name: TABLE forum_threads; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.forum_threads IS 'Discussion threads for curated content';


--
-- Name: forum_threads_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.forum_threads_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.forum_threads_id_seq OWNER TO matthewmauer;

--
-- Name: forum_threads_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.forum_threads_id_seq OWNED BY public.forum_threads.id;


--
-- Name: forum_votes; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.forum_votes (
    id integer NOT NULL,
    thread_id integer,
    post_id integer,
    user_id character varying(255) NOT NULL,
    vote_type character varying(10) NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT forum_votes_vote_type_check CHECK (((vote_type)::text = ANY ((ARRAY['up'::character varying, 'down'::character varying])::text[]))),
    CONSTRAINT vote_target_check CHECK ((((thread_id IS NOT NULL) AND (post_id IS NULL)) OR ((thread_id IS NULL) AND (post_id IS NOT NULL))))
);


ALTER TABLE public.forum_votes OWNER TO matthewmauer;

--
-- Name: TABLE forum_votes; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.forum_votes IS 'Upvotes/downvotes for threads and posts';


--
-- Name: forum_votes_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.forum_votes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.forum_votes_id_seq OWNER TO matthewmauer;

--
-- Name: forum_votes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.forum_votes_id_seq OWNED BY public.forum_votes.id;


--
-- Name: funding_registry; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.funding_registry (
    id integer NOT NULL,
    package_id integer,
    funding_type character varying(50),
    funding_url text NOT NULL,
    maintainer_name character varying(255),
    maintainer_github character varying(255),
    we_fund boolean DEFAULT false,
    funding_amount numeric(10,2),
    funding_frequency character varying(50),
    is_active boolean DEFAULT true,
    verified_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.funding_registry OWNER TO matthewmauer;

--
-- Name: TABLE funding_registry; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.funding_registry IS 'Tracking of package funding and sponsorship information';


--
-- Name: funding_registry_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.funding_registry_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.funding_registry_id_seq OWNER TO matthewmauer;

--
-- Name: funding_registry_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.funding_registry_id_seq OWNED BY public.funding_registry.id;


--
-- Name: game_assets; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.game_assets (
    app_id uuid NOT NULL,
    asset_data jsonb NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.game_assets OWNER TO matthewmauer;

--
-- Name: TABLE game_assets; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.game_assets IS 'Game-specific assets (inventory definitions, tilemaps, characters)';


--
-- Name: game_lore_bot_posts_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.game_lore_bot_posts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.game_lore_bot_posts_id_seq OWNER TO matthewmauer;

--
-- Name: game_lore_bot_posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.game_lore_bot_posts_id_seq OWNED BY public.brand_bot_posts.id;


--
-- Name: game_lore_characters_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.game_lore_characters_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.game_lore_characters_id_seq OWNER TO matthewmauer;

--
-- Name: game_lore_characters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.game_lore_characters_id_seq OWNED BY public.brand_personas.id;


--
-- Name: game_lore_discussion_templates_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.game_lore_discussion_templates_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.game_lore_discussion_templates_id_seq OWNER TO matthewmauer;

--
-- Name: game_lore_discussion_templates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.game_lore_discussion_templates_id_seq OWNED BY public.brand_discussion_templates.id;


--
-- Name: game_lore_events_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.game_lore_events_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.game_lore_events_id_seq OWNER TO matthewmauer;

--
-- Name: game_lore_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.game_lore_events_id_seq OWNED BY public.brand_milestones.id;


--
-- Name: game_lore_fragments_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.game_lore_fragments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.game_lore_fragments_id_seq OWNER TO matthewmauer;

--
-- Name: game_lore_fragments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.game_lore_fragments_id_seq OWNED BY public.brand_knowledge.id;


--
-- Name: game_lore_games_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.game_lore_games_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.game_lore_games_id_seq OWNER TO matthewmauer;

--
-- Name: game_lore_games_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.game_lore_games_id_seq OWNED BY public.brand_domains.id;


--
-- Name: game_lore_locations_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.game_lore_locations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.game_lore_locations_id_seq OWNER TO matthewmauer;

--
-- Name: game_lore_locations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.game_lore_locations_id_seq OWNED BY public.brand_projects.id;


--
-- Name: generated_documents; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.generated_documents (
    id integer NOT NULL,
    title character varying(500) NOT NULL,
    format character varying(50) NOT NULL,
    template character varying(100),
    source_notes integer[],
    generation_prompt text,
    content text,
    file_path text,
    file_size integer,
    status character varying(50) DEFAULT 'completed'::character varying,
    error_message text,
    approved boolean DEFAULT false,
    approved_at timestamp without time zone,
    user_id character varying(100),
    session_id character varying(100),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    generated_at timestamp without time zone
);


ALTER TABLE public.generated_documents OWNER TO matthewmauer;

--
-- Name: generated_documents_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.generated_documents_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.generated_documents_id_seq OWNER TO matthewmauer;

--
-- Name: generated_documents_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.generated_documents_id_seq OWNED BY public.generated_documents.id;


--
-- Name: git_portfolio_stats; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.git_portfolio_stats (
    id integer NOT NULL,
    user_id integer,
    platform character varying(50) NOT NULL,
    username character varying(255) NOT NULL,
    profile_url character varying(500),
    total_repos integer DEFAULT 0,
    public_repos integer DEFAULT 0,
    private_repos integer DEFAULT 0,
    total_commits integer DEFAULT 0,
    commits_this_year integer DEFAULT 0,
    commits_this_month integer DEFAULT 0,
    total_prs integer DEFAULT 0,
    prs_merged integer DEFAULT 0,
    total_issues integer DEFAULT 0,
    issues_closed integer DEFAULT 0,
    total_stars integer DEFAULT 0,
    total_forks integer DEFAULT 0,
    total_watchers integer DEFAULT 0,
    followers integer DEFAULT 0,
    following integer DEFAULT 0,
    contribution_graph jsonb DEFAULT '{}'::jsonb,
    languages jsonb DEFAULT '{}'::jsonb,
    last_synced_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    sync_status character varying(50) DEFAULT 'pending'::character varying,
    sync_error text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.git_portfolio_stats OWNER TO matthewmauer;

--
-- Name: git_portfolio_stats_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.git_portfolio_stats_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.git_portfolio_stats_id_seq OWNER TO matthewmauer;

--
-- Name: git_portfolio_stats_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.git_portfolio_stats_id_seq OWNED BY public.git_portfolio_stats.id;


--
-- Name: git_portfolio_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.git_portfolio_summary AS
 SELECT git_portfolio_stats.user_id,
    sum(git_portfolio_stats.total_commits) AS total_commits_all_platforms,
    sum(git_portfolio_stats.total_prs) AS total_prs_all_platforms,
    sum(git_portfolio_stats.total_stars) AS total_stars_all_platforms,
    sum(git_portfolio_stats.total_forks) AS total_forks_all_platforms,
    count(*) AS platforms_count
   FROM public.git_portfolio_stats
  GROUP BY git_portfolio_stats.user_id;


ALTER TABLE public.git_portfolio_summary OWNER TO matthewmauer;

--
-- Name: github_activity_feed; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.github_activity_feed (
    id integer NOT NULL,
    user_id text NOT NULL,
    activity_type text NOT NULL,
    content jsonb NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb,
    like_count integer DEFAULT 0,
    comment_count integer DEFAULT 0,
    repost_count integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.github_activity_feed OWNER TO matthewmauer;

--
-- Name: TABLE github_activity_feed; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.github_activity_feed IS 'Twitter-like feed for GitHub activity';


--
-- Name: github_activity_feed_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.github_activity_feed_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.github_activity_feed_id_seq OWNER TO matthewmauer;

--
-- Name: github_activity_feed_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.github_activity_feed_id_seq OWNED BY public.github_activity_feed.id;


--
-- Name: gmail_send_as_aliases; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.gmail_send_as_aliases (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    send_as_email character varying(255) NOT NULL,
    display_name character varying(255),
    reply_to_address character varying(255),
    verification_status character varying(50) DEFAULT 'pending'::character varying,
    verification_sent_at timestamp without time zone,
    is_default boolean DEFAULT false,
    is_primary boolean DEFAULT false,
    signature text,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.gmail_send_as_aliases OWNER TO matthewmauer;

--
-- Name: gmail_send_as_aliases_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.gmail_send_as_aliases_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.gmail_send_as_aliases_id_seq OWNER TO matthewmauer;

--
-- Name: gmail_send_as_aliases_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.gmail_send_as_aliases_id_seq OWNED BY public.gmail_send_as_aliases.id;


--
-- Name: gmail_sent_emails_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.gmail_sent_emails_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.gmail_sent_emails_id_seq OWNER TO matthewmauer;

--
-- Name: gmail_sent_emails_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.gmail_sent_emails_id_seq OWNED BY public.gmail_sent_emails.id;


--
-- Name: gmail_webhook_configs_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.gmail_webhook_configs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.gmail_webhook_configs_id_seq OWNER TO matthewmauer;

--
-- Name: gmail_webhook_configs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.gmail_webhook_configs_id_seq OWNED BY public.gmail_webhook_configs.id;


--
-- Name: golden_snapshots; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.golden_snapshots AS
 SELECT dcs.snapshot_id,
    dcs.domain_context,
    dcs.snapshot_name,
    dcs.snapshot_tag,
    dcs.avg_success_rate,
    dcs.avg_response_time_ms,
    dcs.avg_user_rating,
    dcs.created_at
   FROM public.domain_context_snapshots dcs
  WHERE (dcs.is_golden = true)
  ORDER BY dcs.domain_context, dcs.avg_success_rate DESC;


ALTER TABLE public.golden_snapshots OWNER TO matthewmauer;

--
-- Name: grading_results; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.grading_results (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    track character varying(50) NOT NULL,
    result jsonb NOT NULL,
    score numeric(5,2) NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.grading_results OWNER TO matthewmauer;

--
-- Name: TABLE grading_results; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.grading_results IS 'Grading results for each track (visual, logic, audio)';


--
-- Name: COLUMN grading_results.result; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.grading_results.result IS 'Complete evaluation: { overall, breakdown, feedback, metadata }';


--
-- Name: grading_results_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.grading_results_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.grading_results_id_seq OWNER TO matthewmauer;

--
-- Name: grading_results_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.grading_results_id_seq OWNED BY public.grading_results.id;


--
-- Name: grading_track_breakdown; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.grading_track_breakdown AS
 SELECT compaction_results.id,
    (compaction_results.project ->> 'title'::text) AS title,
    (((((compaction_results.stages -> 'localGrading'::text) -> 'tracks'::text) -> 'visual'::text) ->> 'overall'::text))::numeric AS visual_score,
    (((((compaction_results.stages -> 'localGrading'::text) -> 'tracks'::text) -> 'logic'::text) ->> 'overall'::text))::numeric AS logic_score,
    (((((compaction_results.stages -> 'localGrading'::text) -> 'tracks'::text) -> 'audio'::text) ->> 'overall'::text))::numeric AS audio_score,
    ((((compaction_results.stages -> 'localGrading'::text) -> 'combined'::text) ->> 'overall'::text))::numeric AS combined_local_score,
    compaction_results.created_at
   FROM public.compaction_results
  WHERE ((compaction_results.stages -> 'localGrading'::text) IS NOT NULL)
  ORDER BY compaction_results.created_at DESC;


ALTER TABLE public.grading_track_breakdown OWNER TO matthewmauer;

--
-- Name: guardian_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.guardian_log (
    id integer NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now(),
    event_type character varying(50) NOT NULL,
    severity character varying(20) NOT NULL,
    diagnosis text,
    action_taken text,
    result character varying(20) NOT NULL,
    metadata jsonb,
    tool_calls jsonb,
    CONSTRAINT guardian_log_event_type_check CHECK (((event_type)::text = ANY ((ARRAY['health_check'::character varying, 'healing_action'::character varying, 'monitoring_error'::character varying, 'auto_fix'::character varying])::text[]))),
    CONSTRAINT guardian_log_result_check CHECK (((result)::text = ANY ((ARRAY['healthy'::character varying, 'healed'::character varying, 'unhealthy'::character varying, 'failed'::character varying])::text[]))),
    CONSTRAINT guardian_log_severity_check CHECK (((severity)::text = ANY ((ARRAY['info'::character varying, 'warning'::character varying, 'error'::character varying])::text[])))
);


ALTER TABLE public.guardian_log OWNER TO matthewmauer;

--
-- Name: guardian_activity_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.guardian_activity_summary AS
 SELECT date_trunc('hour'::text, guardian_log."timestamp") AS hour,
    count(*) AS total_checks,
    count(*) FILTER (WHERE ((guardian_log.result)::text = 'healthy'::text)) AS healthy_count,
    count(*) FILTER (WHERE ((guardian_log.result)::text = 'healed'::text)) AS healed_count,
    count(*) FILTER (WHERE ((guardian_log.result)::text = 'unhealthy'::text)) AS unhealthy_count,
    count(*) FILTER (WHERE ((guardian_log.severity)::text = 'error'::text)) AS error_count
   FROM public.guardian_log
  WHERE (guardian_log."timestamp" > (now() - '24:00:00'::interval))
  GROUP BY (date_trunc('hour'::text, guardian_log."timestamp"))
  ORDER BY (date_trunc('hour'::text, guardian_log."timestamp")) DESC;


ALTER TABLE public.guardian_activity_summary OWNER TO matthewmauer;

--
-- Name: guardian_bug_reports; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.guardian_bug_reports (
    report_id uuid DEFAULT gen_random_uuid() NOT NULL,
    service character varying(50) NOT NULL,
    error_message text NOT NULL,
    file_path text,
    line_number integer,
    snippet text,
    stack_trace text,
    diagnosis text,
    suggested_fix text,
    raw_response text,
    status character varying(50) DEFAULT 'reported'::character varying,
    resolution_notes text,
    resolved_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    created_by character varying(255) DEFAULT 'cal-guardian'::character varying
);


ALTER TABLE public.guardian_bug_reports OWNER TO matthewmauer;

--
-- Name: TABLE guardian_bug_reports; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.guardian_bug_reports IS 'Cal Guardian autonomous bug detection and external AI diagnosis';


--
-- Name: COLUMN guardian_bug_reports.service; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.guardian_bug_reports.service IS 'External service used: openai, coderabbit, github';


--
-- Name: COLUMN guardian_bug_reports.suggested_fix; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.guardian_bug_reports.suggested_fix IS 'AI-suggested fix extracted from response';


--
-- Name: COLUMN guardian_bug_reports.status; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.guardian_bug_reports.status IS 'Lifecycle: reported → fix_applied → verified/failed';


--
-- Name: guardian_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.guardian_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.guardian_log_id_seq OWNER TO matthewmauer;

--
-- Name: guardian_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.guardian_log_id_seq OWNED BY public.guardian_log.id;


--
-- Name: guardian_patch_applications; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.guardian_patch_applications (
    patch_id uuid DEFAULT gen_random_uuid() NOT NULL,
    file_path text NOT NULL,
    line_number integer,
    description text,
    old_code text,
    new_code text,
    snapshot_id text,
    rolled_back boolean DEFAULT false,
    success boolean NOT NULL,
    verification_error text,
    tests_passed boolean,
    applied_at timestamp without time zone DEFAULT now(),
    applied_by character varying(255) DEFAULT 'cal-guardian'::character varying,
    source character varying(50)
);


ALTER TABLE public.guardian_patch_applications OWNER TO matthewmauer;

--
-- Name: TABLE guardian_patch_applications; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.guardian_patch_applications IS 'Cal Guardian autonomous patch applications with rollback tracking';


--
-- Name: COLUMN guardian_patch_applications.snapshot_id; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.guardian_patch_applications.snapshot_id IS 'Backup snapshot for rollback if patch fails';


--
-- Name: COLUMN guardian_patch_applications.rolled_back; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.guardian_patch_applications.rolled_back IS 'TRUE if patch was rolled back due to verification failure';


--
-- Name: handle_history; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.handle_history (
    history_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id integer NOT NULL,
    old_handle character varying(30),
    new_handle character varying(30) NOT NULL,
    change_reason text,
    changed_by_user_id integer,
    changed_by_admin text,
    ip_address inet,
    user_agent text,
    changed_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.handle_history OWNER TO matthewmauer;

--
-- Name: health_metrics; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.health_metrics (
    id integer NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now(),
    metric_name character varying(100) NOT NULL,
    metric_value numeric NOT NULL,
    status character varying(20) NOT NULL,
    metadata jsonb,
    CONSTRAINT health_metrics_name_check CHECK (((metric_name)::text = ANY ((ARRAY['api_response_time'::character varying, 'database_query_time'::character varying, 'ollama_response_time'::character varying, 'price_fetch_success_rate'::character varying, 'scheduler_job_success_rate'::character varying, 'test_pass_rate'::character varying, 'system_uptime'::character varying])::text[]))),
    CONSTRAINT health_metrics_status_check CHECK (((status)::text = ANY ((ARRAY['ok'::character varying, 'warning'::character varying, 'error'::character varying])::text[])))
);


ALTER TABLE public.health_metrics OWNER TO matthewmauer;

--
-- Name: health_metrics_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.health_metrics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.health_metrics_id_seq OWNER TO matthewmauer;

--
-- Name: health_metrics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.health_metrics_id_seq OWNED BY public.health_metrics.id;


--
-- Name: heatmap_data; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.heatmap_data (
    id integer NOT NULL,
    session_id uuid,
    device_id character varying(64),
    page character varying(255) NOT NULL,
    room_name character varying(100),
    interaction_type character varying(50) NOT NULL,
    x_position numeric(5,4),
    y_position numeric(5,4),
    raw_x integer,
    raw_y integer,
    viewport_width integer,
    viewport_height integer,
    element_id character varying(255),
    element_class character varying(255),
    element_tag character varying(50),
    recorded_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.heatmap_data OWNER TO matthewmauer;

--
-- Name: heatmap_data_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.heatmap_data_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.heatmap_data_id_seq OWNER TO matthewmauer;

--
-- Name: heatmap_data_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.heatmap_data_id_seq OWNED BY public.heatmap_data.id;


--
-- Name: heatmap_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.heatmap_summary AS
 SELECT heatmap_data.page,
    heatmap_data.room_name,
    heatmap_data.interaction_type,
    round((heatmap_data.x_position)::numeric, 2) AS x_bucket,
    round((heatmap_data.y_position)::numeric, 2) AS y_bucket,
    count(*) AS interaction_count,
    max(heatmap_data.recorded_at) AS last_interaction
   FROM public.heatmap_data
  WHERE (heatmap_data.recorded_at > (now() - '24:00:00'::interval))
  GROUP BY heatmap_data.page, heatmap_data.room_name, heatmap_data.interaction_type, (round((heatmap_data.x_position)::numeric, 2)), (round((heatmap_data.y_position)::numeric, 2))
 HAVING (count(*) > 2)
  ORDER BY (count(*)) DESC;


ALTER TABLE public.heatmap_summary OWNER TO matthewmauer;

--
-- Name: student_hints; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.student_hints (
    hint_id uuid DEFAULT gen_random_uuid() NOT NULL,
    lesson_id uuid NOT NULL,
    path_id uuid NOT NULL,
    user_id character varying(255) NOT NULL,
    hint_text text NOT NULL,
    hint_type character varying(50) DEFAULT 'cryptic'::character varying,
    spoiler_level integer DEFAULT 1,
    helpfulness_score integer DEFAULT 0,
    reported_count integer DEFAULT 0,
    xp_earned integer DEFAULT 0,
    visible boolean DEFAULT true,
    moderated_at timestamp with time zone,
    moderated_by character varying(255),
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.student_hints OWNER TO matthewmauer;

--
-- Name: TABLE student_hints; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.student_hints IS 'Collaborative hints from students using icons, leet speak, and cryptic clues';


--
-- Name: COLUMN student_hints.hint_text; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.student_hints.hint_text IS 'Can contain: emojis 🔥, leet speak (l33t), icons, cryptic clues';


--
-- Name: COLUMN student_hints.spoiler_level; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.student_hints.spoiler_level IS '1=very cryptic, 5=answer given away. Level 5 loses XP!';


--
-- Name: hint_leaderboard; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.hint_leaderboard AS
 SELECT student_hints.user_id,
    count(*) AS total_hints,
    sum(student_hints.helpfulness_score) AS total_helpfulness,
    sum(student_hints.xp_earned) AS total_xp_from_hints,
    (avg(student_hints.helpfulness_score))::numeric(5,2) AS avg_helpfulness,
    count(
        CASE
            WHEN (student_hints.visible = false) THEN 1
            ELSE NULL::integer
        END) AS hidden_hints
   FROM public.student_hints
  GROUP BY student_hints.user_id
  ORDER BY (sum(student_hints.xp_earned)) DESC, (sum(student_hints.helpfulness_score)) DESC;


ALTER TABLE public.hint_leaderboard OWNER TO matthewmauer;

--
-- Name: VIEW hint_leaderboard; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.hint_leaderboard IS 'Rank students by hint helpfulness';


--
-- Name: hint_ratings; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.hint_ratings (
    rating_id uuid DEFAULT gen_random_uuid() NOT NULL,
    hint_id uuid NOT NULL,
    user_id character varying(255) NOT NULL,
    rating integer NOT NULL,
    reason character varying(50),
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT hint_ratings_rating_check CHECK ((rating = ANY (ARRAY['-1'::integer, 1])))
);


ALTER TABLE public.hint_ratings OWNER TO matthewmauer;

--
-- Name: icon_animations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.icon_animations (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    display_name character varying(255),
    description text,
    animation_type character varying(50) NOT NULL,
    config jsonb NOT NULL,
    trigger character varying(50),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.icon_animations OWNER TO matthewmauer;

--
-- Name: TABLE icon_animations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.icon_animations IS 'Desktop icon animation presets';


--
-- Name: icon_animations_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.icon_animations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.icon_animations_id_seq OWNER TO matthewmauer;

--
-- Name: icon_animations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.icon_animations_id_seq OWNED BY public.icon_animations.id;


--
-- Name: idea_purchases; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.idea_purchases (
    id integer NOT NULL,
    idea_id integer NOT NULL,
    buyer_id text NOT NULL,
    creator_id text NOT NULL,
    price_paid numeric(10,2) NOT NULL,
    stripe_payment_intent_id text,
    stripe_customer_id text,
    purchased_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.idea_purchases OWNER TO matthewmauer;

--
-- Name: TABLE idea_purchases; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.idea_purchases IS 'Idea purchase transactions with Stripe integration';


--
-- Name: idea_purchases_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.idea_purchases_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.idea_purchases_id_seq OWNER TO matthewmauer;

--
-- Name: idea_purchases_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.idea_purchases_id_seq OWNED BY public.idea_purchases.id;


--
-- Name: idea_votes; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.idea_votes (
    id integer NOT NULL,
    idea_id integer NOT NULL,
    user_id text NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.idea_votes OWNER TO matthewmauer;

--
-- Name: TABLE idea_votes; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.idea_votes IS 'Free upvotes for marketplace ideas';


--
-- Name: idea_votes_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.idea_votes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.idea_votes_id_seq OWNER TO matthewmauer;

--
-- Name: idea_votes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.idea_votes_id_seq OWNED BY public.idea_votes.id;


--
-- Name: identity_resolution_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.identity_resolution_log (
    resolution_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id character varying(255) NOT NULL,
    game_id uuid,
    initial_data jsonb NOT NULL,
    discovered_data jsonb,
    discovery_method character varying(100),
    accuracy_score numeric(3,2),
    privacy_score numeric(3,2),
    learned_techniques text[],
    ethical_concerns text,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.identity_resolution_log OWNER TO matthewmauer;

--
-- Name: TABLE identity_resolution_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.identity_resolution_log IS 'Track OSINT learning - how to link data points (and why privacy matters)';


--
-- Name: iiif_cache_stats; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.iiif_cache_stats (
    id integer NOT NULL,
    image_id integer,
    request_path text NOT NULL,
    cache_key character varying(255),
    hit_count integer DEFAULT 0,
    last_accessed timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.iiif_cache_stats OWNER TO matthewmauer;

--
-- Name: iiif_cache_stats_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.iiif_cache_stats_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.iiif_cache_stats_id_seq OWNER TO matthewmauer;

--
-- Name: iiif_cache_stats_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.iiif_cache_stats_id_seq OWNED BY public.iiif_cache_stats.id;


--
-- Name: iiif_canvas_images; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.iiif_canvas_images (
    id integer NOT NULL,
    manifest_id integer,
    image_id integer,
    canvas_order integer NOT NULL,
    canvas_label character varying(255)
);


ALTER TABLE public.iiif_canvas_images OWNER TO matthewmauer;

--
-- Name: iiif_canvas_images_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.iiif_canvas_images_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.iiif_canvas_images_id_seq OWNER TO matthewmauer;

--
-- Name: iiif_canvas_images_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.iiif_canvas_images_id_seq OWNED BY public.iiif_canvas_images.id;


--
-- Name: iiif_images; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.iiif_images (
    id integer NOT NULL,
    filename character varying(255) NOT NULL,
    original_filename character varying(255),
    width integer NOT NULL,
    height integer NOT NULL,
    format character varying(20),
    file_size bigint,
    storage_path text NOT NULL,
    thumbnail_path text,
    title character varying(500),
    description text,
    metadata jsonb DEFAULT '{}'::jsonb,
    tags text[],
    user_id character varying(100),
    session_id character varying(100),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.iiif_images OWNER TO matthewmauer;

--
-- Name: iiif_images_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.iiif_images_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.iiif_images_id_seq OWNER TO matthewmauer;

--
-- Name: iiif_images_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.iiif_images_id_seq OWNED BY public.iiif_images.id;


--
-- Name: iiif_manifests; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.iiif_manifests (
    id integer NOT NULL,
    manifest_id character varying(255) NOT NULL,
    title character varying(500),
    description text,
    author character varying(255),
    manifest_json jsonb NOT NULL,
    is_public boolean DEFAULT false,
    user_id character varying(100),
    session_id character varying(100),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.iiif_manifests OWNER TO matthewmauer;

--
-- Name: iiif_manifests_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.iiif_manifests_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.iiif_manifests_id_seq OWNER TO matthewmauer;

--
-- Name: iiif_manifests_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.iiif_manifests_id_seq OWNED BY public.iiif_manifests.id;


--
-- Name: implementation_quality; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.implementation_quality AS
SELECT
    NULL::uuid AS implementation_id,
    NULL::uuid AS challenge_id,
    NULL::character varying(255) AS domain_name,
    NULL::character varying(255) AS brand_name,
    NULL::character varying(7) AS primary_color,
    NULL::integer AS code_length,
    NULL::boolean AS has_comments,
    NULL::boolean AS uses_domain_colors,
    NULL::boolean AS uses_expected_services,
    NULL::integer AS swipe_right_count,
    NULL::integer AS swipe_left_count,
    NULL::integer AS feedback_count,
    NULL::numeric AS avg_creativity,
    NULL::numeric AS avg_functionality,
    NULL::numeric AS avg_code_quality,
    NULL::numeric AS avg_brand_alignment,
    NULL::numeric(10,2) AS total_score,
    NULL::timestamp without time zone AS created_at;


ALTER TABLE public.implementation_quality OWNER TO matthewmauer;

--
-- Name: incentive_tracker; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.incentive_tracker (
    id integer NOT NULL,
    profile_id integer NOT NULL,
    level_completion_bonus numeric(10,2) DEFAULT 0.00,
    question_rewards numeric(10,2) DEFAULT 0.00,
    brand_idea_bonus numeric(10,2) DEFAULT 0.00,
    quality_bonus numeric(10,2) DEFAULT 0.00,
    total_earned numeric(10,2) DEFAULT 0.00,
    levels_completed integer[] DEFAULT '{}'::integer[],
    questions_answered integer DEFAULT 0,
    brand_ideas_submitted integer DEFAULT 0,
    avg_quality_score numeric(5,2),
    calculated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.incentive_tracker OWNER TO matthewmauer;

--
-- Name: incentive_tracker_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.incentive_tracker_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.incentive_tracker_id_seq OWNER TO matthewmauer;

--
-- Name: incentive_tracker_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.incentive_tracker_id_seq OWNED BY public.incentive_tracker.id;


--
-- Name: inventory_items; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.inventory_items (
    app_id uuid NOT NULL,
    user_id uuid NOT NULL,
    slot_index integer NOT NULL,
    item_id text NOT NULL,
    item_type text NOT NULL,
    item_name text NOT NULL,
    quantity integer DEFAULT 1,
    rarity text DEFAULT 'common'::text,
    stackable boolean DEFAULT false,
    max_stack integer DEFAULT 99,
    value integer DEFAULT 0,
    metadata jsonb DEFAULT '{}'::jsonb,
    acquired_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.inventory_items OWNER TO matthewmauer;

--
-- Name: TABLE inventory_items; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.inventory_items IS 'Items in player inventory (potions, weapons, armor)';


--
-- Name: player_inventories; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.player_inventories (
    app_id uuid NOT NULL,
    user_id uuid NOT NULL,
    total_slots integer DEFAULT 20,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.player_inventories OWNER TO matthewmauer;

--
-- Name: TABLE player_inventories; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.player_inventories IS 'Player inventory configuration (total slots, etc)';


--
-- Name: inventory_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.inventory_summary AS
 SELECT pi.app_id,
    pi.user_id,
    pi.total_slots,
    count(ii.slot_index) AS used_slots,
    (pi.total_slots - count(ii.slot_index)) AS empty_slots,
    round((((count(ii.slot_index))::numeric / (pi.total_slots)::numeric) * (100)::numeric), 2) AS capacity_percent,
    sum((ii.value * ii.quantity)) AS total_value
   FROM (public.player_inventories pi
     LEFT JOIN public.inventory_items ii ON (((ii.app_id = pi.app_id) AND (ii.user_id = pi.user_id))))
  GROUP BY pi.app_id, pi.user_id, pi.total_slots;


ALTER TABLE public.inventory_summary OWNER TO matthewmauer;

--
-- Name: VIEW inventory_summary; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.inventory_summary IS 'Summary of player inventory status';


--
-- Name: inverse_correlations; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.inverse_correlations AS
 SELECT price_correlations.symbol1,
    price_correlations.symbol2,
    price_correlations.correlation,
    price_correlations.strength,
    price_correlations.data_points,
    price_correlations.timeframe,
    price_correlations.calculated_at,
    abs(price_correlations.correlation) AS inverse_strength
   FROM public.price_correlations
  WHERE (price_correlations.correlation < '-0.4'::numeric)
  ORDER BY price_correlations.correlation, price_correlations.calculated_at DESC;


ALTER TABLE public.inverse_correlations OWNER TO matthewmauer;

--
-- Name: VIEW inverse_correlations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.inverse_correlations IS 'Inverse correlations (r < -0.4) useful for hedging';


--
-- Name: ip_registry_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.ip_registry_summary AS
 SELECT authorship_registry.user_id,
    count(*) AS total_ip_entries,
    count(*) FILTER (WHERE ((authorship_registry.ip_type)::text = 'patent'::text)) AS patents_count,
    count(*) FILTER (WHERE ((authorship_registry.ip_type)::text = 'trademark'::text)) AS trademarks_count,
    count(*) FILTER (WHERE ((authorship_registry.ip_type)::text = 'copyright'::text)) AS copyrights_count,
    count(*) FILTER (WHERE ((authorship_registry.status)::text = 'registered'::text)) AS registered_count,
    count(*) FILTER (WHERE ((authorship_registry.status)::text = 'pending'::text)) AS pending_count
   FROM public.authorship_registry
  GROUP BY authorship_registry.user_id;


ALTER TABLE public.ip_registry_summary OWNER TO matthewmauer;

--
-- Name: item_rarity_distribution; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.item_rarity_distribution AS
 SELECT inventory_items.app_id,
    inventory_items.user_id,
    inventory_items.rarity,
    count(*) AS count,
    sum(inventory_items.quantity) AS total_quantity
   FROM public.inventory_items
  GROUP BY inventory_items.app_id, inventory_items.user_id, inventory_items.rarity
  ORDER BY inventory_items.app_id, inventory_items.user_id, inventory_items.rarity;


ALTER TABLE public.item_rarity_distribution OWNER TO matthewmauer;

--
-- Name: VIEW item_rarity_distribution; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.item_rarity_distribution IS 'Distribution of items by rarity tier';


--
-- Name: job_execution_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.job_execution_log (
    id integer NOT NULL,
    job_id integer,
    started_at timestamp without time zone NOT NULL,
    completed_at timestamp without time zone,
    duration_seconds integer,
    status character varying(50) NOT NULL,
    error_message text,
    result_data jsonb,
    metrics jsonb
);


ALTER TABLE public.job_execution_log OWNER TO matthewmauer;

--
-- Name: job_execution_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.job_execution_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.job_execution_log_id_seq OWNER TO matthewmauer;

--
-- Name: job_execution_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.job_execution_log_id_seq OWNED BY public.job_execution_log.id;


--
-- Name: karma_transactions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.karma_transactions (
    id integer NOT NULL,
    user_id text NOT NULL,
    action_type text NOT NULL,
    karma_value integer NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.karma_transactions OWNER TO matthewmauer;

--
-- Name: TABLE karma_transactions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.karma_transactions IS 'Detailed karma transaction history';


--
-- Name: karma_transactions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.karma_transactions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.karma_transactions_id_seq OWNER TO matthewmauer;

--
-- Name: karma_transactions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.karma_transactions_id_seq OWNED BY public.karma_transactions.id;


--
-- Name: keyword_tracking; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.keyword_tracking (
    keyword_id uuid DEFAULT gen_random_uuid() NOT NULL,
    keyword character varying(255) NOT NULL,
    primary_domain_id uuid,
    related_domain_ids uuid[],
    search_volume integer DEFAULT 0,
    competition_level character varying(20),
    suggested_bid numeric(10,2),
    total_mentions integer DEFAULT 0,
    total_conversions integer DEFAULT 0,
    conversion_rate numeric(5,2) DEFAULT 0.00,
    cost_per_conversion numeric(10,2),
    quality_score integer,
    impressions integer DEFAULT 0,
    clicks integer DEFAULT 0,
    cost_spent numeric(10,2) DEFAULT 0.00,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.keyword_tracking OWNER TO matthewmauer;

--
-- Name: TABLE keyword_tracking; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.keyword_tracking IS 'Keyword performance for AdWords optimization';


--
-- Name: keyword_performance; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.keyword_performance AS
 SELECT k.keyword,
    k.search_volume,
    k.competition_level,
    k.suggested_bid,
    k.quality_score,
    k.clicks,
    k.impressions,
        CASE
            WHEN (k.impressions > 0) THEN round((((k.clicks)::numeric / (k.impressions)::numeric) * (100)::numeric), 2)
            ELSE (0)::numeric
        END AS ctr_percentage,
    k.cost_spent,
        CASE
            WHEN (k.clicks > 0) THEN round((k.cost_spent / (k.clicks)::numeric), 2)
            ELSE (0)::numeric
        END AS actual_cpc,
    k.total_conversions,
    k.cost_per_conversion,
    dp.domain_name AS primary_domain
   FROM (public.keyword_tracking k
     LEFT JOIN public.domain_portfolio dp ON ((k.primary_domain_id = dp.domain_id)))
  ORDER BY k.quality_score DESC, k.clicks DESC;


ALTER TABLE public.keyword_performance OWNER TO matthewmauer;

--
-- Name: knowledge_approvals; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.knowledge_approvals (
    id integer NOT NULL,
    action_type character varying(50) NOT NULL,
    proposed_data jsonb NOT NULL,
    reasoning text,
    related_notes integer[],
    session_id character varying(100),
    user_id character varying(100),
    status character varying(50) DEFAULT 'pending'::character varying,
    approved_at timestamp without time zone,
    rejected_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp without time zone DEFAULT (CURRENT_TIMESTAMP + '24:00:00'::interval)
);


ALTER TABLE public.knowledge_approvals OWNER TO matthewmauer;

--
-- Name: knowledge_approvals_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.knowledge_approvals_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.knowledge_approvals_id_seq OWNER TO matthewmauer;

--
-- Name: knowledge_approvals_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.knowledge_approvals_id_seq OWNED BY public.knowledge_approvals.id;


--
-- Name: knowledge_chats_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.knowledge_chats_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.knowledge_chats_id_seq OWNER TO matthewmauer;

--
-- Name: knowledge_chats_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.knowledge_chats_id_seq OWNED BY public.knowledge_chats.id;


--
-- Name: knowledge_patterns; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.knowledge_patterns (
    id integer NOT NULL,
    pattern_type character varying(100) DEFAULT 'debugging_pattern'::character varying NOT NULL,
    pattern_name character varying(500) NOT NULL,
    problem_description text NOT NULL,
    solution_description text NOT NULL,
    steps text,
    keywords text[],
    context jsonb,
    severity character varying(50),
    category character varying(100),
    occurrence_count integer DEFAULT 1,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_seen_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.knowledge_patterns OWNER TO matthewmauer;

--
-- Name: knowledge_patterns_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.knowledge_patterns_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.knowledge_patterns_id_seq OWNER TO matthewmauer;

--
-- Name: knowledge_patterns_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.knowledge_patterns_id_seq OWNED BY public.knowledge_patterns.id;


--
-- Name: last_names; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.last_names (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    origin character varying(100),
    frequency integer DEFAULT 50,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.last_names OWNER TO matthewmauer;

--
-- Name: last_names_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.last_names_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.last_names_id_seq OWNER TO matthewmauer;

--
-- Name: last_names_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.last_names_id_seq OWNED BY public.last_names.id;


--
-- Name: price_candles; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_candles (
    id integer NOT NULL,
    symbol character varying(20) NOT NULL,
    asset_type character varying(20) NOT NULL,
    timeframe character varying(10) NOT NULL,
    open_price numeric(20,8) NOT NULL,
    high_price numeric(20,8) NOT NULL,
    low_price numeric(20,8) NOT NULL,
    close_price numeric(20,8) NOT NULL,
    volume numeric(20,2),
    trades_count integer,
    change_percent numeric(10,4),
    candle_start timestamp without time zone NOT NULL,
    candle_end timestamp without time zone NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.price_candles OWNER TO matthewmauer;

--
-- Name: latest_candles; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.latest_candles AS
 SELECT DISTINCT ON (price_candles.symbol, price_candles.asset_type, price_candles.timeframe) price_candles.symbol,
    price_candles.asset_type,
    price_candles.timeframe,
    price_candles.open_price,
    price_candles.high_price,
    price_candles.low_price,
    price_candles.close_price,
    price_candles.volume,
    price_candles.change_percent,
    price_candles.candle_start,
    price_candles.candle_end
   FROM public.price_candles
  ORDER BY price_candles.symbol, price_candles.asset_type, price_candles.timeframe, price_candles.candle_start DESC;


ALTER TABLE public.latest_candles OWNER TO matthewmauer;

--
-- Name: latest_correlations; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.latest_correlations AS
 SELECT DISTINCT ON (price_correlations.symbol1, price_correlations.symbol2, price_correlations.timeframe) price_correlations.symbol1,
    price_correlations.symbol2,
    price_correlations.correlation,
    price_correlations.strength,
    price_correlations.relationship,
    price_correlations.data_points,
    price_correlations.timeframe,
    price_correlations.calculated_at,
        CASE
            WHEN (abs(price_correlations.correlation) >= 0.7) THEN ('Very '::text ||
            CASE
                WHEN (price_correlations.correlation > (0)::numeric) THEN 'correlated'::text
                ELSE 'inversely correlated'::text
            END)
            WHEN (abs(price_correlations.correlation) >= 0.4) THEN ('Moderately '::text ||
            CASE
                WHEN (price_correlations.correlation > (0)::numeric) THEN 'correlated'::text
                ELSE 'inversely correlated'::text
            END)
            ELSE 'Weakly correlated'::text
        END AS interpretation
   FROM public.price_correlations
  ORDER BY price_correlations.symbol1, price_correlations.symbol2, price_correlations.timeframe, price_correlations.calculated_at DESC;


ALTER TABLE public.latest_correlations OWNER TO matthewmauer;

--
-- Name: VIEW latest_correlations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.latest_correlations IS 'Most recent correlation for each asset pair and timeframe';


--
-- Name: price_indicators; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_indicators (
    id integer NOT NULL,
    symbol character varying(20) NOT NULL,
    asset_type character varying(20) NOT NULL,
    timeframe character varying(10) NOT NULL,
    sma_9 numeric(20,8),
    sma_20 numeric(20,8),
    sma_50 numeric(20,8),
    sma_200 numeric(20,8),
    ema_9 numeric(20,8),
    ema_20 numeric(20,8),
    rsi_14 numeric(10,4),
    macd numeric(20,8),
    macd_signal numeric(20,8),
    macd_histogram numeric(20,8),
    bb_upper numeric(20,8),
    bb_middle numeric(20,8),
    bb_lower numeric(20,8),
    atr_14 numeric(20,8),
    volume_sma_20 numeric(20,2),
    obv numeric(30,2),
    calculated_at timestamp without time zone NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.price_indicators OWNER TO matthewmauer;

--
-- Name: latest_indicators; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.latest_indicators AS
 SELECT DISTINCT ON (price_indicators.symbol, price_indicators.asset_type, price_indicators.timeframe) price_indicators.symbol,
    price_indicators.asset_type,
    price_indicators.timeframe,
    price_indicators.sma_20,
    price_indicators.sma_50,
    price_indicators.ema_20,
    price_indicators.rsi_14,
    price_indicators.macd,
    price_indicators.macd_signal,
    price_indicators.bb_upper,
    price_indicators.bb_middle,
    price_indicators.bb_lower,
    price_indicators.atr_14,
    price_indicators.calculated_at
   FROM public.price_indicators
  ORDER BY price_indicators.symbol, price_indicators.asset_type, price_indicators.timeframe, price_indicators.calculated_at DESC;


ALTER TABLE public.latest_indicators OWNER TO matthewmauer;

--
-- Name: price_history; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_history (
    id integer NOT NULL,
    symbol character varying(20) NOT NULL,
    asset_type character varying(20) NOT NULL,
    price numeric(20,8) NOT NULL,
    change_24h numeric(10,4),
    volume_24h numeric(20,2),
    currency character varying(10) DEFAULT 'USD'::character varying,
    source character varying(50),
    recorded_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.price_history OWNER TO matthewmauer;

--
-- Name: latest_prices; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.latest_prices AS
 SELECT DISTINCT ON (price_history.symbol, price_history.asset_type) price_history.symbol,
    price_history.asset_type,
    price_history.price,
    price_history.change_24h,
    price_history.volume_24h,
    price_history.currency,
    price_history.source,
    price_history.recorded_at
   FROM public.price_history
  ORDER BY price_history.symbol, price_history.asset_type, price_history.recorded_at DESC;


ALTER TABLE public.latest_prices OWNER TO matthewmauer;

--
-- Name: latest_replicas; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.latest_replicas AS
 SELECT DISTINCT ON (data_replicas.data_type, data_replicas.params) data_replicas.data_type,
    data_replicas.params,
    data_replicas.validated_data,
    data_replicas.source_count,
    data_replicas.sources,
    data_replicas.replicated_at
   FROM public.data_replicas
  ORDER BY data_replicas.data_type, data_replicas.params, data_replicas.replicated_at DESC;


ALTER TABLE public.latest_replicas OWNER TO matthewmauer;

--
-- Name: launcher_apps; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.launcher_apps (
    user_id uuid NOT NULL,
    app_id uuid NOT NULL,
    folder_id uuid,
    "position" integer NOT NULL,
    added_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.launcher_apps OWNER TO matthewmauer;

--
-- Name: TABLE launcher_apps; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.launcher_apps IS 'Apps in user launcher (home screen)';


--
-- Name: launcher_folders; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.launcher_folders (
    folder_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    name text NOT NULL,
    icon text DEFAULT '📁'::text,
    "position" integer NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.launcher_folders OWNER TO matthewmauer;

--
-- Name: TABLE launcher_folders; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.launcher_folders IS 'iPhone-style folders in launcher';


--
-- Name: leaderboard; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.leaderboard AS
 SELECT cs.submission_id,
    cs.user_id,
    cs.challenge_id,
    cs.file_name,
    cs.content_type,
    cs.average_score,
    cs.scores_by_track,
    cs.created_at,
    rank() OVER (ORDER BY cs.average_score DESC) AS rank
   FROM public.combined_scores cs
  WHERE (cs.tracks_graded > 0)
  ORDER BY cs.average_score DESC;


ALTER TABLE public.leaderboard OWNER TO matthewmauer;

--
-- Name: learning_paths; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.learning_paths (
    path_id uuid DEFAULT gen_random_uuid() NOT NULL,
    domain_id uuid NOT NULL,
    path_name character varying(255) NOT NULL,
    path_slug character varying(255) NOT NULL,
    tagline text,
    description text,
    difficulty character varying(50) DEFAULT 'beginner'::character varying,
    total_lessons integer DEFAULT 0,
    estimated_hours numeric(5,2),
    skills_learned text[],
    xp_reward_per_lesson integer DEFAULT 100,
    completion_badge_url text,
    status character varying(50) DEFAULT 'active'::character varying,
    published_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    icon_emoji text
);


ALTER TABLE public.learning_paths OWNER TO matthewmauer;

--
-- Name: COLUMN learning_paths.icon_emoji; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.learning_paths.icon_emoji IS 'Emoji icon for the learning path (e.g., 🎓, 🚀, 💻)';


--
-- Name: lesson_completions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.lesson_completions (
    completion_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id character varying(255) NOT NULL,
    lesson_id uuid NOT NULL,
    progress_id uuid,
    time_spent_seconds integer,
    attempts integer DEFAULT 1,
    perfect_score boolean DEFAULT false,
    implementation_id uuid,
    code_quality_score numeric(5,2),
    xp_earned integer DEFAULT 0,
    bonus_xp_earned integer DEFAULT 0,
    badges_earned text[],
    completed_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.lesson_completions OWNER TO matthewmauer;

--
-- Name: lessons; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.lessons (
    lesson_id uuid DEFAULT gen_random_uuid() NOT NULL,
    path_id uuid NOT NULL,
    lesson_number integer NOT NULL,
    lesson_title character varying(255) NOT NULL,
    lesson_slug character varying(255) NOT NULL,
    description text,
    learning_objectives text[],
    requires_lesson_id uuid,
    required_xp integer DEFAULT 0,
    content_type character varying(50) DEFAULT 'challenge'::character varying,
    content_data jsonb,
    estimated_minutes integer DEFAULT 30,
    challenge_id uuid,
    xp_reward integer DEFAULT 100,
    bonus_xp_conditions jsonb,
    status character varying(50) DEFAULT 'published'::character varying,
    published_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.lessons OWNER TO matthewmauer;

--
-- Name: marketplace_ideas; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.marketplace_ideas (
    id integer NOT NULL,
    creator_id text NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    category text DEFAULT 'general'::text,
    tags text[] DEFAULT ARRAY[]::text[],
    metadata jsonb DEFAULT '{}'::jsonb,
    price numeric(10,2) DEFAULT 1.00,
    vote_count integer DEFAULT 0,
    purchase_count integer DEFAULT 0,
    total_revenue numeric(10,2) DEFAULT 0.00,
    status text DEFAULT 'active'::text,
    allow_preview boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.marketplace_ideas OWNER TO matthewmauer;

--
-- Name: TABLE marketplace_ideas; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.marketplace_ideas IS 'Anonymous idea submissions for marketplace';


--
-- Name: marketplace_ideas_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.marketplace_ideas_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.marketplace_ideas_id_seq OWNER TO matthewmauer;

--
-- Name: marketplace_ideas_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.marketplace_ideas_id_seq OWNED BY public.marketplace_ideas.id;


--
-- Name: message_agent_routing; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.message_agent_routing (
    id integer NOT NULL,
    message_id integer NOT NULL,
    agent_id text NOT NULL,
    agent_type text NOT NULL,
    response_at timestamp without time zone,
    routed_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.message_agent_routing OWNER TO matthewmauer;

--
-- Name: TABLE message_agent_routing; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.message_agent_routing IS 'Messages handled by agent swarm';


--
-- Name: message_agent_routing_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.message_agent_routing_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.message_agent_routing_id_seq OWNER TO matthewmauer;

--
-- Name: message_agent_routing_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.message_agent_routing_id_seq OWNED BY public.message_agent_routing.id;


--
-- Name: message_slack_routing; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.message_slack_routing (
    id integer NOT NULL,
    message_id integer NOT NULL,
    slack_message_ts text NOT NULL,
    slack_channel_id text NOT NULL,
    routed_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.message_slack_routing OWNER TO matthewmauer;

--
-- Name: TABLE message_slack_routing; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.message_slack_routing IS 'Messages routed to Slack channels';


--
-- Name: message_slack_routing_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.message_slack_routing_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.message_slack_routing_id_seq OWNER TO matthewmauer;

--
-- Name: message_slack_routing_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.message_slack_routing_id_seq OWNED BY public.message_slack_routing.id;


--
-- Name: migration_history; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.migration_history (
    migration_id integer NOT NULL,
    migration_name character varying(255) NOT NULL,
    executed_at timestamp with time zone DEFAULT now(),
    execution_time_ms integer,
    success boolean DEFAULT true,
    error_message text
);


ALTER TABLE public.migration_history OWNER TO matthewmauer;

--
-- Name: migration_history_migration_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.migration_history_migration_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.migration_history_migration_id_seq OWNER TO matthewmauer;

--
-- Name: migration_history_migration_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.migration_history_migration_id_seq OWNED BY public.migration_history.migration_id;


--
-- Name: mini_games; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.mini_games (
    game_id uuid DEFAULT gen_random_uuid() NOT NULL,
    domain_id uuid,
    game_type character varying(50) NOT NULL,
    game_title character varying(255) NOT NULL,
    difficulty character varying(50) DEFAULT 'medium'::character varying,
    game_data jsonb NOT NULL,
    correct_answer text,
    hint_1 text,
    hint_2 text,
    hint_3 text,
    available_date date DEFAULT CURRENT_DATE,
    expires_at timestamp without time zone,
    xp_reward integer DEFAULT 50,
    streak_bonus integer DEFAULT 10,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.mini_games OWNER TO matthewmauer;

--
-- Name: model_benchmarks; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_benchmarks (
    id integer NOT NULL,
    model_id text NOT NULL,
    model_family text,
    model_size text,
    avg_tokens_per_second real,
    p50_tokens_per_second real,
    p95_tokens_per_second real,
    min_tokens_per_second real,
    max_tokens_per_second real,
    avg_prompt_tokens integer,
    avg_response_tokens integer,
    max_context_tokens integer DEFAULT 4096,
    min_vram_gb integer,
    min_ram_gb integer,
    min_cpu_cores integer,
    recommended_gpu text,
    cost_per_million_tokens real,
    cost_currency text DEFAULT 'USD'::text,
    benchmark_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    measurements_count integer DEFAULT 0,
    paper_citation text,
    paper_url text,
    hardware_spec text,
    silicon_vendor text,
    avg_success_rate real,
    avg_user_satisfaction real,
    is_fast boolean GENERATED ALWAYS AS ((avg_tokens_per_second > (30)::double precision)) STORED,
    is_slow boolean GENERATED ALWAYS AS ((avg_tokens_per_second < (10)::double precision)) STORED,
    is_expensive boolean GENERATED ALWAYS AS ((cost_per_million_tokens > (10)::double precision)) STORED,
    is_active boolean DEFAULT true,
    is_internal boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.model_benchmarks OWNER TO matthewmauer;

--
-- Name: TABLE model_benchmarks; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_benchmarks IS 'Model throughput benchmarks - like Bitcoin mining hash rates. Enables predictable block times.';


--
-- Name: model_benchmarks_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_benchmarks_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_benchmarks_id_seq OWNER TO matthewmauer;

--
-- Name: model_benchmarks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_benchmarks_id_seq OWNED BY public.model_benchmarks.id;


--
-- Name: model_comparisons; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_comparisons (
    id integer NOT NULL,
    our_model_id text NOT NULL,
    reference_name text NOT NULL,
    reference_url text,
    reference_tps real,
    our_tps real,
    performance_ratio real GENERATED ALWAYS AS (
CASE
    WHEN (reference_tps > (0)::double precision) THEN (our_tps / reference_tps)
    ELSE NULL::real
END) STORED,
    reference_hardware text,
    our_hardware text,
    notes text,
    is_fair_comparison boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.model_comparisons OWNER TO matthewmauer;

--
-- Name: TABLE model_comparisons; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_comparisons IS 'Compare our performance against published papers and industry benchmarks';


--
-- Name: model_comparisons_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_comparisons_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_comparisons_id_seq OWNER TO matthewmauer;

--
-- Name: model_comparisons_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_comparisons_id_seq OWNED BY public.model_comparisons.id;


--
-- Name: model_discovery_events; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_discovery_events (
    id integer NOT NULL,
    total_models integer DEFAULT 0,
    sources_scanned integer DEFAULT 0,
    errors jsonb DEFAULT '[]'::jsonb,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.model_discovery_events OWNER TO matthewmauer;

--
-- Name: TABLE model_discovery_events; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_discovery_events IS 'Log of model discovery scans';


--
-- Name: model_discovery_events_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_discovery_events_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_discovery_events_id_seq OWNER TO matthewmauer;

--
-- Name: model_discovery_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_discovery_events_id_seq OWNED BY public.model_discovery_events.id;


--
-- Name: model_performance; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_performance (
    id integer NOT NULL,
    provider character varying(50) NOT NULL,
    model_name character varying(255) NOT NULL,
    avg_latency_ms integer,
    avg_quality_rating numeric(3,2),
    success_rate numeric(5,2),
    total_requests integer DEFAULT 0,
    measured_at timestamp with time zone DEFAULT now(),
    window_start timestamp with time zone,
    window_end timestamp with time zone,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.model_performance OWNER TO matthewmauer;

--
-- Name: TABLE model_performance; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_performance IS 'Historical performance metrics for AI models';


--
-- Name: model_performance_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_performance_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_performance_id_seq OWNER TO matthewmauer;

--
-- Name: model_performance_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_performance_id_seq OWNED BY public.model_performance.id;


--
-- Name: model_pricing; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_pricing (
    id integer NOT NULL,
    provider character varying(50) NOT NULL,
    model_name character varying(255) NOT NULL,
    input_price_per_1k numeric(10,6) NOT NULL,
    output_price_per_1k numeric(10,6) NOT NULL,
    quality_score integer,
    speed_score integer,
    context_window integer,
    fetched_at timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT model_pricing_input_price_per_1k_check CHECK ((input_price_per_1k >= (0)::numeric)),
    CONSTRAINT model_pricing_output_price_per_1k_check CHECK ((output_price_per_1k >= (0)::numeric)),
    CONSTRAINT model_pricing_quality_score_check CHECK (((quality_score >= 0) AND (quality_score <= 100))),
    CONSTRAINT model_pricing_speed_score_check CHECK (((speed_score >= 0) AND (speed_score <= 100)))
);


ALTER TABLE public.model_pricing OWNER TO matthewmauer;

--
-- Name: TABLE model_pricing; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_pricing IS 'Real-time AI model pricing fetched from provider APIs';


--
-- Name: COLUMN model_pricing.quality_score; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.model_pricing.quality_score IS 'Model quality score (0-100) based on benchmarks';


--
-- Name: COLUMN model_pricing.speed_score; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.model_pricing.speed_score IS 'Model speed score (0-100) based on latency tests';


--
-- Name: model_pricing_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_pricing_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_pricing_id_seq OWNER TO matthewmauer;

--
-- Name: model_pricing_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_pricing_id_seq OWNED BY public.model_pricing.id;


--
-- Name: model_rankings; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_rankings (
    id integer NOT NULL,
    use_case_id integer,
    use_case_category text NOT NULL,
    model_id text NOT NULL,
    model_provider text,
    total_requests integer DEFAULT 0,
    successful_requests integer DEFAULT 0,
    failed_requests integer DEFAULT 0,
    success_rate real GENERATED ALWAYS AS (
CASE
    WHEN (total_requests > 0) THEN ((successful_requests)::real / (total_requests)::real)
    ELSE (0)::real
END) STORED,
    avg_response_time_ms real,
    p95_response_time_ms real,
    avg_followup_rate real,
    avg_abandon_rate real,
    avg_satisfaction_score real,
    avg_cost_per_request real,
    total_cost_usd real DEFAULT 0,
    avg_tokens integer,
    avg_tokens_per_char real,
    ranking_score real,
    last_updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.model_rankings OWNER TO matthewmauer;

--
-- Name: TABLE model_rankings; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_rankings IS 'Model performance rankings per use case, based on real metrics';


--
-- Name: model_rankings_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_rankings_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_rankings_id_seq OWNER TO matthewmauer;

--
-- Name: model_rankings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_rankings_id_seq OWNED BY public.model_rankings.id;


--
-- Name: model_recommendations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_recommendations (
    id integer NOT NULL,
    session_id character varying(255),
    user_id character varying(255),
    tenant_id uuid,
    prompt_length integer,
    prompt_complexity integer,
    has_code boolean DEFAULT false,
    has_reasoning boolean DEFAULT false,
    recommended_provider character varying(50),
    recommended_model character varying(255),
    recommendation_score numeric(5,2),
    reasoning text,
    alternatives jsonb,
    budget_mode character varying(50),
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.model_recommendations OWNER TO matthewmauer;

--
-- Name: TABLE model_recommendations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_recommendations IS 'Track ModelClarityEngine recommendations for analysis';


--
-- Name: model_recommendations_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_recommendations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_recommendations_id_seq OWNER TO matthewmauer;

--
-- Name: model_recommendations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_recommendations_id_seq OWNED BY public.model_recommendations.id;


--
-- Name: model_storage; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_storage (
    id integer NOT NULL,
    model_id text NOT NULL,
    model_name text NOT NULL,
    model_version text,
    bucket_name text DEFAULT 'calos-models'::text,
    object_path text,
    object_size bigint,
    file_format text,
    quantization text,
    parameter_count text,
    family text,
    trained_on text,
    context_length integer,
    is_downloaded boolean DEFAULT false,
    local_path text,
    uploaded_at timestamp with time zone,
    last_accessed timestamp with time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.model_storage OWNER TO matthewmauer;

--
-- Name: TABLE model_storage; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_storage IS 'MinIO bucket storage metadata for model files';


--
-- Name: model_storage_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_storage_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_storage_id_seq OWNER TO matthewmauer;

--
-- Name: model_storage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_storage_id_seq OWNED BY public.model_storage.id;


--
-- Name: model_usage_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_usage_log (
    id integer NOT NULL,
    request_id uuid DEFAULT gen_random_uuid(),
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    user_id text,
    session_id text,
    device_id text,
    model_id text NOT NULL,
    model_type text,
    model_provider text,
    prompt_text text,
    prompt_length integer,
    prompt_hash text,
    detected_intent text,
    use_case_category text,
    use_case_confidence real,
    response_text text,
    response_length integer,
    response_tokens integer,
    response_time_ms integer,
    status text DEFAULT 'success'::text,
    error_message text,
    cost_usd real DEFAULT 0,
    cost_tokens integer,
    routing_rule text,
    was_delegated boolean DEFAULT false,
    delegated_from text,
    room_id text,
    room_slug text,
    priority integer,
    had_followup boolean DEFAULT false,
    session_abandoned boolean DEFAULT false,
    user_satisfaction_score real
);


ALTER TABLE public.model_usage_log OWNER TO matthewmauer;

--
-- Name: TABLE model_usage_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_usage_log IS 'Tracks every model request to discover real-world usage patterns';


--
-- Name: model_usage_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_usage_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_usage_log_id_seq OWNER TO matthewmauer;

--
-- Name: model_usage_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_usage_log_id_seq OWNED BY public.model_usage_log.id;


--
-- Name: model_usage_stats; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.model_usage_stats AS
 SELECT model_usage_log.model_id,
    model_usage_log.model_provider,
    model_usage_log.use_case_category,
    count(*) AS total_requests,
    count(*) FILTER (WHERE (model_usage_log.status = 'success'::text)) AS successful_requests,
    count(*) FILTER (WHERE (model_usage_log.status = 'error'::text)) AS failed_requests,
    avg(model_usage_log.response_time_ms) AS avg_response_time_ms,
    percentile_cont((0.95)::double precision) WITHIN GROUP (ORDER BY ((model_usage_log.response_time_ms)::double precision)) AS p95_response_time_ms,
    avg(model_usage_log.response_tokens) AS avg_tokens,
    sum(model_usage_log.cost_usd) AS total_cost_usd,
    avg(model_usage_log.cost_usd) AS avg_cost_per_request,
    ((count(*) FILTER (WHERE (model_usage_log.had_followup = true)))::real / (count(*))::real) AS followup_rate,
    ((count(*) FILTER (WHERE (model_usage_log.session_abandoned = true)))::real / (count(*))::real) AS abandon_rate,
    min(model_usage_log."timestamp") AS first_used,
    max(model_usage_log."timestamp") AS last_used
   FROM public.model_usage_log
  GROUP BY model_usage_log.model_id, model_usage_log.model_provider, model_usage_log.use_case_category;


ALTER TABLE public.model_usage_stats OWNER TO matthewmauer;

--
-- Name: model_use_cases; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_use_cases (
    id integer NOT NULL,
    category_name text NOT NULL,
    category_slug text NOT NULL,
    discovered_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    sample_count integer DEFAULT 0,
    typical_prompt_length integer,
    typical_response_length integer,
    avg_tokens integer,
    example_prompts jsonb,
    keywords text[],
    patterns text[],
    requires_fast_response boolean DEFAULT false,
    requires_high_accuracy boolean DEFAULT false,
    cost_sensitive boolean DEFAULT true
);


ALTER TABLE public.model_use_cases OWNER TO matthewmauer;

--
-- Name: TABLE model_use_cases; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_use_cases IS 'Discovered use case categories based on actual usage clustering';


--
-- Name: model_use_cases_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_use_cases_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_use_cases_id_seq OWNER TO matthewmauer;

--
-- Name: model_use_cases_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_use_cases_id_seq OWNED BY public.model_use_cases.id;


--
-- Name: model_version_deployments; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_version_deployments (
    id integer NOT NULL,
    version_id integer,
    domain text NOT NULL,
    version_name text NOT NULL,
    action text NOT NULL,
    old_status text,
    new_status text,
    old_traffic_percent integer,
    new_traffic_percent integer,
    reason text,
    deployed_by text,
    deployment_notes text,
    deployed_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.model_version_deployments OWNER TO matthewmauer;

--
-- Name: TABLE model_version_deployments; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_version_deployments IS 'Audit trail of version deployments and changes';


--
-- Name: model_version_deployments_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_version_deployments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_version_deployments_id_seq OWNER TO matthewmauer;

--
-- Name: model_version_deployments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_version_deployments_id_seq OWNED BY public.model_version_deployments.id;


--
-- Name: model_version_performance; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_version_performance (
    id integer NOT NULL,
    version_id integer,
    domain text NOT NULL,
    version_name text NOT NULL,
    date date DEFAULT CURRENT_DATE NOT NULL,
    total_requests integer DEFAULT 0,
    successful_requests integer DEFAULT 0,
    failed_requests integer DEFAULT 0,
    unique_users integer DEFAULT 0,
    success_rate real GENERATED ALWAYS AS (
CASE
    WHEN (total_requests > 0) THEN ((successful_requests)::real / (total_requests)::real)
    ELSE (0)::real
END) STORED,
    avg_response_time_ms real,
    p95_response_time_ms real,
    avg_cost_per_request real,
    total_cost_usd real DEFAULT 0,
    avg_followup_rate real,
    avg_satisfaction_score real,
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.model_version_performance OWNER TO matthewmauer;

--
-- Name: TABLE model_version_performance; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_version_performance IS 'Performance metrics per version over time';


--
-- Name: model_version_performance_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_version_performance_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_version_performance_id_seq OWNER TO matthewmauer;

--
-- Name: model_version_performance_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_version_performance_id_seq OWNED BY public.model_version_performance.id;


--
-- Name: model_versions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_versions (
    id integer NOT NULL,
    domain text NOT NULL,
    version_name text NOT NULL,
    base_model text NOT NULL,
    modelfile_path text,
    config jsonb DEFAULT '{}'::jsonb,
    status text DEFAULT 'testing'::text,
    traffic_percent integer DEFAULT 0,
    description text,
    notes text,
    created_by text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT model_versions_traffic_percent_check CHECK (((traffic_percent >= 0) AND (traffic_percent <= 100)))
);


ALTER TABLE public.model_versions OWNER TO matthewmauer;

--
-- Name: TABLE model_versions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_versions IS 'Multiple versions of domain-specific models for A/B testing';


--
-- Name: model_versions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_versions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_versions_id_seq OWNER TO matthewmauer;

--
-- Name: model_versions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_versions_id_seq OWNED BY public.model_versions.id;


--
-- Name: model_wrappers; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.model_wrappers (
    id integer NOT NULL,
    wrapper_name text NOT NULL,
    display_name text NOT NULL,
    description text,
    config jsonb NOT NULL,
    applicable_domains text[],
    times_used integer DEFAULT 0,
    avg_satisfaction_score real,
    created_by text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.model_wrappers OWNER TO matthewmauer;

--
-- Name: TABLE model_wrappers; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.model_wrappers IS 'Custom wrapper configurations (in addition to built-in ones)';


--
-- Name: model_wrappers_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.model_wrappers_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.model_wrappers_id_seq OWNER TO matthewmauer;

--
-- Name: model_wrappers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.model_wrappers_id_seq OWNED BY public.model_wrappers.id;


--
-- Name: most_used_components; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.most_used_components AS
 SELECT component_usage_stats.component_type,
    component_usage_stats.component_id,
    component_usage_stats.total_uses,
    component_usage_stats.successful_uses,
    component_usage_stats.success_rate,
    component_usage_stats.avg_execution_time_ms,
    component_usage_stats.unique_users,
    component_usage_stats.unique_sessions,
    component_usage_stats.last_used_at
   FROM public.component_usage_stats
  WHERE (component_usage_stats.total_uses > 0)
  ORDER BY component_usage_stats.total_uses DESC, component_usage_stats.success_rate DESC
 LIMIT 100;


ALTER TABLE public.most_used_components OWNER TO matthewmauer;

--
-- Name: newsletter_delivery_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.newsletter_delivery_log (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    config_id integer,
    delivered_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    email character varying(255),
    item_count integer,
    content_ids integer[],
    status character varying(50) DEFAULT 'sent'::character varying,
    opened boolean DEFAULT false,
    opened_at timestamp without time zone,
    clicked boolean DEFAULT false,
    clicked_at timestamp without time zone,
    email_service character varying(50),
    email_id character varying(255),
    error_message text
);


ALTER TABLE public.newsletter_delivery_log OWNER TO matthewmauer;

--
-- Name: TABLE newsletter_delivery_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.newsletter_delivery_log IS 'Newsletter delivery tracking and analytics';


--
-- Name: newsletter_delivery_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.newsletter_delivery_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.newsletter_delivery_log_id_seq OWNER TO matthewmauer;

--
-- Name: newsletter_delivery_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.newsletter_delivery_log_id_seq OWNED BY public.newsletter_delivery_log.id;


--
-- Name: note_access_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.note_access_log (
    id integer NOT NULL,
    note_id integer NOT NULL,
    access_type character varying(50) NOT NULL,
    user_id character varying(100),
    session_id character varying(100),
    accessed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.note_access_log OWNER TO matthewmauer;

--
-- Name: note_access_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.note_access_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.note_access_log_id_seq OWNER TO matthewmauer;

--
-- Name: note_access_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.note_access_log_id_seq OWNED BY public.note_access_log.id;


--
-- Name: note_relationships; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.note_relationships (
    id integer NOT NULL,
    source_note_id integer NOT NULL,
    target_note_id integer NOT NULL,
    relationship_type character varying(50) NOT NULL,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.note_relationships OWNER TO matthewmauer;

--
-- Name: note_relationships_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.note_relationships_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.note_relationships_id_seq OWNER TO matthewmauer;

--
-- Name: note_relationships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.note_relationships_id_seq OWNED BY public.note_relationships.id;


--
-- Name: notes; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.notes (
    id integer NOT NULL,
    title character varying(500),
    content text NOT NULL,
    source character varying(50) DEFAULT 'manual'::character varying,
    source_file character varying(500),
    source_path text,
    mime_type character varying(100),
    tags text[],
    category character varying(100),
    status character varying(50) DEFAULT 'active'::character varying,
    audio_path text,
    transcription_confidence numeric(3,2),
    embedding public.vector(1536),
    user_id character varying(100),
    session_id character varying(100),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    accessed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.notes OWNER TO matthewmauer;

--
-- Name: note_statistics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.note_statistics AS
 SELECT count(*) AS total_notes,
    count(*) FILTER (WHERE ((notes.source)::text = 'voice'::text)) AS voice_notes,
    count(*) FILTER (WHERE ((notes.source)::text = 'upload'::text)) AS uploaded_docs,
    count(*) FILTER (WHERE ((notes.source)::text = 'manual'::text)) AS manual_notes,
    count(*) FILTER (WHERE (notes.created_at > (CURRENT_TIMESTAMP - '7 days'::interval))) AS notes_this_week,
    count(*) FILTER (WHERE (notes.created_at > (CURRENT_TIMESTAMP - '30 days'::interval))) AS notes_this_month
   FROM public.notes
  WHERE ((notes.status)::text = 'active'::text);


ALTER TABLE public.note_statistics OWNER TO matthewmauer;

--
-- Name: notes_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.notes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.notes_id_seq OWNER TO matthewmauer;

--
-- Name: notes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.notes_id_seq OWNED BY public.notes.id;


--
-- Name: ollama_training_jobs; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.ollama_training_jobs (
    id integer NOT NULL,
    room_id integer,
    model_name character varying(255) NOT NULL,
    base_model character varying(100) NOT NULL,
    modelfile_path text,
    training_data_path text,
    data_size_kb integer,
    snippet_count integer,
    status character varying(50) DEFAULT 'pending'::character varying,
    progress integer DEFAULT 0,
    started_at timestamp without time zone,
    completed_at timestamp without time zone,
    error_message text,
    model_size_mb numeric,
    training_duration_seconds integer,
    quality_score numeric,
    triggered_by character varying(50),
    scheduled_for timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.ollama_training_jobs OWNER TO matthewmauer;

--
-- Name: ollama_training_jobs_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.ollama_training_jobs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ollama_training_jobs_id_seq OWNER TO matthewmauer;

--
-- Name: ollama_training_jobs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.ollama_training_jobs_id_seq OWNED BY public.ollama_training_jobs.id;


--
-- Name: onboarding_leaderboard; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.onboarding_leaderboard AS
SELECT
    NULL::integer AS id,
    NULL::character varying(100) AS preferred_name,
    NULL::integer AS completion_percentage,
    NULL::numeric(10,2) AS earned_amount,
    NULL::bigint AS responses_count,
    NULL::numeric AS avg_quality,
    NULL::bigint AS ideas_count;


ALTER TABLE public.onboarding_leaderboard OWNER TO matthewmauer;

--
-- Name: optimal_domain_model_params; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.optimal_domain_model_params AS
 SELECT dmp.domain_context,
    dmp.model_id,
    dpp.preset_name,
    dpp.temperature,
    dpp.max_tokens,
    dmp.avg_success_rate,
    dmp.avg_response_time_ms,
    dmp.avg_cost_per_1k_tokens,
    dmp.total_requests
   FROM (public.domain_model_parameters dmp
     JOIN public.domain_parameter_presets dpp ON ((dmp.recommended_preset_id = dpp.preset_id)))
  WHERE (dmp.total_requests > 10)
  ORDER BY dmp.domain_context, dmp.avg_success_rate DESC;


ALTER TABLE public.optimal_domain_model_params OWNER TO matthewmauer;

--
-- Name: package_dependencies; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.package_dependencies (
    id integer NOT NULL,
    parent_package_id integer,
    child_package_name character varying(255) NOT NULL,
    child_package_version character varying(100),
    dependency_type character varying(50) DEFAULT 'runtime'::character varying,
    depth_level integer DEFAULT 0,
    is_circular boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.package_dependencies OWNER TO matthewmauer;

--
-- Name: TABLE package_dependencies; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.package_dependencies IS 'Dependency graph showing how packages relate to each other';


--
-- Name: package_dependencies_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.package_dependencies_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.package_dependencies_id_seq OWNER TO matthewmauer;

--
-- Name: package_dependencies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.package_dependencies_id_seq OWNED BY public.package_dependencies.id;


--
-- Name: package_intelligence; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.package_intelligence (
    id integer NOT NULL,
    package_id integer,
    lines_of_code integer,
    file_count integer,
    function_count integer,
    class_count integer,
    complexity_score integer,
    has_tests boolean DEFAULT false,
    test_coverage numeric(5,2),
    has_typescript boolean DEFAULT false,
    has_documentation boolean DEFAULT false,
    has_changelog boolean DEFAULT false,
    github_stars integer,
    github_forks integer,
    github_issues_open integer,
    last_commit_at timestamp without time zone,
    commit_frequency numeric(10,2),
    contributor_count integer,
    known_vulnerabilities integer DEFAULT 0,
    last_security_audit timestamp without time zone,
    security_score integer,
    intelligence_score integer DEFAULT 0,
    is_trivial boolean DEFAULT false,
    dependency_spread integer DEFAULT 0,
    leftpad_risk_score integer DEFAULT 0,
    calculated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.package_intelligence OWNER TO matthewmauer;

--
-- Name: TABLE package_intelligence; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.package_intelligence IS 'Intelligence metrics and risk scores for packages';


--
-- Name: package_intelligence_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.package_intelligence_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.package_intelligence_id_seq OWNER TO matthewmauer;

--
-- Name: package_intelligence_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.package_intelligence_id_seq OWNED BY public.package_intelligence.id;


--
-- Name: package_usage_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.package_usage_log (
    id integer NOT NULL,
    package_id integer,
    used_by character varying(255),
    usage_type character varying(50),
    requested_version character varying(100),
    resolved_version character varying(100),
    fetch_time_ms integer,
    from_cache boolean DEFAULT false,
    from_vendor boolean DEFAULT false,
    user_id character varying(255),
    session_id character varying(255),
    used_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.package_usage_log OWNER TO matthewmauer;

--
-- Name: TABLE package_usage_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.package_usage_log IS 'Log of when and how packages are accessed';


--
-- Name: package_usage_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.package_usage_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.package_usage_log_id_seq OWNER TO matthewmauer;

--
-- Name: package_usage_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.package_usage_log_id_seq OWNED BY public.package_usage_log.id;


--
-- Name: paper_embeddings; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.paper_embeddings (
    id integer NOT NULL,
    paper_id integer NOT NULL,
    embedding public.vector(1536),
    embedding_model character varying(100) DEFAULT 'text-embedding-ada-002'::character varying,
    source character varying(50) DEFAULT 'abstract'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.paper_embeddings OWNER TO matthewmauer;

--
-- Name: paper_embeddings_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.paper_embeddings_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.paper_embeddings_id_seq OWNER TO matthewmauer;

--
-- Name: paper_embeddings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.paper_embeddings_id_seq OWNED BY public.paper_embeddings.id;


--
-- Name: parameter_ab_tests; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.parameter_ab_tests (
    test_id text NOT NULL,
    test_name text NOT NULL,
    description text,
    domain_context text NOT NULL,
    control_preset_id text NOT NULL,
    variant_preset_id text NOT NULL,
    traffic_split real DEFAULT 0.5,
    status text DEFAULT 'draft'::text,
    control_requests integer DEFAULT 0,
    variant_requests integer DEFAULT 0,
    control_success_rate real,
    variant_success_rate real,
    control_avg_response_time real,
    variant_avg_response_time real,
    control_avg_rating real,
    variant_avg_rating real,
    p_value real,
    confidence_level real,
    winner text,
    created_at timestamp with time zone DEFAULT now(),
    started_at timestamp with time zone,
    ended_at timestamp with time zone,
    CONSTRAINT parameter_ab_tests_status_check CHECK ((status = ANY (ARRAY['draft'::text, 'running'::text, 'paused'::text, 'completed'::text, 'cancelled'::text]))),
    CONSTRAINT parameter_ab_tests_traffic_split_check CHECK (((traffic_split >= (0)::double precision) AND (traffic_split <= (1)::double precision)))
);


ALTER TABLE public.parameter_ab_tests OWNER TO matthewmauer;

--
-- Name: TABLE parameter_ab_tests; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.parameter_ab_tests IS 'A/B testing of different parameter configurations';


--
-- Name: parameter_performance_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.parameter_performance_log (
    id integer NOT NULL,
    preset_id text NOT NULL,
    domain_context text NOT NULL,
    model_id text NOT NULL,
    request_id text,
    prompt_tokens integer,
    response_tokens integer,
    response_time_ms integer,
    success boolean DEFAULT true,
    error_message text,
    user_rating integer,
    had_followup boolean,
    cost_usd real,
    "timestamp" timestamp with time zone DEFAULT now(),
    CONSTRAINT parameter_performance_log_user_rating_check CHECK (((user_rating >= 1) AND (user_rating <= 5)))
);


ALTER TABLE public.parameter_performance_log OWNER TO matthewmauer;

--
-- Name: TABLE parameter_performance_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.parameter_performance_log IS 'Track performance of different parameter configurations';


--
-- Name: parameter_performance_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.parameter_performance_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.parameter_performance_log_id_seq OWNER TO matthewmauer;

--
-- Name: parameter_performance_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.parameter_performance_log_id_seq OWNED BY public.parameter_performance_log.id;


--
-- Name: partner_clicks; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.partner_clicks (
    click_id uuid DEFAULT gen_random_uuid() NOT NULL,
    source_domain_id uuid,
    target_domain_id uuid,
    session_id uuid,
    referrer text,
    clicked_at timestamp without time zone DEFAULT now(),
    converted boolean DEFAULT false,
    conversion_value numeric(10,2) DEFAULT 0.00
);


ALTER TABLE public.partner_clicks OWNER TO matthewmauer;

--
-- Name: TABLE partner_clicks; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.partner_clicks IS 'Analytics for partner link clicks and conversions';


--
-- Name: partner_performance; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.partner_performance AS
 SELECT dp.domain_id,
    dp.domain_name,
    count(DISTINCT pc.click_id) AS total_clicks_received,
    count(DISTINCT pc.source_domain_id) AS unique_sources,
    avg(pc.conversion_value) AS avg_conversion_value,
    sum(
        CASE
            WHEN pc.converted THEN 1
            ELSE 0
        END) AS total_conversions
   FROM (public.domain_portfolio dp
     LEFT JOIN public.partner_clicks pc ON ((pc.target_domain_id = dp.domain_id)))
  WHERE ((dp.status)::text = 'active'::text)
  GROUP BY dp.domain_id, dp.domain_name
  ORDER BY (count(DISTINCT pc.click_id)) DESC;


ALTER TABLE public.partner_performance OWNER TO matthewmauer;

--
-- Name: partner_rotations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.partner_rotations (
    rotation_id uuid DEFAULT gen_random_uuid() NOT NULL,
    source_domain_id uuid,
    displayed_partner_ids uuid[] NOT NULL,
    rotation_strategy character varying(50) DEFAULT 'weighted'::character varying,
    display_count integer DEFAULT 0,
    last_rotated_at timestamp without time zone DEFAULT now(),
    total_impressions integer DEFAULT 0,
    total_clicks integer DEFAULT 0,
    click_through_rate numeric(5,2) DEFAULT 0.00,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.partner_rotations OWNER TO matthewmauer;

--
-- Name: TABLE partner_rotations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.partner_rotations IS 'Tracks which partner domains are displayed on each site';


--
-- Name: pattern_relationships; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.pattern_relationships AS
 SELECT dkg.source_id AS pattern_1,
    dkg.target_id AS pattern_2,
    dkg.relationship_type,
    dkg.relationship_strength,
    dce1.title AS pattern_1_title,
    dce2.title AS pattern_2_title
   FROM ((public.domain_knowledge_graph dkg
     JOIN public.domain_code_examples dce1 ON ((dkg.source_id = dce1.example_id)))
     JOIN public.domain_code_examples dce2 ON ((dkg.target_id = dce2.example_id)))
  WHERE ((dkg.source_type = 'pattern'::text) AND (dkg.target_type = 'pattern'::text))
  ORDER BY dkg.relationship_strength DESC;


ALTER TABLE public.pattern_relationships OWNER TO matthewmauer;

--
-- Name: user_profiles; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_profiles (
    id integer NOT NULL,
    session_id character varying(255) NOT NULL,
    full_name character varying(255),
    preferred_name character varying(100),
    email character varying(255),
    domain_interest character varying(255),
    archetype_id integer,
    current_level integer DEFAULT 1,
    completed_levels integer[] DEFAULT '{}'::integer[],
    completion_percentage integer DEFAULT 0,
    earned_amount numeric(10,2) DEFAULT 0.00,
    payout_status character varying(50) DEFAULT 'pending'::character varying,
    payout_method character varying(100),
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    completed_at timestamp without time zone
);


ALTER TABLE public.user_profiles OWNER TO matthewmauer;

--
-- Name: payment_analytics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.payment_analytics AS
 SELECT count(*) AS total_users,
    sum(user_profiles.earned_amount) AS total_payouts,
    avg(user_profiles.earned_amount) AS avg_payout,
    count(*) FILTER (WHERE ((user_profiles.payout_status)::text = 'pending'::text)) AS pending_count,
    count(*) FILTER (WHERE ((user_profiles.payout_status)::text = 'approved'::text)) AS approved_count,
    count(*) FILTER (WHERE ((user_profiles.payout_status)::text = 'paid'::text)) AS paid_count,
    count(*) FILTER (WHERE (user_profiles.completion_percentage = 100)) AS completed_count
   FROM public.user_profiles;


ALTER TABLE public.payment_analytics OWNER TO matthewmauer;

--
-- Name: phone_patterns; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.phone_patterns (
    id integer NOT NULL,
    country_code character varying(10) NOT NULL,
    country_name character varying(100),
    pattern character varying(100) NOT NULL,
    example character varying(50),
    dial_code character varying(10),
    metadata jsonb DEFAULT '{}'::jsonb
);


ALTER TABLE public.phone_patterns OWNER TO matthewmauer;

--
-- Name: phone_patterns_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.phone_patterns_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.phone_patterns_id_seq OWNER TO matthewmauer;

--
-- Name: phone_patterns_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.phone_patterns_id_seq OWNED BY public.phone_patterns.id;


--
-- Name: popular_code_snippets; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.popular_code_snippets AS
 SELECT cs.id,
    cs.filename,
    cs.function_name,
    cs.language,
    cs.description,
    count(cu.id) AS usage_count,
    max(cu."timestamp") AS last_used
   FROM (public.code_snippets cs
     LEFT JOIN public.code_usage cu ON ((cu.snippet_id = cs.id)))
  GROUP BY cs.id, cs.filename, cs.function_name, cs.language, cs.description
  ORDER BY (count(cu.id)) DESC
 LIMIT 100;


ALTER TABLE public.popular_code_snippets OWNER TO matthewmauer;

--
-- Name: popular_domain_artifacts; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.popular_domain_artifacts AS
 SELECT ba.domain_context,
    ba.artifact_type,
    ba.artifact_id,
    ba.artifact_name,
    ba.language,
    ba.times_used,
    avg(ba.user_rating) AS avg_rating,
    count(DISTINCT aul.id) AS usage_count
   FROM (public.bucket_artifacts ba
     LEFT JOIN public.artifact_usage_log aul ON ((ba.artifact_id = aul.artifact_id)))
  WHERE ((ba.status = 'active'::text) AND (ba.is_current = true))
  GROUP BY ba.domain_context, ba.artifact_type, ba.artifact_id, ba.artifact_name, ba.language, ba.times_used
 HAVING (ba.times_used > 0)
  ORDER BY ba.times_used DESC, (avg(ba.user_rating)) DESC NULLS LAST
 LIMIT 50;


ALTER TABLE public.popular_domain_artifacts OWNER TO matthewmauer;

--
-- Name: popular_names; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.popular_names AS
 SELECT profile_matches.first_name,
    profile_matches.last_name,
    count(*) AS match_count,
    avg(profile_matches.match_score) AS avg_score
   FROM public.profile_matches
  GROUP BY profile_matches.first_name, profile_matches.last_name
 HAVING (count(*) > 1)
  ORDER BY (count(*)) DESC, (avg(profile_matches.match_score)) DESC
 LIMIT 50;


ALTER TABLE public.popular_names OWNER TO matthewmauer;

--
-- Name: portfolio_analytics; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.portfolio_analytics (
    id integer NOT NULL,
    user_id integer,
    date date NOT NULL,
    ai_conversations_count integer DEFAULT 0,
    ai_tokens_used integer DEFAULT 0,
    ai_cost_usd numeric(10,4) DEFAULT 0,
    git_commits_count integer DEFAULT 0,
    git_prs_count integer DEFAULT 0,
    git_stars_gained integer DEFAULT 0,
    embed_events_count integer DEFAULT 0,
    embed_pageviews integer DEFAULT 0,
    embed_unique_visitors integer DEFAULT 0,
    ip_filings_count integer DEFAULT 0,
    patents_filed integer DEFAULT 0,
    trademarks_filed integer DEFAULT 0,
    bucket_records_created integer DEFAULT 0,
    bucket_queries_executed integer DEFAULT 0,
    total_activities integer DEFAULT 0,
    computed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.portfolio_analytics OWNER TO matthewmauer;

--
-- Name: portfolio_analytics_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.portfolio_analytics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.portfolio_analytics_id_seq OWNER TO matthewmauer;

--
-- Name: portfolio_analytics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.portfolio_analytics_id_seq OWNED BY public.portfolio_analytics.id;


--
-- Name: portfolio_overview; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.portfolio_overview AS
 SELECT pa.user_id,
    sum(pa.ai_conversations_count) AS total_ai_conversations,
    sum(pa.ai_tokens_used) AS total_ai_tokens,
    sum(pa.ai_cost_usd) AS total_ai_cost,
    sum(pa.git_commits_count) AS total_git_commits,
    sum(pa.git_prs_count) AS total_git_prs,
    sum(pa.embed_events_count) AS total_embed_events,
    sum(pa.ip_filings_count) AS total_ip_filings,
    sum(
        CASE
            WHEN (pa.date >= date_trunc('month'::text, (CURRENT_DATE)::timestamp with time zone)) THEN pa.total_activities
            ELSE 0
        END) AS activities_this_month,
    sum(
        CASE
            WHEN (pa.date >= date_trunc('year'::text, (CURRENT_DATE)::timestamp with time zone)) THEN pa.total_activities
            ELSE 0
        END) AS activities_this_year
   FROM public.portfolio_analytics pa
  GROUP BY pa.user_id;


ALTER TABLE public.portfolio_overview OWNER TO matthewmauer;

--
-- Name: portfolio_settings; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.portfolio_settings (
    user_id integer NOT NULL,
    is_public boolean DEFAULT false,
    public_url_slug character varying(255),
    show_ai_stats boolean DEFAULT true,
    show_git_stats boolean DEFAULT true,
    show_embed_stats boolean DEFAULT true,
    show_ip_registry boolean DEFAULT false,
    theme jsonb DEFAULT '{"layout": "timeline", "primaryColor": "#667eea"}'::jsonb,
    social_links jsonb DEFAULT '{}'::jsonb,
    auto_export_enabled boolean DEFAULT false,
    export_format character varying(50) DEFAULT 'json'::character varying,
    export_schedule character varying(50),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.portfolio_settings OWNER TO matthewmauer;

--
-- Name: portfolio_timeline; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.portfolio_timeline (
    id bigint NOT NULL,
    user_id integer,
    event_type character varying(50) NOT NULL,
    event_category character varying(50),
    title character varying(500),
    description text,
    event_data jsonb,
    related_type character varying(50),
    related_id character varying(255),
    related_url character varying(500),
    source character varying(100),
    source_id character varying(255),
    is_public boolean DEFAULT false,
    is_featured boolean DEFAULT false,
    event_timestamp timestamp without time zone NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.portfolio_timeline OWNER TO matthewmauer;

--
-- Name: portfolio_timeline_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.portfolio_timeline_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.portfolio_timeline_id_seq OWNER TO matthewmauer;

--
-- Name: portfolio_timeline_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.portfolio_timeline_id_seq OWNED BY public.portfolio_timeline.id;


--
-- Name: potential_spam_sessions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.potential_spam_sessions AS
 SELECT visit_sessions.session_id,
    visit_sessions.device_id,
    visit_sessions.ip_hash,
    visit_sessions.page,
    visit_sessions.bounce_detected,
    visit_sessions.bounce_reason,
    visit_sessions.heartbeat_count,
    visit_sessions.total_interactions,
    visit_sessions.spam_score,
    visit_sessions.is_bot,
    visit_sessions.bot_reason,
    visit_sessions.start_time,
    visit_sessions.duration_ms
   FROM public.visit_sessions
  WHERE ((visit_sessions.spam_score > 50) OR (visit_sessions.is_bot = true) OR ((visit_sessions.bounce_detected = true) AND (visit_sessions.heartbeat_count < 2)))
  ORDER BY visit_sessions.spam_score DESC, visit_sessions.start_time DESC;


ALTER TABLE public.potential_spam_sessions OWNER TO matthewmauer;

--
-- Name: preset_performance_comparison; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.preset_performance_comparison AS
 SELECT dpp.domain_context,
    dpp.preset_name,
    count(ppl.id) AS total_requests,
    avg(
        CASE
            WHEN ppl.success THEN 1.0
            ELSE 0.0
        END) AS success_rate,
    avg(ppl.response_time_ms) AS avg_response_time_ms,
    avg(ppl.user_rating) AS avg_user_rating,
    avg(ppl.cost_usd) AS avg_cost_usd
   FROM (public.domain_parameter_presets dpp
     LEFT JOIN public.parameter_performance_log ppl ON ((dpp.preset_id = ppl.preset_id)))
  WHERE (dpp.is_active = true)
  GROUP BY dpp.domain_context, dpp.preset_name
  ORDER BY dpp.domain_context, (avg(
        CASE
            WHEN ppl.success THEN 1.0
            ELSE 0.0
        END)) DESC;


ALTER TABLE public.preset_performance_comparison OWNER TO matthewmauer;

--
-- Name: price_alerts_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_alerts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_alerts_id_seq OWNER TO matthewmauer;

--
-- Name: price_alerts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_alerts_id_seq OWNED BY public.price_alerts.id;


--
-- Name: price_audit_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_audit_log (
    id bigint NOT NULL,
    symbol character varying(20) NOT NULL,
    price numeric(20,8) NOT NULL,
    source character varying(50) NOT NULL,
    confidence_score integer NOT NULL,
    verification_status character varying(20) NOT NULL,
    issues jsonb DEFAULT '[]'::jsonb NOT NULL,
    raw_data jsonb NOT NULL,
    logged_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT price_audit_log_confidence_score_check CHECK (((confidence_score >= 0) AND (confidence_score <= 100))),
    CONSTRAINT price_audit_log_verification_status_check CHECK (((verification_status)::text = ANY ((ARRAY['verified'::character varying, 'rejected'::character varying, 'warning'::character varying])::text[])))
);


ALTER TABLE public.price_audit_log OWNER TO matthewmauer;

--
-- Name: TABLE price_audit_log; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.price_audit_log IS 'Audit log for suspicious or low-confidence price data from external APIs';


--
-- Name: COLUMN price_audit_log.confidence_score; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.price_audit_log.confidence_score IS 'Confidence score from PriceVerifier (0-100, where 70+ is verified)';


--
-- Name: COLUMN price_audit_log.verification_status; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.price_audit_log.verification_status IS 'Verification result: verified (70+), warning (50-69), rejected (<50)';


--
-- Name: COLUMN price_audit_log.issues; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.price_audit_log.issues IS 'Array of verification issues (bounds check, rate-of-change, timestamp, source)';


--
-- Name: COLUMN price_audit_log.raw_data; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.price_audit_log.raw_data IS 'Complete price data snapshot for forensic analysis';


--
-- Name: price_audit_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_audit_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_audit_log_id_seq OWNER TO matthewmauer;

--
-- Name: price_audit_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_audit_log_id_seq OWNED BY public.price_audit_log.id;


--
-- Name: price_cache; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_cache (
    id integer NOT NULL,
    cache_key character varying(100) NOT NULL,
    data jsonb NOT NULL,
    cached_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.price_cache OWNER TO matthewmauer;

--
-- Name: price_cache_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_cache_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_cache_id_seq OWNER TO matthewmauer;

--
-- Name: price_cache_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_cache_id_seq OWNED BY public.price_cache.id;


--
-- Name: price_candles_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_candles_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_candles_id_seq OWNER TO matthewmauer;

--
-- Name: price_candles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_candles_id_seq OWNED BY public.price_candles.id;


--
-- Name: price_correlations_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_correlations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_correlations_id_seq OWNER TO matthewmauer;

--
-- Name: price_correlations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_correlations_id_seq OWNED BY public.price_correlations.id;


--
-- Name: price_events_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_events_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_events_id_seq OWNER TO matthewmauer;

--
-- Name: price_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_events_id_seq OWNED BY public.price_events.id;


--
-- Name: price_history_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_history_id_seq OWNER TO matthewmauer;

--
-- Name: price_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_history_id_seq OWNED BY public.price_history.id;


--
-- Name: price_indicators_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_indicators_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_indicators_id_seq OWNER TO matthewmauer;

--
-- Name: price_indicators_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_indicators_id_seq OWNED BY public.price_indicators.id;


--
-- Name: price_performance_24h; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.price_performance_24h AS
 SELECT ph1.symbol,
    ph1.asset_type,
    max(ph1.price) AS high_24h,
    min(ph1.price) AS low_24h,
    ( SELECT ph2.price
           FROM public.price_history ph2
          WHERE (((ph2.symbol)::text = (ph1.symbol)::text) AND ((ph2.asset_type)::text = (ph1.asset_type)::text))
          ORDER BY ph2.recorded_at DESC
         LIMIT 1) AS current_price,
    round((((max(ph1.price) - min(ph1.price)) / min(ph1.price)) * (100)::numeric), 2) AS volatility_percent,
    count(*) AS data_points
   FROM public.price_history ph1
  WHERE (ph1.recorded_at > (now() - '24:00:00'::interval))
  GROUP BY ph1.symbol, ph1.asset_type
  ORDER BY (round((((max(ph1.price) - min(ph1.price)) / min(ph1.price)) * (100)::numeric), 2)) DESC;


ALTER TABLE public.price_performance_24h OWNER TO matthewmauer;

--
-- Name: price_quality_metrics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.price_quality_metrics AS
 SELECT price_audit_log.symbol,
    count(*) AS total_suspicious_events,
    avg(price_audit_log.confidence_score) AS avg_confidence,
    min(price_audit_log.confidence_score) AS min_confidence,
    max(price_audit_log.logged_at) AS last_suspicious_event,
    count(*) FILTER (WHERE ((price_audit_log.verification_status)::text = 'rejected'::text)) AS rejected_count,
    count(*) FILTER (WHERE ((price_audit_log.verification_status)::text = 'warning'::text)) AS warning_count
   FROM public.price_audit_log
  WHERE (price_audit_log.logged_at > (now() - '30 days'::interval))
  GROUP BY price_audit_log.symbol
  ORDER BY (count(*)) DESC;


ALTER TABLE public.price_quality_metrics OWNER TO matthewmauer;

--
-- Name: price_sources; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_sources (
    id integer NOT NULL,
    source_name character varying(50) NOT NULL,
    total_fetches integer DEFAULT 0,
    successful_fetches integer DEFAULT 0,
    failed_fetches integer DEFAULT 0,
    avg_spread_percent numeric(10,4) DEFAULT 0,
    reliability_score numeric(5,2) DEFAULT 100,
    last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.price_sources OWNER TO matthewmauer;

--
-- Name: TABLE price_sources; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.price_sources IS 'Tracks reliability and performance of each price data source';


--
-- Name: COLUMN price_sources.reliability_score; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.price_sources.reliability_score IS 'Calculated as: success_rate - (avg_spread / 10)';


--
-- Name: price_sources_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_sources_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_sources_id_seq OWNER TO matthewmauer;

--
-- Name: price_sources_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_sources_id_seq OWNED BY public.price_sources.id;


--
-- Name: price_watchlist; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.price_watchlist (
    id integer NOT NULL,
    user_id character varying(100),
    symbol character varying(20) NOT NULL,
    asset_type character varying(20) NOT NULL,
    added_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    notes text
);


ALTER TABLE public.price_watchlist OWNER TO matthewmauer;

--
-- Name: price_watchlist_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.price_watchlist_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.price_watchlist_id_seq OWNER TO matthewmauer;

--
-- Name: price_watchlist_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.price_watchlist_id_seq OWNED BY public.price_watchlist.id;


--
-- Name: profile_matches_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.profile_matches_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profile_matches_id_seq OWNER TO matthewmauer;

--
-- Name: profile_matches_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.profile_matches_id_seq OWNED BY public.profile_matches.id;


--
-- Name: profile_messages; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.profile_messages (
    id integer NOT NULL,
    from_user_id text NOT NULL,
    to_user_id text NOT NULL,
    subject text DEFAULT ''::text,
    content text NOT NULL,
    thread_id integer,
    routing_category text DEFAULT 'general'::text,
    routing_slack_channel text,
    routing_agent_type text,
    metadata jsonb DEFAULT '{}'::jsonb,
    status text DEFAULT 'sent'::text,
    sent_at timestamp without time zone DEFAULT now(),
    read_at timestamp without time zone
);


ALTER TABLE public.profile_messages OWNER TO matthewmauer;

--
-- Name: TABLE profile_messages; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.profile_messages IS 'Communication via GitHub profiles';


--
-- Name: profile_messages_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.profile_messages_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.profile_messages_id_seq OWNER TO matthewmauer;

--
-- Name: profile_messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.profile_messages_id_seq OWNED BY public.profile_messages.id;


--
-- Name: published_content_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.published_content_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.published_content_id_seq OWNER TO matthewmauer;

--
-- Name: published_content_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.published_content_id_seq OWNED BY public.published_content.id;


--
-- Name: recent_arbitrage; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_arbitrage AS
 SELECT arbitrage_opportunities.symbol,
    arbitrage_opportunities.source1,
    arbitrage_opportunities.price1,
    arbitrage_opportunities.source2,
    arbitrage_opportunities.price2,
    arbitrage_opportunities.spread_absolute,
    arbitrage_opportunities.spread_percent,
    arbitrage_opportunities.is_data_error,
    arbitrage_opportunities.detected_at,
    (now() - (arbitrage_opportunities.detected_at)::timestamp with time zone) AS age
   FROM public.arbitrage_opportunities
  WHERE (arbitrage_opportunities.detected_at > (now() - '24:00:00'::interval))
  ORDER BY arbitrage_opportunities.spread_percent DESC, arbitrage_opportunities.detected_at DESC;


ALTER TABLE public.recent_arbitrage OWNER TO matthewmauer;

--
-- Name: recent_autonomous_builds; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_autonomous_builds AS
 SELECT asess.session_id,
    asess.prompt,
    (asess.intent ->> 'category'::text) AS category,
    (asess.intent ->> 'complexity'::text) AS complexity,
    asess.success,
    asess.duration_ms,
    jsonb_array_length(asess.files_generated) AS file_count,
    asess.tests_passed,
    asess.tests_failed,
    asess.created_at,
    asess.completed_at,
    cs.status AS council_status
   FROM (public.autonomous_sessions asess
     LEFT JOIN public.council_sessions cs ON ((cs.session_id = asess.council_session_id)))
  ORDER BY asess.created_at DESC
 LIMIT 50;


ALTER TABLE public.recent_autonomous_builds OWNER TO matthewmauer;

--
-- Name: VIEW recent_autonomous_builds; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.recent_autonomous_builds IS 'Recent autonomous mode builds with stats';


--
-- Name: recent_bucket_artifacts; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_bucket_artifacts AS
 SELECT ba.artifact_id,
    ba.bucket_id,
    bi.bucket_name,
    ba.domain_context,
    ba.artifact_type,
    ba.artifact_name,
    ba.language,
    ba.times_used,
    ba.user_rating,
    ba.created_at
   FROM (public.bucket_artifacts ba
     JOIN public.bucket_instances bi ON ((ba.bucket_id = bi.bucket_id)))
  WHERE ((ba.status = 'active'::text) AND (ba.is_current = true))
  ORDER BY ba.created_at DESC
 LIMIT 100;


ALTER TABLE public.recent_bucket_artifacts OWNER TO matthewmauer;

--
-- Name: recent_compactions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_compactions AS
 SELECT compaction_results.id,
    (compaction_results.project ->> 'title'::text) AS title,
    (((((compaction_results.stages -> 'compaction'::text) -> 'stats'::text) -> 'original'::text) ->> 'size'::text))::numeric AS original_size,
    (((((compaction_results.stages -> 'compaction'::text) -> 'stats'::text) -> 'compacted'::text) ->> 'size'::text))::numeric AS compacted_size,
    (((((compaction_results.stages -> 'compaction'::text) -> 'stats'::text) -> 'reduction'::text) ->> 'size'::text))::numeric AS size_reduction_pct,
    (((((compaction_results.stages -> 'compaction'::text) -> 'stats'::text) -> 'reduction'::text) ->> 'tokens'::text))::numeric AS token_reduction_pct,
    ((compaction_results.final_scores ->> 'combined'::text))::numeric AS score,
    compaction_results.created_at
   FROM public.compaction_results
  ORDER BY compaction_results.created_at DESC
 LIMIT 100;


ALTER TABLE public.recent_compactions OWNER TO matthewmauer;

--
-- Name: recent_drift_events; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_drift_events AS
 SELECT cdl.drift_id,
    cdl.domain_context,
    cdl.drift_type,
    cdl.drift_severity,
    cdl.expected_value,
    cdl.actual_value,
    cdl.performance_impact,
    cdl.resolved,
    cdl.detected_at,
    dcs.snapshot_name
   FROM (public.context_drift_log cdl
     JOIN public.domain_context_snapshots dcs ON ((cdl.snapshot_id = dcs.snapshot_id)))
  WHERE (cdl.detected_at > (now() - '7 days'::interval))
  ORDER BY cdl.detected_at DESC, cdl.drift_severity DESC;


ALTER TABLE public.recent_drift_events OWNER TO matthewmauer;

--
-- Name: recent_events_by_type; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_events_by_type AS
 SELECT event_log.event_type,
    count(*) AS event_count,
    max(event_log."timestamp") AS last_event_at,
    count(DISTINCT event_log.origin_instance) AS unique_sources
   FROM public.event_log
  WHERE (event_log."timestamp" >= (now() - '01:00:00'::interval))
  GROUP BY event_log.event_type
  ORDER BY (count(*)) DESC;


ALTER TABLE public.recent_events_by_type OWNER TO matthewmauer;

--
-- Name: recent_files; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.recent_files (
    id integer NOT NULL,
    user_id integer,
    file_id integer,
    accessed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    access_count integer DEFAULT 1
);


ALTER TABLE public.recent_files OWNER TO matthewmauer;

--
-- Name: TABLE recent_files; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.recent_files IS 'Recently accessed files for quick access menu';


--
-- Name: recent_files_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.recent_files_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.recent_files_id_seq OWNER TO matthewmauer;

--
-- Name: recent_files_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.recent_files_id_seq OWNED BY public.recent_files.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.users (
    id integer NOT NULL,
    email character varying(255) NOT NULL,
    username character varying(255),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    handle character varying(30),
    handle_lowercase character varying(30),
    handle_set_at timestamp with time zone,
    handle_changes_remaining integer DEFAULT 1
);


ALTER TABLE public.users OWNER TO matthewmauer;

--
-- Name: recent_handle_changes; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_handle_changes AS
 SELECT u.id AS user_id,
    u.email,
    u.username,
    hh.old_handle,
    hh.new_handle,
    hh.change_reason,
    hh.changed_at
   FROM (public.handle_history hh
     JOIN public.users u ON ((u.id = hh.user_id)))
  ORDER BY hh.changed_at DESC
 LIMIT 100;


ALTER TABLE public.recent_handle_changes OWNER TO matthewmauer;

--
-- Name: recent_iiif_images; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_iiif_images AS
 SELECT iiif_images.id,
    iiif_images.filename,
    iiif_images.title,
    iiif_images.width,
    iiif_images.height,
    iiif_images.format,
    iiif_images.thumbnail_path,
    iiif_images.user_id,
    iiif_images.created_at
   FROM public.iiif_images
  ORDER BY iiif_images.created_at DESC;


ALTER TABLE public.recent_iiif_images OWNER TO matthewmauer;

--
-- Name: recent_matches; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_matches AS
 SELECT profile_matches.id,
    profile_matches.full_name,
    profile_matches.email,
    profile_matches.phone,
    profile_matches.country_code,
    profile_matches.match_score,
    profile_matches.created_at
   FROM public.profile_matches
  ORDER BY profile_matches.created_at DESC;


ALTER TABLE public.recent_matches OWNER TO matthewmauer;

--
-- Name: recent_notes; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_notes AS
 SELECT notes.id,
    notes.title,
    "left"(notes.content, 200) AS preview,
    notes.source,
    notes.category,
    notes.tags,
    notes.created_at,
    notes.updated_at,
    notes.accessed_at
   FROM public.notes
  WHERE ((notes.status)::text = 'active'::text)
  ORDER BY notes.updated_at DESC;


ALTER TABLE public.recent_notes OWNER TO matthewmauer;

--
-- Name: recent_responses; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_responses AS
 SELECT ai_responses.id,
    ai_responses.request_timestamp,
    ai_responses.response_timestamp,
    ai_responses.latency_ms,
    ai_responses.provider,
    ai_responses.model,
    ai_responses.query_text,
    length(ai_responses.response) AS response_length,
    ai_responses.cache_hit,
    ai_responses.created_at
   FROM public.ai_responses
  ORDER BY ai_responses.request_timestamp DESC
 LIMIT 100;


ALTER TABLE public.recent_responses OWNER TO matthewmauer;

--
-- Name: recent_suspicious_prices; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recent_suspicious_prices AS
 SELECT price_audit_log.symbol,
    price_audit_log.price,
    price_audit_log.source,
    price_audit_log.confidence_score,
    price_audit_log.verification_status,
    price_audit_log.issues,
    price_audit_log.logged_at,
    (now() - (price_audit_log.logged_at)::timestamp with time zone) AS age
   FROM public.price_audit_log
  WHERE (price_audit_log.logged_at > (now() - '7 days'::interval))
  ORDER BY price_audit_log.logged_at DESC;


ALTER TABLE public.recent_suspicious_prices OWNER TO matthewmauer;

--
-- Name: recently_used_components; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.recently_used_components AS
 SELECT component_usage_stats.component_type,
    component_usage_stats.component_id,
    component_usage_stats.total_uses,
    component_usage_stats.success_rate,
    component_usage_stats.last_used_at
   FROM public.component_usage_stats
  WHERE (component_usage_stats.last_used_at IS NOT NULL)
  ORDER BY component_usage_stats.last_used_at DESC
 LIMIT 100;


ALTER TABLE public.recently_used_components OWNER TO matthewmauer;

--
-- Name: relay_stats_by_user; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.relay_stats_by_user AS
 SELECT email_relay_logs.user_id,
    count(*) AS total_relayed,
    count(*) FILTER (WHERE ((email_relay_logs.status)::text = 'sent'::text)) AS successful,
    count(*) FILTER (WHERE ((email_relay_logs.status)::text = 'failed'::text)) AS failed,
    count(*) FILTER (WHERE ((email_relay_logs.status)::text = 'filtered'::text)) AS filtered,
    max(email_relay_logs.created_at) AS last_relay,
    min(email_relay_logs.created_at) AS first_relay
   FROM public.email_relay_logs
  GROUP BY email_relay_logs.user_id;


ALTER TABLE public.relay_stats_by_user OWNER TO matthewmauer;

--
-- Name: repo_stats; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.repo_stats AS
 SELECT cr.id,
    cr.name,
    cr.source,
    cr.language,
    count(DISTINCT cs.id) AS total_snippets,
    count(DISTINCT cu.id) AS total_uses,
    max(cr.last_indexed) AS last_indexed
   FROM ((public.code_repositories cr
     LEFT JOIN public.code_snippets cs ON ((cs.repo_id = cr.id)))
     LEFT JOIN public.code_usage cu ON ((cu.snippet_id = cs.id)))
  WHERE (cr.is_active = true)
  GROUP BY cr.id, cr.name, cr.source, cr.language;


ALTER TABLE public.repo_stats OWNER TO matthewmauer;

--
-- Name: request_lifecycle; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.request_lifecycle (
    id integer NOT NULL,
    request_id uuid DEFAULT gen_random_uuid() NOT NULL,
    parent_request_id uuid,
    state text DEFAULT 'created'::text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    pending_at timestamp with time zone,
    running_at timestamp with time zone,
    completed_at timestamp with time zone,
    failed_at timestamp with time zone,
    killed_at timestamp with time zone,
    timeout_at timestamp with time zone,
    endpoint text NOT NULL,
    method text DEFAULT 'POST'::text,
    bucket_id text,
    bucket_name text,
    model_id text,
    routing_rule text,
    prompt_text text,
    prompt_length integer,
    input_hash text,
    user_id text,
    session_id text,
    room_id text,
    priority integer DEFAULT 50,
    started_by text,
    executed_by text,
    response_text text,
    response_length integer,
    response_time_ms integer,
    error_message text,
    error_code text,
    error_stack text,
    retry_count integer DEFAULT 0,
    max_retries integer DEFAULT 3,
    timeout_ms integer DEFAULT 120000,
    deadline_at timestamp with time zone,
    killed_by text,
    kill_reason text,
    cleanup_performed boolean DEFAULT false,
    cleanup_at timestamp with time zone,
    cleanup_actions jsonb,
    queue_time_ms integer,
    execution_time_ms integer,
    total_time_ms integer,
    tags text[],
    metadata jsonb,
    CONSTRAINT request_lifecycle_state_check CHECK ((state = ANY (ARRAY['created'::text, 'pending'::text, 'running'::text, 'completed'::text, 'failed'::text, 'killed'::text, 'timeout'::text]))),
    CONSTRAINT valid_times CHECK ((((completed_at IS NULL) OR (running_at IS NOT NULL)) AND ((failed_at IS NULL) OR (running_at IS NOT NULL)) AND ((killed_at IS NULL) OR (created_at IS NOT NULL))))
);


ALTER TABLE public.request_lifecycle OWNER TO matthewmauer;

--
-- Name: TABLE request_lifecycle; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.request_lifecycle IS 'Full lifecycle tracking for all requests: created → pending → running → completed/failed/killed/timeout';


--
-- Name: request_lifecycle_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.request_lifecycle_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.request_lifecycle_id_seq OWNER TO matthewmauer;

--
-- Name: request_lifecycle_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.request_lifecycle_id_seq OWNED BY public.request_lifecycle.id;


--
-- Name: request_state_transitions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.request_state_transitions (
    id integer NOT NULL,
    request_id uuid NOT NULL,
    from_state text,
    to_state text NOT NULL,
    transitioned_at timestamp with time zone DEFAULT now(),
    transition_duration_ms integer,
    reason text,
    triggered_by text,
    metadata jsonb
);


ALTER TABLE public.request_state_transitions OWNER TO matthewmauer;

--
-- Name: TABLE request_state_transitions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.request_state_transitions IS 'Audit trail of all state transitions for requests';


--
-- Name: request_state_transitions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.request_state_transitions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.request_state_transitions_id_seq OWNER TO matthewmauer;

--
-- Name: request_state_transitions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.request_state_transitions_id_seq OWNED BY public.request_state_transitions.id;


--
-- Name: resource_states; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.resource_states (
    app_id uuid NOT NULL,
    resource_id text NOT NULL,
    resource_type text NOT NULL,
    resource_path text NOT NULL,
    state text DEFAULT 'empty'::text,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.resource_states OWNER TO matthewmauer;

--
-- Name: TABLE resource_states; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.resource_states IS 'Track loading state of app resources (empty vs loaded)';


--
-- Name: resource_loading_progress; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.resource_loading_progress AS
 SELECT resource_states.app_id,
    count(*) AS total_resources,
    count(
        CASE
            WHEN (resource_states.state = 'empty'::text) THEN 1
            ELSE NULL::integer
        END) AS empty,
    count(
        CASE
            WHEN (resource_states.state = 'loading'::text) THEN 1
            ELSE NULL::integer
        END) AS loading,
    count(
        CASE
            WHEN (resource_states.state = 'loaded'::text) THEN 1
            ELSE NULL::integer
        END) AS loaded,
    count(
        CASE
            WHEN (resource_states.state = 'failed'::text) THEN 1
            ELSE NULL::integer
        END) AS failed,
    round((((count(
        CASE
            WHEN (resource_states.state = 'loaded'::text) THEN 1
            ELSE NULL::integer
        END))::numeric / (count(*))::numeric) * (100)::numeric), 2) AS load_percent
   FROM public.resource_states
  GROUP BY resource_states.app_id;


ALTER TABLE public.resource_loading_progress OWNER TO matthewmauer;

--
-- Name: VIEW resource_loading_progress; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.resource_loading_progress IS 'Resource loading progress by app';


--
-- Name: resource_manifests; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.resource_manifests (
    app_id uuid NOT NULL,
    manifest_data jsonb NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.resource_manifests OWNER TO matthewmauer;

--
-- Name: TABLE resource_manifests; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.resource_manifests IS 'Asset compilation manifests for app instances';


--
-- Name: room_state; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.room_state (
    id integer NOT NULL,
    room_name character varying(100) NOT NULL,
    current_song_id integer,
    current_song_started_at timestamp without time zone,
    current_viewers integer DEFAULT 0,
    peak_viewers integer DEFAULT 0,
    total_sessions integer DEFAULT 0,
    queue_length integer DEFAULT 0,
    last_updated timestamp without time zone DEFAULT now()
);


ALTER TABLE public.room_state OWNER TO matthewmauer;

--
-- Name: room_state_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.room_state_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.room_state_id_seq OWNER TO matthewmauer;

--
-- Name: room_state_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.room_state_id_seq OWNED BY public.room_state.id;


--
-- Name: room_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.room_summary AS
 SELECT r.id,
    r.name,
    r.slug,
    r.room_type,
    r.primary_language,
    r.ollama_model_name,
    r.model_training_status,
    count(DISTINCT rr.repo_id) AS repo_count,
    count(DISTINCT cs.id) AS snippet_count,
    max(r.last_trained) AS last_trained
   FROM ((public.code_rooms r
     LEFT JOIN public.code_room_repositories rr ON ((rr.room_id = r.id)))
     LEFT JOIN public.code_snippets cs ON ((cs.repo_id = rr.repo_id)))
  GROUP BY r.id, r.name, r.slug, r.room_type, r.primary_language, r.ollama_model_name, r.model_training_status;


ALTER TABLE public.room_summary OWNER TO matthewmauer;

--
-- Name: scheduled_jobs; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.scheduled_jobs (
    id integer NOT NULL,
    job_name character varying(255) NOT NULL,
    job_type character varying(50) NOT NULL,
    schedule_expression character varying(100),
    interval_seconds integer,
    job_config jsonb,
    is_enabled boolean DEFAULT true,
    last_run timestamp without time zone,
    next_run timestamp without time zone,
    run_count integer DEFAULT 0,
    failure_count integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.scheduled_jobs OWNER TO matthewmauer;

--
-- Name: scheduled_jobs_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.scheduled_jobs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.scheduled_jobs_id_seq OWNER TO matthewmauer;

--
-- Name: scheduled_jobs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.scheduled_jobs_id_seq OWNED BY public.scheduled_jobs.id;


--
-- Name: scheduler_log; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.scheduler_log (
    id integer NOT NULL,
    job_name character varying(100) NOT NULL,
    job_type character varying(50) NOT NULL,
    status character varying(20) NOT NULL,
    started_at timestamp without time zone NOT NULL,
    completed_at timestamp without time zone,
    duration_ms integer,
    records_processed integer,
    errors_count integer,
    error_message text,
    metadata jsonb
);


ALTER TABLE public.scheduler_log OWNER TO matthewmauer;

--
-- Name: scheduler_log_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.scheduler_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.scheduler_log_id_seq OWNER TO matthewmauer;

--
-- Name: scheduler_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.scheduler_log_id_seq OWNED BY public.scheduler_log.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.schema_migrations (
    id integer NOT NULL,
    migration_name character varying(255) NOT NULL,
    applied_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    checksum character varying(64),
    execution_time_ms integer
);


ALTER TABLE public.schema_migrations OWNER TO matthewmauer;

--
-- Name: schema_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.schema_migrations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.schema_migrations_id_seq OWNER TO matthewmauer;

--
-- Name: schema_migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.schema_migrations_id_seq OWNED BY public.schema_migrations.id;


--
-- Name: sdk_tokens; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.sdk_tokens (
    id integer NOT NULL,
    developer_id integer NOT NULL,
    token character varying(128) NOT NULL,
    token_type character varying(50) DEFAULT 'client'::character varying,
    allowed_origins text[],
    allowed_ips text[],
    rate_limit_override integer,
    active boolean DEFAULT true,
    expires_at timestamp without time zone,
    revoked_at timestamp without time zone,
    last_used_at timestamp without time zone,
    usage_count integer DEFAULT 0,
    name character varying(255),
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.sdk_tokens OWNER TO matthewmauer;

--
-- Name: sdk_tokens_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.sdk_tokens_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sdk_tokens_id_seq OWNER TO matthewmauer;

--
-- Name: sdk_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.sdk_tokens_id_seq OWNED BY public.sdk_tokens.id;


--
-- Name: service_credentials; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.service_credentials (
    id integer NOT NULL,
    service_name character varying(255) NOT NULL,
    credential_type character varying(50) NOT NULL,
    identifier character varying(255),
    encrypted_value text NOT NULL,
    encryption_method character varying(50) DEFAULT 'aes-256-gcm'::character varying,
    iv text,
    auth_tag text,
    description text,
    scopes text[],
    expires_at timestamp without time zone,
    last_used timestamp without time zone,
    use_count integer DEFAULT 0,
    is_active boolean DEFAULT true,
    is_verified boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.service_credentials OWNER TO matthewmauer;

--
-- Name: TABLE service_credentials; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.service_credentials IS 'Encrypted storage for API keys and secrets (AES-256-GCM)';


--
-- Name: COLUMN service_credentials.identifier; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.service_credentials.identifier IS 'Scope identifier: tenant_id, user_id, or "system" for platform keys';


--
-- Name: COLUMN service_credentials.encrypted_value; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.service_credentials.encrypted_value IS 'AES-256-GCM encrypted credential value';


--
-- Name: COLUMN service_credentials.iv; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.service_credentials.iv IS 'Initialization vector for encryption';


--
-- Name: COLUMN service_credentials.auth_tag; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.service_credentials.auth_tag IS 'GCM authentication tag for tamper detection';


--
-- Name: service_credentials_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.service_credentials_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.service_credentials_id_seq OWNER TO matthewmauer;

--
-- Name: service_credentials_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.service_credentials_id_seq OWNED BY public.service_credentials.id;


--
-- Name: session_analytics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.session_analytics AS
 SELECT visit_sessions.page,
    count(*) AS total_sessions,
    avg(visit_sessions.duration_ms) AS avg_duration_ms,
    percentile_cont((0.5)::double precision) WITHIN GROUP (ORDER BY ((visit_sessions.duration_ms)::double precision)) AS median_duration_ms,
    count(*) FILTER (WHERE (visit_sessions.duration_ms < 5000)) AS bounce_count,
    ((count(*) FILTER (WHERE (visit_sessions.duration_ms < 5000)))::double precision / (count(*))::double precision) AS bounce_rate,
    avg(visit_sessions.total_interactions) AS avg_interactions,
    count(DISTINCT visit_sessions.device_id) AS unique_devices,
    max(visit_sessions.start_time) AS last_session
   FROM public.visit_sessions
  WHERE (visit_sessions.start_time > (now() - '7 days'::interval))
  GROUP BY visit_sessions.page
  ORDER BY (count(*)) DESC;


ALTER TABLE public.session_analytics OWNER TO matthewmauer;

--
-- Name: shard_registry; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.shard_registry (
    id integer NOT NULL,
    shard_index integer NOT NULL,
    shard_name character varying(100) NOT NULL,
    host character varying(255) NOT NULL,
    port integer NOT NULL,
    database_name character varying(100) NOT NULL,
    status character varying(20) DEFAULT 'active'::character varying NOT NULL,
    weight integer DEFAULT 1 NOT NULL,
    virtual_nodes integer DEFAULT 150 NOT NULL,
    added_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_health_check timestamp without time zone,
    health_status character varying(20) DEFAULT 'unknown'::character varying,
    consecutive_failures integer DEFAULT 0,
    metadata jsonb
);


ALTER TABLE public.shard_registry OWNER TO matthewmauer;

--
-- Name: TABLE shard_registry; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.shard_registry IS 'Registry of database shards for consistent hashing';


--
-- Name: COLUMN shard_registry.weight; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.shard_registry.weight IS 'Shard weight for load distribution';


--
-- Name: COLUMN shard_registry.virtual_nodes; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.shard_registry.virtual_nodes IS 'Number of virtual nodes in consistent hash ring';


--
-- Name: shard_health; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.shard_health AS
 SELECT shard_registry.shard_index,
    shard_registry.shard_name,
    shard_registry.host,
    shard_registry.port,
    shard_registry.status,
    shard_registry.health_status,
    shard_registry.consecutive_failures,
    shard_registry.last_health_check,
        CASE
            WHEN (shard_registry.last_health_check IS NULL) THEN 'Never checked'::text
            WHEN (shard_registry.last_health_check < (now() - '00:05:00'::interval)) THEN 'Stale'::text
            WHEN ((shard_registry.health_status)::text = 'healthy'::text) THEN 'OK'::text
            WHEN ((shard_registry.health_status)::text = 'degraded'::text) THEN 'Warning'::text
            ELSE 'Critical'::text
        END AS health_summary
   FROM public.shard_registry
  ORDER BY shard_registry.shard_index;


ALTER TABLE public.shard_health OWNER TO matthewmauer;

--
-- Name: shard_registry_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.shard_registry_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.shard_registry_id_seq OWNER TO matthewmauer;

--
-- Name: shard_registry_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.shard_registry_id_seq OWNED BY public.shard_registry.id;


--
-- Name: slow_responses; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.slow_responses AS
 SELECT ai_responses.provider,
    ai_responses.model,
    ai_responses.latency_ms,
    ai_responses.query_text,
    ai_responses.request_timestamp
   FROM public.ai_responses
  WHERE ((ai_responses.latency_ms > 5000) AND (ai_responses.latency_ms IS NOT NULL))
  ORDER BY ai_responses.latency_ms DESC;


ALTER TABLE public.slow_responses OWNER TO matthewmauer;

--
-- Name: snapshot_deployments; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.snapshot_deployments (
    deployment_id integer NOT NULL,
    snapshot_id text NOT NULL,
    environment text NOT NULL,
    bucket_id text,
    deployed_by text,
    deployment_method text,
    deployment_reason text,
    status text DEFAULT 'active'::text,
    requests_served integer DEFAULT 0,
    avg_success_rate real,
    avg_response_time_ms real,
    error_count integer DEFAULT 0,
    deployed_at timestamp with time zone DEFAULT now(),
    ended_at timestamp with time zone,
    CONSTRAINT snapshot_deployments_status_check CHECK ((status = ANY (ARRAY['active'::text, 'failed'::text, 'rolled_back'::text, 'superseded'::text])))
);


ALTER TABLE public.snapshot_deployments OWNER TO matthewmauer;

--
-- Name: TABLE snapshot_deployments; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.snapshot_deployments IS 'Track when/where snapshots were deployed';


--
-- Name: snapshot_deployments_deployment_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.snapshot_deployments_deployment_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.snapshot_deployments_deployment_id_seq OWNER TO matthewmauer;

--
-- Name: snapshot_deployments_deployment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.snapshot_deployments_deployment_id_seq OWNED BY public.snapshot_deployments.deployment_id;


--
-- Name: snapshot_diffs; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.snapshot_diffs (
    diff_id integer NOT NULL,
    from_snapshot_id text NOT NULL,
    to_snapshot_id text NOT NULL,
    change_type text NOT NULL,
    change_path text,
    old_value text,
    new_value text,
    impact_level text DEFAULT 'minor'::text,
    impact_description text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT snapshot_diffs_impact_level_check CHECK ((impact_level = ANY (ARRAY['minor'::text, 'moderate'::text, 'major'::text, 'breaking'::text])))
);


ALTER TABLE public.snapshot_diffs OWNER TO matthewmauer;

--
-- Name: TABLE snapshot_diffs; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.snapshot_diffs IS 'Track what changed between snapshots';


--
-- Name: snapshot_diffs_diff_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.snapshot_diffs_diff_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.snapshot_diffs_diff_id_seq OWNER TO matthewmauer;

--
-- Name: snapshot_diffs_diff_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.snapshot_diffs_diff_id_seq OWNED BY public.snapshot_diffs.diff_id;


--
-- Name: snapshot_performance_comparison; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.snapshot_performance_comparison AS
 SELECT sd.snapshot_id,
    dcs.domain_context,
    dcs.snapshot_tag,
    sd.environment,
    sd.requests_served,
    sd.avg_success_rate,
    sd.avg_response_time_ms,
    sd.error_count,
    ((sd.error_count)::real / (NULLIF(sd.requests_served, 0))::double precision) AS error_rate
   FROM (public.snapshot_deployments sd
     JOIN public.domain_context_snapshots dcs ON ((sd.snapshot_id = dcs.snapshot_id)))
  WHERE (sd.status = 'active'::text)
  ORDER BY sd.environment, dcs.domain_context;


ALTER TABLE public.snapshot_performance_comparison OWNER TO matthewmauer;

--
-- Name: snapshot_validations; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.snapshot_validations (
    validation_id integer NOT NULL,
    snapshot_id text NOT NULL,
    validation_type text NOT NULL,
    test_name text,
    test_case text,
    passed boolean NOT NULL,
    score real,
    error_message text,
    output text,
    execution_time_ms integer,
    validated_at timestamp with time zone DEFAULT now(),
    validated_by text
);


ALTER TABLE public.snapshot_validations OWNER TO matthewmauer;

--
-- Name: TABLE snapshot_validations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.snapshot_validations IS 'Test results for each snapshot';


--
-- Name: snapshot_validations_validation_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.snapshot_validations_validation_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.snapshot_validations_validation_id_seq OWNER TO matthewmauer;

--
-- Name: snapshot_validations_validation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.snapshot_validations_validation_id_seq OWNED BY public.snapshot_validations.validation_id;


--
-- Name: song_requests; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.song_requests (
    id integer NOT NULL,
    device_id character varying(64) NOT NULL,
    user_id uuid,
    song_title character varying(255) NOT NULL,
    song_artist character varying(255),
    song_url text,
    song_duration_seconds integer,
    message text,
    requested_at timestamp without time zone DEFAULT now(),
    queue_position integer,
    status character varying(50) DEFAULT 'pending'::character varying,
    approved_by uuid,
    approved_at timestamp without time zone,
    rejection_reason text,
    played_at timestamp without time zone,
    play_duration_ms integer,
    skip_count integer DEFAULT 0,
    requester_badge character varying(50),
    requester_reputation numeric(3,2)
);


ALTER TABLE public.song_requests OWNER TO matthewmauer;

--
-- Name: song_queue; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.song_queue AS
 SELECT sr.id,
    sr.song_title,
    sr.song_artist,
    sr.song_url,
    sr.song_duration_seconds,
    sr.message,
    sr.queue_position,
    sr.status,
    sr.requested_at,
    sr.requester_badge,
    ud.current_badge AS current_requester_badge,
    ud.trust_score
   FROM (public.song_requests sr
     LEFT JOIN public.user_devices ud ON (((sr.device_id)::text = (ud.device_id)::text)))
  WHERE ((sr.status)::text = ANY ((ARRAY['pending'::character varying, 'approved'::character varying])::text[]))
  ORDER BY sr.queue_position, sr.requested_at;


ALTER TABLE public.song_queue OWNER TO matthewmauer;

--
-- Name: song_requests_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.song_requests_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.song_requests_id_seq OWNER TO matthewmauer;

--
-- Name: song_requests_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.song_requests_id_seq OWNED BY public.song_requests.id;


--
-- Name: source_reliability; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.source_reliability AS
 SELECT data_source_stats.source_name,
    data_source_stats.data_type,
    data_source_stats.requests,
    data_source_stats.successes,
    data_source_stats.failures,
        CASE
            WHEN (data_source_stats.requests > 0) THEN round((((data_source_stats.successes)::numeric / (data_source_stats.requests)::numeric) * (100)::numeric), 2)
            ELSE (0)::numeric
        END AS success_rate,
    data_source_stats.average_latency_ms,
    data_source_stats.last_success,
    data_source_stats.last_failure
   FROM public.data_source_stats
  ORDER BY
        CASE
            WHEN (data_source_stats.requests > 0) THEN round((((data_source_stats.successes)::numeric / (data_source_stats.requests)::numeric) * (100)::numeric), 2)
            ELSE (0)::numeric
        END DESC, data_source_stats.average_latency_ms;


ALTER TABLE public.source_reliability OWNER TO matthewmauer;

--
-- Name: source_reliability_ranking; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.source_reliability_ranking AS
 SELECT price_sources.source_name,
    price_sources.total_fetches,
    price_sources.successful_fetches,
    price_sources.failed_fetches,
    round(((((price_sources.successful_fetches)::double precision / (NULLIF(price_sources.total_fetches, 0))::double precision) * (100)::double precision))::numeric, 2) AS success_rate,
    price_sources.avg_spread_percent,
    price_sources.reliability_score,
        CASE
            WHEN (price_sources.reliability_score >= (95)::numeric) THEN 'Excellent'::text
            WHEN (price_sources.reliability_score >= (85)::numeric) THEN 'Good'::text
            WHEN (price_sources.reliability_score >= (70)::numeric) THEN 'Fair'::text
            ELSE 'Poor'::text
        END AS rating,
    price_sources.last_updated
   FROM public.price_sources
  ORDER BY price_sources.reliability_score DESC;


ALTER TABLE public.source_reliability_ranking OWNER TO matthewmauer;

--
-- Name: sprite_atlas; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.sprite_atlas (
    id integer NOT NULL,
    sheet_id integer,
    sprite_name character varying(255) NOT NULL,
    x integer NOT NULL,
    y integer NOT NULL,
    width integer NOT NULL,
    height integer NOT NULL,
    pivot_x numeric(3,2) DEFAULT 0.5,
    pivot_y numeric(3,2) DEFAULT 0.5,
    tags text[],
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.sprite_atlas OWNER TO matthewmauer;

--
-- Name: TABLE sprite_atlas; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.sprite_atlas IS 'Named sprite regions within a sprite sheet';


--
-- Name: sprite_atlas_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.sprite_atlas_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sprite_atlas_id_seq OWNER TO matthewmauer;

--
-- Name: sprite_atlas_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.sprite_atlas_id_seq OWNED BY public.sprite_atlas.id;


--
-- Name: sprite_sheets; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.sprite_sheets (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    display_name character varying(255),
    description text,
    image_url text NOT NULL,
    image_width integer NOT NULL,
    image_height integer NOT NULL,
    frame_width integer NOT NULL,
    frame_height integer NOT NULL,
    frames integer NOT NULL,
    columns integer,
    rows integer,
    padding integer DEFAULT 0,
    offset_x integer DEFAULT 0,
    offset_y integer DEFAULT 0,
    category character varying(100),
    tags text[],
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    created_by integer,
    usage_count integer DEFAULT 0,
    last_used_at timestamp without time zone
);


ALTER TABLE public.sprite_sheets OWNER TO matthewmauer;

--
-- Name: TABLE sprite_sheets; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.sprite_sheets IS 'Sprite sheet definitions with grid layout';


--
-- Name: sprite_sheets_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.sprite_sheets_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sprite_sheets_id_seq OWNER TO matthewmauer;

--
-- Name: sprite_sheets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.sprite_sheets_id_seq OWNED BY public.sprite_sheets.id;


--
-- Name: stream_chat; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.stream_chat (
    id bigint NOT NULL,
    stream_id character varying(255) NOT NULL,
    viewer_id character varying(255) NOT NULL,
    username character varying(255) NOT NULL,
    message text NOT NULL,
    message_type character varying(20) DEFAULT 'chat'::character varying,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.stream_chat OWNER TO matthewmauer;

--
-- Name: TABLE stream_chat; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.stream_chat IS 'Chat messages for streams';


--
-- Name: stream_chat_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.stream_chat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stream_chat_id_seq OWNER TO matthewmauer;

--
-- Name: stream_chat_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.stream_chat_id_seq OWNED BY public.stream_chat.id;


--
-- Name: stream_sessions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.stream_sessions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stream_sessions_id_seq OWNER TO matthewmauer;

--
-- Name: stream_sessions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.stream_sessions_id_seq OWNED BY public.stream_sessions.id;


--
-- Name: stream_viewers_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.stream_viewers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stream_viewers_id_seq OWNER TO matthewmauer;

--
-- Name: stream_viewers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.stream_viewers_id_seq OWNED BY public.stream_viewers.id;


--
-- Name: strong_correlations; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.strong_correlations AS
 SELECT price_correlations.symbol1,
    price_correlations.symbol2,
    price_correlations.correlation,
    price_correlations.strength,
    price_correlations.relationship,
    price_correlations.timeframe,
    price_correlations.calculated_at,
        CASE
            WHEN ((price_correlations.relationship)::text = 'positive'::text) THEN 'Move together'::text
            WHEN ((price_correlations.relationship)::text = 'inverse'::text) THEN 'Move opposite'::text
            ELSE 'No clear pattern'::text
        END AS behavior
   FROM public.price_correlations
  WHERE (abs(price_correlations.correlation) >= 0.7)
  ORDER BY (abs(price_correlations.correlation)) DESC, price_correlations.calculated_at DESC;


ALTER TABLE public.strong_correlations OWNER TO matthewmauer;

--
-- Name: VIEW strong_correlations; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.strong_correlations IS 'Correlations with |r| > 0.7 (strong relationships)';


--
-- Name: submissions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.submissions (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    challenge_id integer,
    file_name character varying(500) NOT NULL,
    file_size integer NOT NULL,
    file_path text,
    content_type character varying(50) NOT NULL,
    raw_content text NOT NULL,
    tracks jsonb NOT NULL,
    grading_tracks text[] NOT NULL,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.submissions OWNER TO matthewmauer;

--
-- Name: TABLE submissions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.submissions IS 'Code submissions with content separated by track';


--
-- Name: COLUMN submissions.tracks; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.submissions.tracks IS 'Separated content: { visual: CSS, logic: JS/Python, audio: audio code }';


--
-- Name: COLUMN submissions.grading_tracks; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.submissions.grading_tracks IS 'Array of tracks to grade: [visual, logic, audio]';


--
-- Name: submission_statistics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.submission_statistics AS
 SELECT s.content_type,
    count(DISTINCT s.id) AS total_submissions,
    count(DISTINCT s.user_id) AS unique_users,
    avg(s.file_size) AS avg_file_size,
    count(DISTINCT s.challenge_id) AS challenges_with_submissions
   FROM public.submissions s
  GROUP BY s.content_type;


ALTER TABLE public.submission_statistics OWNER TO matthewmauer;

--
-- Name: submissions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.submissions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.submissions_id_seq OWNER TO matthewmauer;

--
-- Name: submissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.submissions_id_seq OWNED BY public.submissions.id;


--
-- Name: survey_questions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.survey_questions (
    id integer NOT NULL,
    level integer NOT NULL,
    question_order integer NOT NULL,
    question_text text NOT NULL,
    question_type character varying(50) NOT NULL,
    options jsonb,
    placeholder text,
    help_text text,
    required boolean DEFAULT true,
    validation_rules jsonb,
    base_reward numeric(10,2) DEFAULT 0.00,
    category character varying(100),
    depends_on_question integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.survey_questions OWNER TO matthewmauer;

--
-- Name: survey_questions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.survey_questions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.survey_questions_id_seq OWNER TO matthewmauer;

--
-- Name: survey_questions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.survey_questions_id_seq OWNED BY public.survey_questions.id;


--
-- Name: survey_responses; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.survey_responses (
    id integer NOT NULL,
    profile_id integer NOT NULL,
    question_id integer NOT NULL,
    answer text NOT NULL,
    answer_metadata jsonb DEFAULT '{}'::jsonb,
    quality_score integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.survey_responses OWNER TO matthewmauer;

--
-- Name: survey_responses_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.survey_responses_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.survey_responses_id_seq OWNER TO matthewmauer;

--
-- Name: survey_responses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.survey_responses_id_seq OWNED BY public.survey_responses.id;


--
-- Name: swipe_history; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.swipe_history (
    id integer NOT NULL,
    profile_data jsonb NOT NULL,
    direction character varying(10) NOT NULL,
    match_id integer,
    session_id character varying(100),
    user_id character varying(100),
    swiped_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.swipe_history OWNER TO matthewmauer;

--
-- Name: swipe_history_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.swipe_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.swipe_history_id_seq OWNER TO matthewmauer;

--
-- Name: swipe_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.swipe_history_id_seq OWNED BY public.swipe_history.id;


--
-- Name: swipe_statistics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.swipe_statistics AS
 SELECT count(*) AS total_swipes,
    count(*) FILTER (WHERE ((swipe_history.direction)::text = 'right'::text)) AS accepted,
    count(*) FILTER (WHERE ((swipe_history.direction)::text = 'left'::text)) AS rejected,
    round(((100.0 * (count(*) FILTER (WHERE ((swipe_history.direction)::text = 'right'::text)))::numeric) / (NULLIF(count(*), 0))::numeric), 2) AS accept_rate,
    count(DISTINCT swipe_history.session_id) AS unique_sessions,
    count(DISTINCT swipe_history.user_id) AS unique_users
   FROM public.swipe_history;


ALTER TABLE public.swipe_statistics OWNER TO matthewmauer;

--
-- Name: system_health_dashboard; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.system_health_dashboard AS
 SELECT 'guardian'::text AS component,
    count(*) AS checks_last_hour,
    max(guardian_log."timestamp") AS last_check,
    bool_or(((guardian_log.result)::text = ANY ((ARRAY['unhealthy'::character varying, 'failed'::character varying])::text[]))) AS has_issues
   FROM public.guardian_log
  WHERE (guardian_log."timestamp" > (now() - '01:00:00'::interval))
UNION ALL
 SELECT 'scheduler'::text AS component,
    count(*) AS checks_last_hour,
    max(scheduler_log.started_at) AS last_check,
    bool_or(((scheduler_log.status)::text = 'failed'::text)) AS has_issues
   FROM public.scheduler_log
  WHERE (scheduler_log.started_at > (now() - '01:00:00'::interval));


ALTER TABLE public.system_health_dashboard OWNER TO matthewmauer;

--
-- Name: telemetry_aggregates; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.telemetry_aggregates (
    aggregate_id integer NOT NULL,
    install_id character varying(32) NOT NULL,
    date date NOT NULL,
    features_used jsonb DEFAULT '{}'::jsonb,
    avg_response_time_ms integer,
    p95_response_time_ms integer,
    p99_response_time_ms integer,
    total_errors integer DEFAULT 0,
    error_types jsonb DEFAULT '{}'::jsonb,
    total_requests integer DEFAULT 0,
    successful_requests integer DEFAULT 0,
    client_errors integer DEFAULT 0,
    server_errors integer DEFAULT 0,
    active_sessions integer DEFAULT 0,
    avg_session_duration_seconds integer,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.telemetry_aggregates OWNER TO matthewmauer;

--
-- Name: TABLE telemetry_aggregates; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.telemetry_aggregates IS 'Daily telemetry aggregates (summary stats)';


--
-- Name: COLUMN telemetry_aggregates.features_used; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.telemetry_aggregates.features_used IS 'Feature usage counts per day (JSON)';


--
-- Name: telemetry_aggregates_aggregate_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.telemetry_aggregates_aggregate_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.telemetry_aggregates_aggregate_id_seq OWNER TO matthewmauer;

--
-- Name: telemetry_aggregates_aggregate_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.telemetry_aggregates_aggregate_id_seq OWNED BY public.telemetry_aggregates.aggregate_id;


--
-- Name: telemetry_errors; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.telemetry_errors (
    error_id integer NOT NULL,
    install_id character varying(32) NOT NULL,
    error_type character varying(100) NOT NULL,
    error_name character varying(255),
    error_message text,
    error_stack text,
    path character varying(500),
    method character varying(10),
    status_code integer,
    occurrence_count integer DEFAULT 1,
    first_seen_at timestamp without time zone DEFAULT now(),
    last_seen_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.telemetry_errors OWNER TO matthewmauer;

--
-- Name: TABLE telemetry_errors; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.telemetry_errors IS 'Error tracking (obfuscated, no PII)';


--
-- Name: COLUMN telemetry_errors.error_type; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.telemetry_errors.error_type IS 'Error category: database, network, validation, authentication, etc.';


--
-- Name: telemetry_errors_error_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.telemetry_errors_error_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.telemetry_errors_error_id_seq OWNER TO matthewmauer;

--
-- Name: telemetry_errors_error_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.telemetry_errors_error_id_seq OWNED BY public.telemetry_errors.error_id;


--
-- Name: telemetry_events; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.telemetry_events (
    event_id integer NOT NULL,
    install_id character varying(32) NOT NULL,
    event_type character varying(50) NOT NULL,
    event_data jsonb NOT NULL,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.telemetry_events OWNER TO matthewmauer;

--
-- Name: TABLE telemetry_events; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.telemetry_events IS 'All telemetry events (obfuscated, no PII)';


--
-- Name: COLUMN telemetry_events.event_type; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.telemetry_events.event_type IS 'Event type: feature_usage, performance, error, session, api_request';


--
-- Name: COLUMN telemetry_events.event_data; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.telemetry_events.event_data IS 'Obfuscated event data (JSON)';


--
-- Name: telemetry_events_event_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.telemetry_events_event_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.telemetry_events_event_id_seq OWNER TO matthewmauer;

--
-- Name: telemetry_events_event_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.telemetry_events_event_id_seq OWNED BY public.telemetry_events.event_id;


--
-- Name: telemetry_features; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.telemetry_features (
    feature_id integer NOT NULL,
    install_id character varying(32) NOT NULL,
    feature_name character varying(100) NOT NULL,
    usage_count integer DEFAULT 0,
    last_used_at timestamp without time zone,
    first_used_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.telemetry_features OWNER TO matthewmauer;

--
-- Name: TABLE telemetry_features; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.telemetry_features IS 'Feature usage tracking (aggregated)';


--
-- Name: COLUMN telemetry_features.feature_name; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.telemetry_features.feature_name IS 'Feature name: pos_transaction, transcript_upload, etc.';


--
-- Name: telemetry_features_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.telemetry_features_feature_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.telemetry_features_feature_id_seq OWNER TO matthewmauer;

--
-- Name: telemetry_features_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.telemetry_features_feature_id_seq OWNED BY public.telemetry_features.feature_id;


--
-- Name: telemetry_performance; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.telemetry_performance (
    performance_id integer NOT NULL,
    install_id character varying(32) NOT NULL,
    metric_name character varying(100) NOT NULL,
    path character varying(500),
    duration_ms integer NOT NULL,
    status_code integer,
    recorded_at date DEFAULT CURRENT_DATE,
    hour integer DEFAULT EXTRACT(hour FROM now()),
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.telemetry_performance OWNER TO matthewmauer;

--
-- Name: TABLE telemetry_performance; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.telemetry_performance IS 'Performance metrics (response times, durations)';


--
-- Name: COLUMN telemetry_performance.metric_name; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.telemetry_performance.metric_name IS 'Metric name: api_request, database_query, slow_request';


--
-- Name: telemetry_performance_performance_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.telemetry_performance_performance_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.telemetry_performance_performance_id_seq OWNER TO matthewmauer;

--
-- Name: telemetry_performance_performance_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.telemetry_performance_performance_id_seq OWNED BY public.telemetry_performance.performance_id;


--
-- Name: telemetry_sessions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.telemetry_sessions (
    session_id integer NOT NULL,
    install_id character varying(32) NOT NULL,
    session_hash character varying(64) NOT NULL,
    user_hash character varying(64),
    session_type character varying(50),
    duration_seconds integer,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.telemetry_sessions OWNER TO matthewmauer;

--
-- Name: TABLE telemetry_sessions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.telemetry_sessions IS 'Session analytics (active sessions, duration)';


--
-- Name: COLUMN telemetry_sessions.session_hash; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.telemetry_sessions.session_hash IS 'Hashed session ID (SHA-256)';


--
-- Name: telemetry_sessions_session_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.telemetry_sessions_session_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.telemetry_sessions_session_id_seq OWNER TO matthewmauer;

--
-- Name: telemetry_sessions_session_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.telemetry_sessions_session_id_seq OWNED BY public.telemetry_sessions.session_id;


--
-- Name: user_installed_apps; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_installed_apps (
    app_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    template_id text NOT NULL,
    tenant_id text NOT NULL,
    instance_id text NOT NULL,
    subdomain text NOT NULL,
    folder_path text NOT NULL,
    api_key text NOT NULL,
    status text DEFAULT 'active'::text,
    installed_at timestamp without time zone DEFAULT now(),
    uninstalled_at timestamp without time zone
);


ALTER TABLE public.user_installed_apps OWNER TO matthewmauer;

--
-- Name: TABLE user_installed_apps; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_installed_apps IS 'Apps installed by users (virtual provisioning - folder on server)';


--
-- Name: template_popularity; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.template_popularity AS
 SELECT at.template_id,
    at.name,
    at.category,
    at.icon,
    at.install_count,
    at.rating,
    count(DISTINCT uia.user_id) AS active_users,
    count(DISTINCT ar.rating_id) AS rating_count
   FROM ((public.app_templates at
     LEFT JOIN public.user_installed_apps uia ON (((uia.template_id = at.template_id) AND (uia.status = 'active'::text))))
     LEFT JOIN public.app_ratings ar ON ((ar.template_id = at.template_id)))
  WHERE (at.status = 'active'::text)
  GROUP BY at.template_id, at.name, at.category, at.icon, at.install_count, at.rating
  ORDER BY at.install_count DESC;


ALTER TABLE public.template_popularity OWNER TO matthewmauer;

--
-- Name: VIEW template_popularity; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.template_popularity IS 'Template popularity metrics';


--
-- Name: tenant_api_keys; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.tenant_api_keys (
    id integer NOT NULL,
    tenant_id uuid NOT NULL,
    provider character varying(50) NOT NULL,
    key_name character varying(255) NOT NULL,
    encrypted_api_key character varying(255) DEFAULT 'encrypted_by_keyring'::character varying,
    key_prefix character varying(20),
    active boolean DEFAULT true,
    verified_at timestamp with time zone,
    verification_error text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.tenant_api_keys OWNER TO matthewmauer;

--
-- Name: TABLE tenant_api_keys; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.tenant_api_keys IS 'Tenant BYOK metadata (actual keys stored in service_credentials)';


--
-- Name: COLUMN tenant_api_keys.encrypted_api_key; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.tenant_api_keys.encrypted_api_key IS 'Reference to Keyring storage, not actual key';


--
-- Name: COLUMN tenant_api_keys.key_prefix; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON COLUMN public.tenant_api_keys.key_prefix IS 'First few characters for UI display (e.g., "sk-proj...")';


--
-- Name: tenant_api_keys_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.tenant_api_keys_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tenant_api_keys_id_seq OWNER TO matthewmauer;

--
-- Name: tenant_api_keys_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.tenant_api_keys_id_seq OWNED BY public.tenant_api_keys.id;


--
-- Name: todo_archives; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.todo_archives (
    id integer NOT NULL,
    todo_id integer NOT NULL,
    decision_id integer NOT NULL,
    full_context jsonb NOT NULL,
    archived_by text NOT NULL,
    archive_reason text NOT NULL,
    archived_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.todo_archives OWNER TO matthewmauer;

--
-- Name: TABLE todo_archives; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.todo_archives IS 'Archived todos with full context snapshot';


--
-- Name: todo_archives_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.todo_archives_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.todo_archives_id_seq OWNER TO matthewmauer;

--
-- Name: todo_archives_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.todo_archives_id_seq OWNED BY public.todo_archives.id;


--
-- Name: todo_dependencies; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.todo_dependencies (
    id integer NOT NULL,
    todo_id integer NOT NULL,
    depends_on_todo_id integer NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT todo_dependencies_check CHECK ((todo_id <> depends_on_todo_id))
);


ALTER TABLE public.todo_dependencies OWNER TO matthewmauer;

--
-- Name: TABLE todo_dependencies; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.todo_dependencies IS 'Todo dependencies (what blocks what)';


--
-- Name: todo_dependencies_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.todo_dependencies_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.todo_dependencies_id_seq OWNER TO matthewmauer;

--
-- Name: todo_dependencies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.todo_dependencies_id_seq OWNED BY public.todo_dependencies.id;


--
-- Name: top_autonomous_patterns; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.top_autonomous_patterns AS
 SELECT ap.action,
    count(DISTINCT ap.session_id) AS usage_count,
    avg(ap.similarity_score) AS avg_similarity,
    avg(ap.success_rate) AS avg_success_rate,
    ap.pattern_metadata
   FROM public.autonomous_patterns ap
  GROUP BY ap.action, ap.pattern_metadata
 HAVING (count(DISTINCT ap.session_id) > 2)
  ORDER BY (avg(ap.success_rate)) DESC NULLS LAST, (count(DISTINCT ap.session_id)) DESC
 LIMIT 20;


ALTER TABLE public.top_autonomous_patterns OWNER TO matthewmauer;

--
-- Name: VIEW top_autonomous_patterns; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.top_autonomous_patterns IS 'Most successful patterns for reuse';


--
-- Name: top_compacted_projects; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.top_compacted_projects AS
 SELECT compaction_results.id,
    (compaction_results.project ->> 'title'::text) AS title,
    (compaction_results.project ->> 'description'::text) AS description,
    ((compaction_results.final_scores ->> 'local'::text))::numeric AS local_score,
    ((compaction_results.final_scores ->> 'ollama'::text))::numeric AS ollama_score,
    ((compaction_results.final_scores ->> 'combined'::text))::numeric AS combined_score,
    (((((compaction_results.stages -> 'compaction'::text) -> 'stats'::text) -> 'reduction'::text) ->> 'tokens'::text))::numeric AS token_reduction,
    ((compaction_results.timing ->> 'total'::text))::numeric AS processing_time_ms,
    compaction_results.created_at
   FROM public.compaction_results
  WHERE ((compaction_results.final_scores ->> 'combined'::text) IS NOT NULL)
  ORDER BY ((compaction_results.final_scores ->> 'combined'::text))::numeric DESC
 LIMIT 50;


ALTER TABLE public.top_compacted_projects OWNER TO matthewmauer;

--
-- Name: top_domain_patterns; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.top_domain_patterns AS
 SELECT dce.domain_context,
    dce.pattern_category,
    dce.pattern_name,
    dce.title,
    dce.language,
    dce.times_used,
    dce.success_rate,
    dce.user_rating,
    count(DISTINCT dpu.id) AS usage_count
   FROM (public.domain_code_examples dce
     LEFT JOIN public.domain_pattern_usage dpu ON ((dce.example_id = dpu.example_id)))
  WHERE ((dce.status = 'active'::text) AND (dce.is_current = true))
  GROUP BY dce.domain_context, dce.pattern_category, dce.pattern_name, dce.title, dce.language, dce.times_used, dce.success_rate, dce.user_rating
  ORDER BY dce.domain_context, (count(DISTINCT dpu.id)) DESC, dce.times_used DESC
 LIMIT 100;


ALTER TABLE public.top_domain_patterns OWNER TO matthewmauer;

--
-- Name: training_task_assignments; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.training_task_assignments (
    id integer NOT NULL,
    task_id integer,
    user_id integer,
    device_id integer,
    submission_data jsonb,
    quality_score real DEFAULT 0.5,
    time_spent_seconds integer,
    xp_earned integer DEFAULT 0,
    status text DEFAULT 'in_progress'::text,
    started_at timestamp with time zone DEFAULT now(),
    completed_at timestamp with time zone
);


ALTER TABLE public.training_task_assignments OWNER TO matthewmauer;

--
-- Name: TABLE training_task_assignments; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.training_task_assignments IS 'User completions of training tasks with submissions and rewards';


--
-- Name: top_task_contributors; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.top_task_contributors AS
 SELECT u.id AS user_id,
    u.username,
    count(DISTINCT ta.task_id) AS tasks_completed,
    sum(ta.xp_earned) AS total_xp_earned,
    avg(ta.quality_score) AS avg_quality,
    max(ta.completed_at) AS last_completed_at
   FROM (public.training_task_assignments ta
     JOIN public.users u ON ((u.id = ta.user_id)))
  WHERE (ta.status = 'completed'::text)
  GROUP BY u.id, u.username
  ORDER BY (sum(ta.xp_earned)) DESC
 LIMIT 100;


ALTER TABLE public.top_task_contributors OWNER TO matthewmauer;

--
-- Name: track_statistics; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.track_statistics AS
 SELECT grading_results.track,
    count(*) AS total_gradings,
    avg(grading_results.score) AS average_score,
    min(grading_results.score) AS min_score,
    max(grading_results.score) AS max_score,
    stddev(grading_results.score) AS score_stddev
   FROM public.grading_results
  GROUP BY grading_results.track;


ALTER TABLE public.track_statistics OWNER TO matthewmauer;

--
-- Name: trademark_info; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.trademark_info (
    trademark_id uuid DEFAULT gen_random_uuid() NOT NULL,
    domain_id uuid,
    trademark_name character varying(255) NOT NULL,
    trademark_symbol character varying(10),
    registration_number character varying(100),
    registration_date date,
    expiry_date date,
    trademark_class character varying(100),
    jurisdiction character varying(100),
    description text,
    status character varying(50) DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.trademark_info OWNER TO matthewmauer;

--
-- Name: TABLE trademark_info; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.trademark_info IS 'Trademark registrations for domain brands';


--
-- Name: training_pipeline_status; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.training_pipeline_status AS
 SELECT r.name AS room_name,
    r.ollama_model_name,
    t.status AS training_status,
    t.progress,
    t.started_at,
    t.completed_at,
    t.error_message
   FROM (public.ollama_training_jobs t
     JOIN public.code_rooms r ON ((r.id = t.room_id)))
  WHERE ((t.status)::text = ANY ((ARRAY['pending'::character varying, 'generating_data'::character varying, 'training'::character varying])::text[]))
  ORDER BY t.created_at DESC;


ALTER TABLE public.training_pipeline_status OWNER TO matthewmauer;

--
-- Name: training_task_assignments_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.training_task_assignments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.training_task_assignments_id_seq OWNER TO matthewmauer;

--
-- Name: training_task_assignments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.training_task_assignments_id_seq OWNED BY public.training_task_assignments.id;


--
-- Name: training_task_leaderboard; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.training_task_leaderboard (
    id integer NOT NULL,
    period_type text NOT NULL,
    period_start date NOT NULL,
    user_id integer,
    tasks_completed integer DEFAULT 0,
    total_xp_earned integer DEFAULT 0,
    avg_quality_score real DEFAULT 0,
    rank integer,
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.training_task_leaderboard OWNER TO matthewmauer;

--
-- Name: TABLE training_task_leaderboard; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.training_task_leaderboard IS 'Ranked leaderboard of top contributors per time period';


--
-- Name: training_task_leaderboard_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.training_task_leaderboard_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.training_task_leaderboard_id_seq OWNER TO matthewmauer;

--
-- Name: training_task_leaderboard_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.training_task_leaderboard_id_seq OWNED BY public.training_task_leaderboard.id;


--
-- Name: training_task_types; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.training_task_types (
    task_type text NOT NULL,
    display_name text NOT NULL,
    description text,
    min_trust_level text DEFAULT 'unverified'::text,
    cooldown_seconds integer DEFAULT 10,
    base_xp integer NOT NULL,
    skill text,
    config jsonb DEFAULT '{}'::jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.training_task_types OWNER TO matthewmauer;

--
-- Name: TABLE training_task_types; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.training_task_types IS 'Metadata and configuration for each task type';


--
-- Name: training_tasks; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.training_tasks (
    id integer NOT NULL,
    task_type text NOT NULL,
    task_data jsonb NOT NULL,
    assigned_user_id integer,
    assigned_device_id integer,
    base_xp_reward integer NOT NULL,
    bonus_xp_potential integer DEFAULT 0,
    skill text,
    priority integer DEFAULT 1,
    estimated_time_seconds integer DEFAULT 60,
    expires_at timestamp with time zone,
    status text DEFAULT 'available'::text,
    created_at timestamp with time zone DEFAULT now(),
    claimed_at timestamp with time zone,
    completed_at timestamp with time zone
);


ALTER TABLE public.training_tasks OWNER TO matthewmauer;

--
-- Name: TABLE training_tasks; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.training_tasks IS 'Pool of training tasks available for users to complete';


--
-- Name: training_task_stats_by_type; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.training_task_stats_by_type AS
 SELECT tt.task_type,
    ttt.display_name,
    count(*) AS total_tasks,
    count(*) FILTER (WHERE (tt.status = 'completed'::text)) AS completed,
    count(*) FILTER (WHERE (tt.status = 'available'::text)) AS available,
    avg(ta.quality_score) AS avg_quality,
    avg(ta.time_spent_seconds) AS avg_time_seconds
   FROM ((public.training_tasks tt
     LEFT JOIN public.training_task_types ttt ON ((ttt.task_type = tt.task_type)))
     LEFT JOIN public.training_task_assignments ta ON (((ta.task_id = tt.id) AND (ta.status = 'completed'::text))))
  GROUP BY tt.task_type, ttt.display_name;


ALTER TABLE public.training_task_stats_by_type OWNER TO matthewmauer;

--
-- Name: training_task_streaks; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.training_task_streaks (
    id integer NOT NULL,
    user_id integer,
    task_type text,
    current_streak integer DEFAULT 0,
    longest_streak integer DEFAULT 0,
    last_completed_at timestamp with time zone,
    streak_bonus_xp integer DEFAULT 0
);


ALTER TABLE public.training_task_streaks OWNER TO matthewmauer;

--
-- Name: TABLE training_task_streaks; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.training_task_streaks IS 'User task completion streaks for gamification';


--
-- Name: training_task_streaks_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.training_task_streaks_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.training_task_streaks_id_seq OWNER TO matthewmauer;

--
-- Name: training_task_streaks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.training_task_streaks_id_seq OWNED BY public.training_task_streaks.id;


--
-- Name: training_tasks_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.training_tasks_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.training_tasks_id_seq OWNER TO matthewmauer;

--
-- Name: training_tasks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.training_tasks_id_seq OWNED BY public.training_tasks.id;


--
-- Name: translation_cache; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.translation_cache (
    id integer NOT NULL,
    source_text text NOT NULL,
    source_lang character varying(10) NOT NULL,
    target_lang character varying(10) NOT NULL,
    translated_text text NOT NULL,
    confidence_score numeric(3,2),
    provider character varying(50) DEFAULT 'mymemory'::character varying,
    context character varying(100),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_used_at timestamp without time zone,
    use_count integer DEFAULT 0
);


ALTER TABLE public.translation_cache OWNER TO matthewmauer;

--
-- Name: TABLE translation_cache; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.translation_cache IS 'Cached translations for offline use, eliminating API rate limits';


--
-- Name: translation_cache_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.translation_cache_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.translation_cache_id_seq OWNER TO matthewmauer;

--
-- Name: translation_cache_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.translation_cache_id_seq OWNED BY public.translation_cache.id;


--
-- Name: translation_stats; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.translation_stats (
    id integer NOT NULL,
    date date DEFAULT CURRENT_DATE NOT NULL,
    language_pair character varying(25) NOT NULL,
    api_calls integer DEFAULT 0,
    cache_hits integer DEFAULT 0,
    total_chars_translated integer DEFAULT 0
);


ALTER TABLE public.translation_stats OWNER TO matthewmauer;

--
-- Name: TABLE translation_stats; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.translation_stats IS 'Daily statistics for translation usage and API call tracking';


--
-- Name: translation_stats_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.translation_stats_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.translation_stats_id_seq OWNER TO matthewmauer;

--
-- Name: translation_stats_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.translation_stats_id_seq OWNED BY public.translation_stats.id;


--
-- Name: trash_bin; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.trash_bin (
    id integer NOT NULL,
    user_id integer,
    item_type character varying(10) NOT NULL,
    item_id integer NOT NULL,
    original_path text NOT NULL,
    original_parent_id integer,
    deleted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    deleted_by integer,
    auto_delete_at timestamp without time zone DEFAULT (CURRENT_TIMESTAMP + '30 days'::interval)
);


ALTER TABLE public.trash_bin OWNER TO matthewmauer;

--
-- Name: TABLE trash_bin; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.trash_bin IS 'Deleted items with auto-cleanup after 30 days';


--
-- Name: trash_bin_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.trash_bin_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.trash_bin_id_seq OWNER TO matthewmauer;

--
-- Name: trash_bin_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.trash_bin_id_seq OWNED BY public.trash_bin.id;


--
-- Name: tree_node_completions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.tree_node_completions (
    id integer NOT NULL,
    user_id text,
    identity_id text,
    tree_id text NOT NULL,
    node_id text NOT NULL,
    metadata jsonb,
    completed_at timestamp without time zone DEFAULT now(),
    CONSTRAINT user_or_identity_required CHECK (((user_id IS NOT NULL) OR (identity_id IS NOT NULL)))
);


ALTER TABLE public.tree_node_completions OWNER TO matthewmauer;

--
-- Name: TABLE tree_node_completions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.tree_node_completions IS 'Completed tree nodes';


--
-- Name: tree_node_completions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.tree_node_completions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tree_node_completions_id_seq OWNER TO matthewmauer;

--
-- Name: tree_node_completions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.tree_node_completions_id_seq OWNED BY public.tree_node_completions.id;


--
-- Name: tree_node_visits; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.tree_node_visits (
    id integer NOT NULL,
    user_id text,
    identity_id text,
    tree_id text NOT NULL,
    node_id text NOT NULL,
    node_type text DEFAULT 'step'::text,
    metadata jsonb,
    "timestamp" timestamp without time zone DEFAULT now(),
    CONSTRAINT user_or_identity_required CHECK (((user_id IS NOT NULL) OR (identity_id IS NOT NULL)))
);


ALTER TABLE public.tree_node_visits OWNER TO matthewmauer;

--
-- Name: TABLE tree_node_visits; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.tree_node_visits IS 'User visits to tree nodes';


--
-- Name: tree_node_visits_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.tree_node_visits_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tree_node_visits_id_seq OWNER TO matthewmauer;

--
-- Name: tree_node_visits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.tree_node_visits_id_seq OWNED BY public.tree_node_visits.id;


--
-- Name: url_fetch_queue; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.url_fetch_queue (
    id integer NOT NULL,
    url text NOT NULL,
    url_hash character varying(64),
    priority integer DEFAULT 0,
    fetch_type character varying(50),
    status character varying(50) DEFAULT 'pending'::character varying,
    attempts integer DEFAULT 0,
    max_attempts integer DEFAULT 3,
    last_error text,
    queued_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    started_at timestamp without time zone,
    completed_at timestamp without time zone,
    related_package_id integer,
    requested_by character varying(255)
);


ALTER TABLE public.url_fetch_queue OWNER TO matthewmauer;

--
-- Name: TABLE url_fetch_queue; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.url_fetch_queue IS 'Queue for background URL fetching and analysis';


--
-- Name: url_fetch_queue_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.url_fetch_queue_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.url_fetch_queue_id_seq OWNER TO matthewmauer;

--
-- Name: url_fetch_queue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.url_fetch_queue_id_seq OWNED BY public.url_fetch_queue.id;


--
-- Name: url_index; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.url_index (
    id integer NOT NULL,
    url text NOT NULL,
    url_hash character varying(64) NOT NULL,
    url_type character varying(50),
    domain character varying(255),
    path text,
    content_type character varying(100),
    content_size bigint,
    content_hash character varying(64),
    last_status_code integer,
    last_fetch_success boolean,
    last_error text,
    fetch_count integer DEFAULT 0,
    first_fetched_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_fetched_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    comments text,
    tags text[],
    is_critical boolean DEFAULT false,
    is_external_dependency boolean DEFAULT true,
    related_package_id integer,
    cached_in_minio boolean DEFAULT false,
    minio_cache_path text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.url_index OWNER TO matthewmauer;

--
-- Name: TABLE url_index; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.url_index IS 'Index of all URLs fetched by the system with metadata and annotations';


--
-- Name: url_index_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.url_index_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.url_index_id_seq OWNER TO matthewmauer;

--
-- Name: url_index_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.url_index_id_seq OWNED BY public.url_index.id;


--
-- Name: user_achievements; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_achievements (
    user_achievement_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id character varying(255) NOT NULL,
    achievement_id uuid NOT NULL,
    earned_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.user_achievements OWNER TO matthewmauer;

--
-- Name: user_api_keys; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_api_keys (
    id integer NOT NULL,
    user_id character varying(255) NOT NULL,
    provider character varying(50) NOT NULL,
    key_name character varying(255) NOT NULL,
    encrypted_api_key character varying(255) DEFAULT 'encrypted_by_keyring'::character varying,
    key_prefix character varying(20),
    active boolean DEFAULT true,
    verified_at timestamp with time zone,
    verification_error text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.user_api_keys OWNER TO matthewmauer;

--
-- Name: TABLE user_api_keys; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_api_keys IS 'User personal API key metadata (actual keys stored in service_credentials)';


--
-- Name: user_api_keys_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_api_keys_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_api_keys_id_seq OWNER TO matthewmauer;

--
-- Name: user_api_keys_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_api_keys_id_seq OWNED BY public.user_api_keys.id;


--
-- Name: user_app_inventory; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.user_app_inventory AS
 SELECT uia.app_id,
    uia.user_id,
    uia.template_id,
    uia.subdomain,
    uia.folder_path,
    uia.installed_at,
    at.name,
    at.description,
    at.icon,
    at.category,
    la.folder_id,
    la."position",
    lf.name AS folder_name
   FROM (((public.user_installed_apps uia
     JOIN public.app_templates at ON ((at.template_id = uia.template_id)))
     LEFT JOIN public.launcher_apps la ON (((la.app_id = uia.app_id) AND (la.user_id = uia.user_id))))
     LEFT JOIN public.launcher_folders lf ON ((lf.folder_id = la.folder_id)))
  WHERE (uia.status = 'active'::text);


ALTER TABLE public.user_app_inventory OWNER TO matthewmauer;

--
-- Name: VIEW user_app_inventory; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.user_app_inventory IS 'Complete view of user apps with launcher organization';


--
-- Name: user_devices_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_devices_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_devices_id_seq OWNER TO matthewmauer;

--
-- Name: user_devices_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_devices_id_seq OWNED BY public.user_devices.id;


--
-- Name: user_followers; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_followers (
    id integer NOT NULL,
    follower_id text NOT NULL,
    followee_id text NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT user_followers_check CHECK ((follower_id <> followee_id))
);


ALTER TABLE public.user_followers OWNER TO matthewmauer;

--
-- Name: TABLE user_followers; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_followers IS 'Follow/following relationships';


--
-- Name: user_followers_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_followers_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_followers_id_seq OWNER TO matthewmauer;

--
-- Name: user_followers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_followers_id_seq OWNED BY public.user_followers.id;


--
-- Name: user_goals; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_goals (
    id integer NOT NULL,
    user_id text,
    identity_id text,
    goal text NOT NULL,
    confidence double precision DEFAULT 0.5,
    evidence integer DEFAULT 0,
    status text DEFAULT 'active'::text,
    inferred_at timestamp without time zone DEFAULT now(),
    completed_at timestamp without time zone,
    CONSTRAINT user_or_identity_required CHECK (((user_id IS NOT NULL) OR (identity_id IS NOT NULL)))
);


ALTER TABLE public.user_goals OWNER TO matthewmauer;

--
-- Name: TABLE user_goals; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_goals IS 'Inferred user goals from behavior';


--
-- Name: user_goals_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_goals_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_goals_id_seq OWNER TO matthewmauer;

--
-- Name: user_goals_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_goals_id_seq OWNED BY public.user_goals.id;


--
-- Name: user_interactions; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_interactions (
    id integer NOT NULL,
    user_id text,
    identity_id text,
    interaction_type text NOT NULL,
    content text,
    classification jsonb,
    metadata jsonb,
    "timestamp" timestamp without time zone DEFAULT now(),
    CONSTRAINT user_or_identity_required CHECK (((user_id IS NOT NULL) OR (identity_id IS NOT NULL)))
);


ALTER TABLE public.user_interactions OWNER TO matthewmauer;

--
-- Name: TABLE user_interactions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_interactions IS 'All user interactions for playstyle analysis';


--
-- Name: user_interactions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_interactions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_interactions_id_seq OWNER TO matthewmauer;

--
-- Name: user_interactions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_interactions_id_seq OWNED BY public.user_interactions.id;


--
-- Name: user_language_preferences; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_language_preferences (
    id integer NOT NULL,
    user_id integer,
    ip_address character varying(45),
    detected_language character varying(10),
    preferred_language character varying(10),
    country_code character varying(2),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_used_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.user_language_preferences OWNER TO matthewmauer;

--
-- Name: TABLE user_language_preferences; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_language_preferences IS 'User language preferences based on geolocation and browser settings';


--
-- Name: user_language_preferences_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_language_preferences_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_language_preferences_id_seq OWNER TO matthewmauer;

--
-- Name: user_language_preferences_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_language_preferences_id_seq OWNED BY public.user_language_preferences.id;


--
-- Name: user_model_preferences; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_model_preferences (
    id integer NOT NULL,
    user_id integer,
    model_id character varying(255) NOT NULL,
    is_favorite boolean DEFAULT false,
    is_hidden boolean DEFAULT false,
    custom_name character varying(255),
    usage_count integer DEFAULT 0,
    last_used_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.user_model_preferences OWNER TO matthewmauer;

--
-- Name: TABLE user_model_preferences; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_model_preferences IS 'Per-user model preferences and usage stats';


--
-- Name: user_model_preferences_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_model_preferences_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_model_preferences_id_seq OWNER TO matthewmauer;

--
-- Name: user_model_preferences_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_model_preferences_id_seq OWNED BY public.user_model_preferences.id;


--
-- Name: user_playstyles; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_playstyles (
    user_id text NOT NULL,
    identity_id text,
    question_style jsonb,
    learning_path jsonb,
    interaction_pattern jsonb,
    depth_preference double precision DEFAULT 0.5,
    tool_usage jsonb,
    goals jsonb,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.user_playstyles OWNER TO matthewmauer;

--
-- Name: TABLE user_playstyles; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_playstyles IS 'Computed user playstyle profiles';


--
-- Name: user_preferences; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_preferences (
    id integer NOT NULL,
    key character varying(255) NOT NULL,
    value jsonb NOT NULL,
    description text,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.user_preferences OWNER TO matthewmauer;

--
-- Name: user_preferences_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_preferences_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_preferences_id_seq OWNER TO matthewmauer;

--
-- Name: user_preferences_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_preferences_id_seq OWNED BY public.user_preferences.id;


--
-- Name: user_profiles_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.user_profiles_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_profiles_id_seq OWNER TO matthewmauer;

--
-- Name: user_profiles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.user_profiles_id_seq OWNED BY public.user_profiles.id;


--
-- Name: user_progress; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_progress (
    progress_id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id character varying(255) NOT NULL,
    path_id uuid NOT NULL,
    current_lesson_id uuid,
    completed_lessons uuid[],
    total_lessons_completed integer DEFAULT 0,
    completion_percentage numeric(5,2) DEFAULT 0.00,
    total_xp_earned integer DEFAULT 0,
    current_streak_days integer DEFAULT 0,
    longest_streak_days integer DEFAULT 0,
    last_activity_date date,
    status character varying(50) DEFAULT 'in_progress'::character varying,
    started_at timestamp without time zone DEFAULT now(),
    completed_at timestamp without time zone,
    last_accessed_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.user_progress OWNER TO matthewmauer;

--
-- Name: user_progress_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.user_progress_summary AS
SELECT
    NULL::integer AS id,
    NULL::character varying(255) AS session_id,
    NULL::character varying(100) AS preferred_name,
    NULL::integer AS current_level,
    NULL::integer AS completion_percentage,
    NULL::numeric(10,2) AS earned_amount,
    NULL::character varying(100) AS archetype_name,
    NULL::bigint AS total_responses,
    NULL::bigint AS brand_ideas_count,
    NULL::timestamp without time zone AS created_at,
    NULL::timestamp without time zone AS completed_at;


ALTER TABLE public.user_progress_summary OWNER TO matthewmauer;

--
-- Name: user_reputation; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_reputation (
    user_id text NOT NULL,
    karma integer DEFAULT 0,
    trust_score double precision DEFAULT 0.5,
    badge text DEFAULT 'newcomer'::text,
    reputation_breakdown jsonb DEFAULT '{}'::jsonb,
    achievements text[] DEFAULT ARRAY[]::text[],
    joined_at timestamp without time zone DEFAULT now(),
    last_activity timestamp without time zone DEFAULT now()
);


ALTER TABLE public.user_reputation OWNER TO matthewmauer;

--
-- Name: TABLE user_reputation; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_reputation IS 'User karma and trust scores with badge progression';


--
-- Name: user_tree_progress; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.user_tree_progress (
    user_id text NOT NULL,
    identity_id text,
    tree_id text NOT NULL,
    nodes_visited integer DEFAULT 0,
    nodes_completed integer DEFAULT 0,
    nodes_total integer DEFAULT 0,
    completion_rate double precision DEFAULT 0,
    last_node text,
    last_activity timestamp without time zone DEFAULT now(),
    CONSTRAINT user_or_identity_required CHECK (((user_id IS NOT NULL) OR (identity_id IS NOT NULL)))
);


ALTER TABLE public.user_tree_progress OWNER TO matthewmauer;

--
-- Name: TABLE user_tree_progress; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.user_tree_progress IS 'Aggregated tree progress per user';


--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO matthewmauer;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: v_active_decisions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_active_decisions AS
SELECT
    NULL::integer AS id,
    NULL::text AS title,
    NULL::text AS category,
    NULL::text AS status,
    NULL::text AS created_by,
    NULL::timestamp without time zone AS created_at,
    NULL::timestamp without time zone AS updated_at,
    NULL::bigint AS todo_count,
    NULL::bigint AS pending_todo_count,
    NULL::bigint AS completed_todo_count,
    NULL::bigint AS reference_count;


ALTER TABLE public.v_active_decisions OWNER TO matthewmauer;

--
-- Name: VIEW v_active_decisions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_active_decisions IS 'Active decisions with todo and reference counts';


--
-- Name: v_active_users_playstyles; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_active_users_playstyles AS
 SELECT u.user_id,
    u.identity_id,
    u.question_style,
    u.learning_path,
    u.depth_preference,
    u.tool_usage,
    count(i.id) AS interaction_count,
    max(i."timestamp") AS last_interaction
   FROM (public.user_playstyles u
     LEFT JOIN public.user_interactions i ON (((u.user_id = i.user_id) OR (u.identity_id = i.identity_id))))
  WHERE (i."timestamp" > (now() - '30 days'::interval))
  GROUP BY u.user_id, u.identity_id, u.question_style, u.learning_path, u.depth_preference, u.tool_usage;


ALTER TABLE public.v_active_users_playstyles OWNER TO matthewmauer;

--
-- Name: VIEW v_active_users_playstyles; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_active_users_playstyles IS 'Active users with their playstyles';


--
-- Name: v_activity_stats; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_activity_stats AS
 SELECT github_activity_feed.user_id,
    count(*) AS activity_count,
    sum(github_activity_feed.like_count) AS total_likes,
    sum(github_activity_feed.comment_count) AS total_comments,
    sum(github_activity_feed.repost_count) AS total_reposts,
    max(github_activity_feed.created_at) AS last_activity
   FROM public.github_activity_feed
  GROUP BY github_activity_feed.user_id;


ALTER TABLE public.v_activity_stats OWNER TO matthewmauer;

--
-- Name: VIEW v_activity_stats; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_activity_stats IS 'GitHub activity feed statistics';


--
-- Name: v_archived_decisions; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_archived_decisions AS
 SELECT d.id,
    d.title,
    d.category,
    d.created_by,
    d.created_at,
    a.archived_by,
    a.archive_reason,
    a.archive_category,
    a.archived_at,
    a.restored_by,
    a.restored_at,
        CASE
            WHEN (a.restored_at IS NULL) THEN true
            ELSE false
        END AS currently_archived
   FROM (public.decisions d
     JOIN public.decision_archives a ON ((d.id = a.decision_id)))
  ORDER BY a.archived_at DESC;


ALTER TABLE public.v_archived_decisions OWNER TO matthewmauer;

--
-- Name: VIEW v_archived_decisions; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_archived_decisions IS 'Archived decisions with archive details';


--
-- Name: v_communication_stats; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_communication_stats AS
 SELECT combined.user_id,
    combined.sent_count,
    combined.received_count,
    combined.unread_count,
    combined.thread_count
   FROM ( SELECT COALESCE(s.user_id, r.user_id) AS user_id,
            COALESCE(s.sent_count, (0)::bigint) AS sent_count,
            COALESCE(r.received_count, (0)::bigint) AS received_count,
            COALESCE(r.unread_count, (0)::bigint) AS unread_count,
            COALESCE(t.thread_count, (0)::bigint) AS thread_count
           FROM ((( SELECT profile_messages.from_user_id AS user_id,
                    count(*) AS sent_count
                   FROM public.profile_messages
                  GROUP BY profile_messages.from_user_id) s
             FULL JOIN ( SELECT profile_messages.to_user_id AS user_id,
                    count(*) AS received_count,
                    count(*) FILTER (WHERE (profile_messages.status = 'sent'::text)) AS unread_count
                   FROM public.profile_messages
                  GROUP BY profile_messages.to_user_id) r ON ((s.user_id = r.user_id)))
             FULL JOIN ( SELECT
                        CASE
                            WHEN (profile_messages.from_user_id < profile_messages.to_user_id) THEN profile_messages.from_user_id
                            ELSE profile_messages.to_user_id
                        END AS user_id,
                    count(DISTINCT profile_messages.thread_id) AS thread_count
                   FROM public.profile_messages
                  GROUP BY
                        CASE
                            WHEN (profile_messages.from_user_id < profile_messages.to_user_id) THEN profile_messages.from_user_id
                            ELSE profile_messages.to_user_id
                        END) t ON ((COALESCE(s.user_id, r.user_id) = t.user_id)))) combined;


ALTER TABLE public.v_communication_stats OWNER TO matthewmauer;

--
-- Name: VIEW v_communication_stats; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_communication_stats IS 'Communication statistics per user';


--
-- Name: v_decision_impact; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_decision_impact AS
SELECT
    NULL::integer AS id,
    NULL::text AS title,
    NULL::text AS category,
    NULL::text AS status,
    NULL::bigint AS total_todos,
    NULL::bigint AS pending_todos,
    NULL::bigint AS outgoing_refs,
    NULL::bigint AS incoming_refs,
    NULL::bigint AS impact_score;


ALTER TABLE public.v_decision_impact OWNER TO matthewmauer;

--
-- Name: VIEW v_decision_impact; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_decision_impact IS 'Decision impact analysis with impact scores';


--
-- Name: v_decision_timeline; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_decision_timeline AS
SELECT
    NULL::integer AS id,
    NULL::text AS title,
    NULL::text AS category,
    NULL::text AS status,
    NULL::text AS created_by,
    NULL::timestamp without time zone AS created_at,
    NULL::timestamp without time zone AS updated_at,
    NULL::timestamp without time zone AS deprecated_at,
    NULL::text AS timeline_status,
    NULL::json AS "references";


ALTER TABLE public.v_decision_timeline OWNER TO matthewmauer;

--
-- Name: VIEW v_decision_timeline; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_decision_timeline IS 'Timeline view of all decisions with references';


--
-- Name: v_marketplace_stats; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_marketplace_stats AS
 SELECT marketplace_ideas.category,
    count(*) AS idea_count,
    sum(marketplace_ideas.vote_count) AS total_votes,
    sum(marketplace_ideas.purchase_count) AS total_purchases,
    sum(marketplace_ideas.total_revenue) AS total_revenue,
    avg(marketplace_ideas.price) AS avg_price
   FROM public.marketplace_ideas
  WHERE (marketplace_ideas.status = 'active'::text)
  GROUP BY marketplace_ideas.category;


ALTER TABLE public.v_marketplace_stats OWNER TO matthewmauer;

--
-- Name: VIEW v_marketplace_stats; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_marketplace_stats IS 'Marketplace statistics by category';


--
-- Name: v_popular_goals; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_popular_goals AS
 SELECT user_goals.goal,
    count(DISTINCT user_goals.user_id) AS users_with_goal,
    avg(user_goals.confidence) AS avg_confidence,
    count(*) FILTER (WHERE (user_goals.status = 'completed'::text)) AS completed_count,
    count(*) FILTER (WHERE (user_goals.status = 'active'::text)) AS active_count,
    count(*) FILTER (WHERE (user_goals.status = 'abandoned'::text)) AS abandoned_count
   FROM public.user_goals
  GROUP BY user_goals.goal
  ORDER BY (count(DISTINCT user_goals.user_id)) DESC;


ALTER TABLE public.v_popular_goals OWNER TO matthewmauer;

--
-- Name: VIEW v_popular_goals; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_popular_goals IS 'Most common user goals';


--
-- Name: v_reputation_leaderboard; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_reputation_leaderboard AS
 SELECT user_reputation.user_id,
    user_reputation.karma,
    user_reputation.trust_score,
    user_reputation.badge,
    ( SELECT count(*) AS count
           FROM public.user_followers
          WHERE (user_followers.followee_id = user_reputation.user_id)) AS follower_count,
    user_reputation.joined_at,
    user_reputation.last_activity
   FROM public.user_reputation
  ORDER BY user_reputation.karma DESC, user_reputation.trust_score DESC;


ALTER TABLE public.v_reputation_leaderboard OWNER TO matthewmauer;

--
-- Name: VIEW v_reputation_leaderboard; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_reputation_leaderboard IS 'User reputation leaderboard';


--
-- Name: v_todo_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_todo_summary AS
SELECT
    NULL::integer AS decision_id,
    NULL::text AS decision_title,
    NULL::text AS category,
    NULL::bigint AS total_todos,
    NULL::bigint AS pending,
    NULL::bigint AS in_progress,
    NULL::bigint AS blocked,
    NULL::bigint AS completed,
    NULL::bigint AS critical_count,
    NULL::bigint AS high_count,
    NULL::bigint AS overdue_count;


ALTER TABLE public.v_todo_summary OWNER TO matthewmauer;

--
-- Name: VIEW v_todo_summary; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_todo_summary IS 'Todo summary by decision with status counts';


--
-- Name: v_tree_progress_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_tree_progress_summary AS
 SELECT user_tree_progress.tree_id,
    count(DISTINCT user_tree_progress.user_id) AS users_count,
    avg(user_tree_progress.completion_rate) AS avg_completion,
    max(user_tree_progress.completion_rate) AS max_completion,
    count(*) FILTER (WHERE (user_tree_progress.completion_rate >= (1.0)::double precision)) AS completed_count,
    count(*) FILTER (WHERE ((user_tree_progress.completion_rate > (0)::double precision) AND (user_tree_progress.completion_rate < (1.0)::double precision))) AS in_progress_count
   FROM public.user_tree_progress
  GROUP BY user_tree_progress.tree_id;


ALTER TABLE public.v_tree_progress_summary OWNER TO matthewmauer;

--
-- Name: VIEW v_tree_progress_summary; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_tree_progress_summary IS 'Summary of progress across all trees';


--
-- Name: v_trending_ideas; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_trending_ideas AS
 SELECT marketplace_ideas.id,
    marketplace_ideas.title,
    marketplace_ideas.category,
    marketplace_ideas.vote_count,
    marketplace_ideas.purchase_count,
    (marketplace_ideas.vote_count + (marketplace_ideas.purchase_count * 5)) AS trending_score,
    marketplace_ideas.created_at
   FROM public.marketplace_ideas
  WHERE ((marketplace_ideas.status = 'active'::text) AND (marketplace_ideas.created_at > (now() - '7 days'::interval)))
  ORDER BY (marketplace_ideas.vote_count + (marketplace_ideas.purchase_count * 5)) DESC;


ALTER TABLE public.v_trending_ideas OWNER TO matthewmauer;

--
-- Name: VIEW v_trending_ideas; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_trending_ideas IS 'Trending marketplace ideas';


--
-- Name: v_user_segments; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.v_user_segments AS
 SELECT user_playstyles.user_id,
    user_playstyles.identity_id,
        CASE
            WHEN ((((user_playstyles.question_style ->> 'technical'::text))::double precision > (0.7)::double precision) AND (user_playstyles.depth_preference > (0.7)::double precision)) THEN 'power_user'::text
            WHEN ((((user_playstyles.question_style ->> 'technical'::text))::double precision < (0.4)::double precision) AND (((user_playstyles.learning_path ->> 'tutorial'::text))::double precision > (0.5)::double precision)) THEN 'beginner'::text
            WHEN (((user_playstyles.question_style ->> 'directness'::text))::double precision > (0.6)::double precision) THEN 'builder'::text
            WHEN (((user_playstyles.question_style ->> 'directness'::text))::double precision < (0.4)::double precision) THEN 'explorer'::text
            ELSE 'general'::text
        END AS segment,
    user_playstyles.question_style,
    user_playstyles.learning_path,
    user_playstyles.depth_preference
   FROM public.user_playstyles;


ALTER TABLE public.v_user_segments OWNER TO matthewmauer;

--
-- Name: VIEW v_user_segments; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON VIEW public.v_user_segments IS 'User segments based on playstyle';


--
-- Name: variant_performance; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.variant_performance AS
 SELECT v.variant_id,
    v.campaign_id,
    v.variant_name,
    v.ai_provider,
    v.ai_model,
    v.traffic_weight,
    v.impressions,
    v.clicks,
    v.conversions,
    round((v.ctr * (100)::numeric), 2) AS ctr_percent,
    round((v.conversion_rate * (100)::numeric), 2) AS conversion_rate_percent,
    round((v.roi * (100)::numeric), 2) AS roi_percent,
    round(((v.revenue_cents)::numeric / (100)::numeric), 2) AS revenue_dollars,
    round(((v.cost_cents)::numeric / (100)::numeric), 2) AS cost_dollars,
    v.is_winner,
    v.is_active
   FROM public.campaign_variants v
  ORDER BY v.campaign_id, v.conversions DESC;


ALTER TABLE public.variant_performance OWNER TO matthewmauer;

--
-- Name: vendored_packages; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.vendored_packages (
    id integer NOT NULL,
    package_name character varying(255) NOT NULL,
    package_version character varying(100) NOT NULL,
    package_type character varying(50) DEFAULT 'npm'::character varying,
    registry_url text,
    minio_bucket character varying(255),
    minio_object_path text NOT NULL,
    object_size bigint,
    checksum_sha256 character varying(64),
    checksum_md5 character varying(32),
    description text,
    author character varying(255),
    license character varying(100),
    homepage text,
    repository_url text,
    dependencies jsonb,
    dev_dependencies jsonb,
    peer_dependencies jsonb,
    download_count bigint DEFAULT 0,
    dependent_count integer DEFAULT 0,
    risk_score integer DEFAULT 0,
    is_critical boolean DEFAULT false,
    is_tiny boolean DEFAULT false,
    vendor_status character varying(50) DEFAULT 'pending'::character varying,
    last_verified_at timestamp without time zone,
    vendor_reason text,
    mirrored_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    accessed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.vendored_packages OWNER TO matthewmauer;

--
-- Name: TABLE vendored_packages; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.vendored_packages IS 'Registry of packages mirrored to MinIO to prevent left-pad incidents';


--
-- Name: vendored_packages_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.vendored_packages_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.vendored_packages_id_seq OWNER TO matthewmauer;

--
-- Name: vendored_packages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.vendored_packages_id_seq OWNED BY public.vendored_packages.id;


--
-- Name: verified_send_as_aliases; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.verified_send_as_aliases AS
 SELECT gmail_send_as_aliases.id,
    gmail_send_as_aliases.user_id,
    gmail_send_as_aliases.send_as_email,
    gmail_send_as_aliases.display_name,
    gmail_send_as_aliases.reply_to_address,
    gmail_send_as_aliases.is_default,
    gmail_send_as_aliases.created_at
   FROM public.gmail_send_as_aliases
  WHERE ((gmail_send_as_aliases.verification_status)::text = 'accepted'::text);


ALTER TABLE public.verified_send_as_aliases OWNER TO matthewmauer;

--
-- Name: virtual_files; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.virtual_files (
    id integer NOT NULL,
    user_id integer,
    folder_id integer,
    name character varying(255) NOT NULL,
    path text NOT NULL,
    type character varying(50) NOT NULL,
    mime_type character varying(100),
    icon character varying(10) DEFAULT '📄'::character varying,
    size_bytes bigint DEFAULT 0,
    content_type character varying(20) DEFAULT 'reference'::character varying,
    content_reference text,
    content_inline text,
    metadata jsonb,
    is_desktop boolean DEFAULT false,
    position_x integer,
    position_y integer,
    is_executable boolean DEFAULT false,
    execute_url text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_accessed_at timestamp without time zone
);


ALTER TABLE public.virtual_files OWNER TO matthewmauer;

--
-- Name: TABLE virtual_files; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.virtual_files IS 'Virtual files with metadata and content references';


--
-- Name: virtual_files_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.virtual_files_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.virtual_files_id_seq OWNER TO matthewmauer;

--
-- Name: virtual_files_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.virtual_files_id_seq OWNED BY public.virtual_files.id;


--
-- Name: virtual_folders; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.virtual_folders (
    id integer NOT NULL,
    user_id integer,
    parent_id integer,
    name character varying(255) NOT NULL,
    path text NOT NULL,
    icon character varying(10) DEFAULT '📁'::character varying,
    color character varying(20),
    is_system boolean DEFAULT false,
    is_desktop boolean DEFAULT false,
    position_x integer,
    position_y integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.virtual_folders OWNER TO matthewmauer;

--
-- Name: TABLE virtual_folders; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.virtual_folders IS 'Virtual folder structure for CalOS desktop environment';


--
-- Name: virtual_folders_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.virtual_folders_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.virtual_folders_id_seq OWNER TO matthewmauer;

--
-- Name: virtual_folders_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.virtual_folders_id_seq OWNED BY public.virtual_folders.id;


--
-- Name: visit_sessions_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.visit_sessions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.visit_sessions_id_seq OWNER TO matthewmauer;

--
-- Name: visit_sessions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.visit_sessions_id_seq OWNED BY public.visit_sessions.id;


--
-- Name: visual_effects; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.visual_effects (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    display_name character varying(255),
    description text,
    effect_type character varying(50) NOT NULL,
    config jsonb NOT NULL,
    preview_url text,
    category character varying(100),
    tags text[],
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.visual_effects OWNER TO matthewmauer;

--
-- Name: TABLE visual_effects; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.visual_effects IS 'Pre-configured visual effects (particles, sprites, canvas)';


--
-- Name: visual_effects_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.visual_effects_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.visual_effects_id_seq OWNER TO matthewmauer;

--
-- Name: visual_effects_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.visual_effects_id_seq OWNED BY public.visual_effects.id;


--
-- Name: visual_themes; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.visual_themes (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    display_name character varying(255),
    description text,
    sprite_sheets integer[],
    icon_set_id integer,
    colors jsonb,
    fonts jsonb,
    effects jsonb,
    window_style jsonb,
    desktop_style jsonb,
    preview_url text,
    thumbnail_url text,
    is_system boolean DEFAULT false,
    is_public boolean DEFAULT true,
    created_by integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.visual_themes OWNER TO matthewmauer;

--
-- Name: TABLE visual_themes; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.visual_themes IS 'Visual theme configurations with assets and styles';


--
-- Name: visual_themes_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.visual_themes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.visual_themes_id_seq OWNER TO matthewmauer;

--
-- Name: visual_themes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.visual_themes_id_seq OWNED BY public.visual_themes.id;


--
-- Name: webhook_deliveries; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.webhook_deliveries (
    id integer NOT NULL,
    webhook_id integer NOT NULL,
    event_type character varying(100) NOT NULL,
    event_data jsonb NOT NULL,
    attempt integer DEFAULT 1 NOT NULL,
    status character varying(50) NOT NULL,
    http_status integer,
    response_body text,
    error_message text,
    latency_ms integer,
    attempted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    delivered_at timestamp without time zone,
    next_retry_at timestamp without time zone
);


ALTER TABLE public.webhook_deliveries OWNER TO matthewmauer;

--
-- Name: webhook_deliveries_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.webhook_deliveries_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.webhook_deliveries_id_seq OWNER TO matthewmauer;

--
-- Name: webhook_deliveries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.webhook_deliveries_id_seq OWNED BY public.webhook_deliveries.id;


--
-- Name: webhook_endpoints; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.webhook_endpoints (
    id integer NOT NULL,
    endpoint_name character varying(255) NOT NULL,
    endpoint_url text NOT NULL,
    source character varying(50) NOT NULL,
    secret_token text,
    allowed_ips text[],
    events text[],
    auto_index boolean DEFAULT true,
    auto_train boolean DEFAULT false,
    auto_publish boolean DEFAULT false,
    is_active boolean DEFAULT true,
    last_received timestamp without time zone,
    total_received integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.webhook_endpoints OWNER TO matthewmauer;

--
-- Name: webhook_endpoints_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.webhook_endpoints_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.webhook_endpoints_id_seq OWNER TO matthewmauer;

--
-- Name: webhook_endpoints_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.webhook_endpoints_id_seq OWNED BY public.webhook_endpoints.id;


--
-- Name: webhook_events; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.webhook_events (
    id integer NOT NULL,
    endpoint_id integer,
    event_type character varying(100) NOT NULL,
    payload jsonb NOT NULL,
    headers jsonb,
    status character varying(50) DEFAULT 'pending'::character varying,
    processed_at timestamp without time zone,
    error_message text,
    actions_performed text[],
    received_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.webhook_events OWNER TO matthewmauer;

--
-- Name: webhook_events_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.webhook_events_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.webhook_events_id_seq OWNER TO matthewmauer;

--
-- Name: webhook_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.webhook_events_id_seq OWNED BY public.webhook_events.id;


--
-- Name: webhooks; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.webhooks (
    id integer NOT NULL,
    developer_id integer NOT NULL,
    url text NOT NULL,
    events text[] NOT NULL,
    secret character varying(64) NOT NULL,
    retry_count integer DEFAULT 3,
    timeout_seconds integer DEFAULT 30,
    active boolean DEFAULT true,
    last_triggered_at timestamp without time zone,
    last_success_at timestamp without time zone,
    last_failure_at timestamp without time zone,
    failure_count integer DEFAULT 0,
    description text,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.webhooks OWNER TO matthewmauer;

--
-- Name: webhook_success_rate; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.webhook_success_rate AS
 SELECT w.id AS webhook_id,
    w.url,
    d.email AS developer_email,
    count(*) AS total_deliveries,
    count(*) FILTER (WHERE ((wd.status)::text = 'success'::text)) AS successful_deliveries,
    count(*) FILTER (WHERE ((wd.status)::text = 'failed'::text)) AS failed_deliveries,
    round(((100.0 * (count(*) FILTER (WHERE ((wd.status)::text = 'success'::text)))::numeric) / (NULLIF(count(*), 0))::numeric), 2) AS success_rate,
    avg(wd.latency_ms) AS avg_latency_ms
   FROM ((public.webhooks w
     JOIN public.developers d ON ((w.developer_id = d.id)))
     LEFT JOIN public.webhook_deliveries wd ON ((w.id = wd.webhook_id)))
  GROUP BY w.id, w.url, d.email;


ALTER TABLE public.webhook_success_rate OWNER TO matthewmauer;

--
-- Name: webhook_summary; Type: VIEW; Schema: public; Owner: matthewmauer
--

CREATE VIEW public.webhook_summary AS
 SELECT we.endpoint_name,
    we.source,
    we.is_active,
    we.last_received,
    count(wl.id) AS total_events,
    count(wl.id) FILTER (WHERE ((wl.status)::text = 'success'::text)) AS successful_events,
    count(wl.id) FILTER (WHERE ((wl.status)::text = 'failed'::text)) AS failed_events
   FROM (public.webhook_endpoints we
     LEFT JOIN public.webhook_events wl ON ((wl.endpoint_id = we.id)))
  WHERE (we.is_active = true)
  GROUP BY we.id, we.endpoint_name, we.source, we.is_active, we.last_received;


ALTER TABLE public.webhook_summary OWNER TO matthewmauer;

--
-- Name: webhooks_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.webhooks_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.webhooks_id_seq OWNER TO matthewmauer;

--
-- Name: webhooks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.webhooks_id_seq OWNED BY public.webhooks.id;


--
-- Name: wrapper_performance; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.wrapper_performance (
    id integer NOT NULL,
    wrapper_name text NOT NULL,
    domain text NOT NULL,
    user_profile text,
    date date DEFAULT CURRENT_DATE NOT NULL,
    total_requests integer DEFAULT 0,
    successful_requests integer DEFAULT 0,
    success_rate real GENERATED ALWAYS AS (
CASE
    WHEN (total_requests > 0) THEN ((successful_requests)::real / (total_requests)::real)
    ELSE (0)::real
END) STORED,
    avg_response_time_ms real,
    avg_cost_per_request real,
    avg_followup_rate real,
    avg_satisfaction_score real,
    completion_rate real,
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.wrapper_performance OWNER TO matthewmauer;

--
-- Name: TABLE wrapper_performance; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.wrapper_performance IS 'Performance metrics per wrapper, domain, and profile';


--
-- Name: wrapper_performance_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.wrapper_performance_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.wrapper_performance_id_seq OWNER TO matthewmauer;

--
-- Name: wrapper_performance_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.wrapper_performance_id_seq OWNED BY public.wrapper_performance.id;


--
-- Name: wrapper_usage_samples; Type: TABLE; Schema: public; Owner: matthewmauer
--

CREATE TABLE public.wrapper_usage_samples (
    id integer NOT NULL,
    wrapper_name text NOT NULL,
    domain text,
    user_profile text,
    user_id integer,
    prompt_text text,
    response_text text,
    response_length integer,
    response_time_ms integer,
    cost_usd real,
    status text,
    user_satisfaction_score real,
    had_followup boolean,
    "timestamp" timestamp with time zone DEFAULT now()
);


ALTER TABLE public.wrapper_usage_samples OWNER TO matthewmauer;

--
-- Name: TABLE wrapper_usage_samples; Type: COMMENT; Schema: public; Owner: matthewmauer
--

COMMENT ON TABLE public.wrapper_usage_samples IS 'Sampled wrapper usage for detailed analysis (5% sample rate)';


--
-- Name: wrapper_usage_samples_id_seq; Type: SEQUENCE; Schema: public; Owner: matthewmauer
--

CREATE SEQUENCE public.wrapper_usage_samples_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.wrapper_usage_samples_id_seq OWNER TO matthewmauer;

--
-- Name: wrapper_usage_samples_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: matthewmauer
--

ALTER SEQUENCE public.wrapper_usage_samples_id_seq OWNED BY public.wrapper_usage_samples.id;


--
-- Name: _migrations id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public._migrations ALTER COLUMN id SET DEFAULT nextval('public._migrations_id_seq'::regclass);


--
-- Name: activity_comments id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_comments ALTER COLUMN id SET DEFAULT nextval('public.activity_comments_id_seq'::regclass);


--
-- Name: activity_likes id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_likes ALTER COLUMN id SET DEFAULT nextval('public.activity_likes_id_seq'::regclass);


--
-- Name: activity_reposts id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_reposts ALTER COLUMN id SET DEFAULT nextval('public.activity_reposts_id_seq'::regclass);


--
-- Name: activitypub_activities activity_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_activities ALTER COLUMN activity_id SET DEFAULT nextval('public.activitypub_activities_activity_id_seq'::regclass);


--
-- Name: activitypub_followers follower_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_followers ALTER COLUMN follower_id SET DEFAULT nextval('public.activitypub_followers_follower_id_seq'::regclass);


--
-- Name: activitypub_keys key_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_keys ALTER COLUMN key_id SET DEFAULT nextval('public.activitypub_keys_key_id_seq'::regclass);


--
-- Name: activitypub_outbox outbox_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_outbox ALTER COLUMN outbox_id SET DEFAULT nextval('public.activitypub_outbox_outbox_id_seq'::regclass);


--
-- Name: agent_activity_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.agent_activity_log ALTER COLUMN id SET DEFAULT nextval('public.agent_activity_log_id_seq'::regclass);


--
-- Name: agent_metrics id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.agent_metrics ALTER COLUMN id SET DEFAULT nextval('public.agent_metrics_id_seq'::regclass);


--
-- Name: ai_embeddings id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_embeddings ALTER COLUMN id SET DEFAULT nextval('public.ai_embeddings_id_seq'::regclass);


--
-- Name: ai_price_correlations id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_price_correlations ALTER COLUMN id SET DEFAULT nextval('public.ai_price_correlations_id_seq'::regclass);


--
-- Name: ai_responses id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_responses ALTER COLUMN id SET DEFAULT nextval('public.ai_responses_id_seq'::regclass);


--
-- Name: analytics_attribution id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_attribution ALTER COLUMN id SET DEFAULT nextval('public.analytics_attribution_id_seq'::regclass);


--
-- Name: analytics_conversions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_conversions ALTER COLUMN id SET DEFAULT nextval('public.analytics_conversions_id_seq'::regclass);


--
-- Name: analytics_feature_usage id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_feature_usage ALTER COLUMN id SET DEFAULT nextval('public.analytics_feature_usage_id_seq'::regclass);


--
-- Name: analytics_page_views id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_page_views ALTER COLUMN id SET DEFAULT nextval('public.analytics_page_views_id_seq'::regclass);


--
-- Name: animation_sequences id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.animation_sequences ALTER COLUMN id SET DEFAULT nextval('public.animation_sequences_id_seq'::regclass);


--
-- Name: api_request_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_request_log ALTER COLUMN id SET DEFAULT nextval('public.api_request_log_id_seq'::regclass);


--
-- Name: api_usage id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_usage ALTER COLUMN id SET DEFAULT nextval('public.api_usage_id_seq'::regclass);


--
-- Name: arbitrage_opportunities id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.arbitrage_opportunities ALTER COLUMN id SET DEFAULT nextval('public.arbitrage_opportunities_id_seq'::regclass);


--
-- Name: archetypes id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.archetypes ALTER COLUMN id SET DEFAULT nextval('public.archetypes_id_seq'::regclass);


--
-- Name: artifact_collection_members id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_collection_members ALTER COLUMN id SET DEFAULT nextval('public.artifact_collection_members_id_seq'::regclass);


--
-- Name: artifact_dependencies id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_dependencies ALTER COLUMN id SET DEFAULT nextval('public.artifact_dependencies_id_seq'::regclass);


--
-- Name: artifact_usage_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_usage_log ALTER COLUMN id SET DEFAULT nextval('public.artifact_usage_log_id_seq'::regclass);


--
-- Name: arxiv_papers id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.arxiv_papers ALTER COLUMN id SET DEFAULT nextval('public.arxiv_papers_id_seq'::regclass);


--
-- Name: authorship_registry id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.authorship_registry ALTER COLUMN id SET DEFAULT nextval('public.authorship_registry_id_seq'::regclass);


--
-- Name: backtest_results id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.backtest_results ALTER COLUMN id SET DEFAULT nextval('public.backtest_results_id_seq'::regclass);


--
-- Name: benchmark_measurements id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.benchmark_measurements ALTER COLUMN id SET DEFAULT nextval('public.benchmark_measurements_id_seq'::regclass);


--
-- Name: block_time_profiles id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.block_time_profiles ALTER COLUMN id SET DEFAULT nextval('public.block_time_profiles_id_seq'::regclass);


--
-- Name: brand_bot_posts id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_bot_posts ALTER COLUMN id SET DEFAULT nextval('public.game_lore_bot_posts_id_seq'::regclass);


--
-- Name: brand_discussion_templates id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_discussion_templates ALTER COLUMN id SET DEFAULT nextval('public.game_lore_discussion_templates_id_seq'::regclass);


--
-- Name: brand_domains id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_domains ALTER COLUMN id SET DEFAULT nextval('public.game_lore_games_id_seq'::regclass);


--
-- Name: brand_ideas id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_ideas ALTER COLUMN id SET DEFAULT nextval('public.brand_ideas_id_seq'::regclass);


--
-- Name: brand_knowledge id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_knowledge ALTER COLUMN id SET DEFAULT nextval('public.game_lore_fragments_id_seq'::regclass);


--
-- Name: brand_milestones id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_milestones ALTER COLUMN id SET DEFAULT nextval('public.game_lore_events_id_seq'::regclass);


--
-- Name: brand_personas id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_personas ALTER COLUMN id SET DEFAULT nextval('public.game_lore_characters_id_seq'::regclass);


--
-- Name: brand_projects id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_projects ALTER COLUMN id SET DEFAULT nextval('public.game_lore_locations_id_seq'::regclass);


--
-- Name: bucket_comments comment_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_comments ALTER COLUMN comment_id SET DEFAULT nextval('public.bucket_comments_comment_id_seq'::regclass);


--
-- Name: bucket_database_stats id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_database_stats ALTER COLUMN id SET DEFAULT nextval('public.bucket_database_stats_id_seq'::regclass);


--
-- Name: bucket_reasoning_log reasoning_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_reasoning_log ALTER COLUMN reasoning_id SET DEFAULT nextval('public.bucket_reasoning_log_reasoning_id_seq'::regclass);


--
-- Name: bucket_todos todo_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_todos ALTER COLUMN todo_id SET DEFAULT nextval('public.bucket_todos_todo_id_seq'::regclass);


--
-- Name: bucket_versions version_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_versions ALTER COLUMN version_id SET DEFAULT nextval('public.bucket_versions_version_id_seq'::regclass);


--
-- Name: code_embeddings id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_embeddings ALTER COLUMN id SET DEFAULT nextval('public.code_embeddings_id_seq'::regclass);


--
-- Name: code_repositories id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_repositories ALTER COLUMN id SET DEFAULT nextval('public.code_repositories_id_seq'::regclass);


--
-- Name: code_room_messages id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_messages ALTER COLUMN id SET DEFAULT nextval('public.code_room_messages_id_seq'::regclass);


--
-- Name: code_room_repositories id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_repositories ALTER COLUMN id SET DEFAULT nextval('public.code_room_repositories_id_seq'::regclass);


--
-- Name: code_rooms id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_rooms ALTER COLUMN id SET DEFAULT nextval('public.code_rooms_id_seq'::regclass);


--
-- Name: code_snippets id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_snippets ALTER COLUMN id SET DEFAULT nextval('public.code_snippets_id_seq'::regclass);


--
-- Name: code_usage id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_usage ALTER COLUMN id SET DEFAULT nextval('public.code_usage_id_seq'::regclass);


--
-- Name: compaction_results id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.compaction_results ALTER COLUMN id SET DEFAULT nextval('public.compaction_results_id_seq'::regclass);


--
-- Name: component_relationships relationship_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.component_relationships ALTER COLUMN relationship_id SET DEFAULT nextval('public.component_relationships_relationship_id_seq'::regclass);


--
-- Name: component_usage_stats stat_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.component_usage_stats ALTER COLUMN stat_id SET DEFAULT nextval('public.component_usage_stats_stat_id_seq'::regclass);


--
-- Name: contact_exports id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.contact_exports ALTER COLUMN id SET DEFAULT nextval('public.contact_exports_id_seq'::regclass);


--
-- Name: content_generation_queue id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_generation_queue ALTER COLUMN id SET DEFAULT nextval('public.content_generation_queue_id_seq'::regclass);


--
-- Name: content_notifications id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_notifications ALTER COLUMN id SET DEFAULT nextval('public.content_notifications_id_seq'::regclass);


--
-- Name: content_subscribers id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_subscribers ALTER COLUMN id SET DEFAULT nextval('public.content_subscribers_id_seq'::regclass);


--
-- Name: context_drift_log drift_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.context_drift_log ALTER COLUMN drift_id SET DEFAULT nextval('public.context_drift_log_drift_id_seq'::regclass);


--
-- Name: conversations id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.conversations ALTER COLUMN id SET DEFAULT nextval('public.conversations_id_seq'::regclass);


--
-- Name: credential_usage_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.credential_usage_log ALTER COLUMN id SET DEFAULT nextval('public.credential_usage_log_id_seq'::regclass);


--
-- Name: curated_content id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curated_content ALTER COLUMN id SET DEFAULT nextval('public.curated_content_id_seq'::regclass);


--
-- Name: curation_configs id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curation_configs ALTER COLUMN id SET DEFAULT nextval('public.curation_configs_id_seq'::regclass);


--
-- Name: curation_reading_history id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curation_reading_history ALTER COLUMN id SET DEFAULT nextval('public.curation_reading_history_id_seq'::regclass);


--
-- Name: data_quality_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_quality_log ALTER COLUMN id SET DEFAULT nextval('public.data_quality_log_id_seq'::regclass);


--
-- Name: data_replicas id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_replicas ALTER COLUMN id SET DEFAULT nextval('public.data_replicas_id_seq'::regclass);


--
-- Name: data_source_stats id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_source_stats ALTER COLUMN id SET DEFAULT nextval('public.data_source_stats_id_seq'::regclass);


--
-- Name: decision_archives id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_archives ALTER COLUMN id SET DEFAULT nextval('public.decision_archives_id_seq'::regclass);


--
-- Name: decision_references id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_references ALTER COLUMN id SET DEFAULT nextval('public.decision_references_id_seq'::regclass);


--
-- Name: decision_todos id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_todos ALTER COLUMN id SET DEFAULT nextval('public.decision_todos_id_seq'::regclass);


--
-- Name: decision_versions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_versions ALTER COLUMN id SET DEFAULT nextval('public.decision_versions_id_seq'::regclass);


--
-- Name: decisions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decisions ALTER COLUMN id SET DEFAULT nextval('public.decisions_id_seq'::regclass);


--
-- Name: dependency_snapshots id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.dependency_snapshots ALTER COLUMN id SET DEFAULT nextval('public.dependency_snapshots_id_seq'::regclass);


--
-- Name: developer_subscriptions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.developer_subscriptions ALTER COLUMN id SET DEFAULT nextval('public.developer_subscriptions_id_seq'::regclass);


--
-- Name: developers id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.developers ALTER COLUMN id SET DEFAULT nextval('public.developers_id_seq'::regclass);


--
-- Name: discovered_models id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.discovered_models ALTER COLUMN id SET DEFAULT nextval('public.discovered_models_id_seq'::regclass);


--
-- Name: document_chunks id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.document_chunks ALTER COLUMN id SET DEFAULT nextval('public.document_chunks_id_seq'::regclass);


--
-- Name: domain_anti_patterns id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_anti_patterns ALTER COLUMN id SET DEFAULT nextval('public.domain_anti_patterns_id_seq'::regclass);


--
-- Name: domain_knowledge_graph id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_knowledge_graph ALTER COLUMN id SET DEFAULT nextval('public.domain_knowledge_graph_id_seq'::regclass);


--
-- Name: domain_model_parameters id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_model_parameters ALTER COLUMN id SET DEFAULT nextval('public.domain_model_parameters_id_seq'::regclass);


--
-- Name: domain_names id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_names ALTER COLUMN id SET DEFAULT nextval('public.domain_names_id_seq'::regclass);


--
-- Name: domain_pattern_usage id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_pattern_usage ALTER COLUMN id SET DEFAULT nextval('public.domain_pattern_usage_id_seq'::regclass);


--
-- Name: domain_style_guides id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_style_guides ALTER COLUMN id SET DEFAULT nextval('public.domain_style_guides_id_seq'::regclass);


--
-- Name: elo_blocked_voters id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_blocked_voters ALTER COLUMN id SET DEFAULT nextval('public.elo_blocked_voters_id_seq'::regclass);


--
-- Name: elo_items id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_items ALTER COLUMN id SET DEFAULT nextval('public.elo_items_id_seq'::regclass);


--
-- Name: elo_matches id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_matches ALTER COLUMN id SET DEFAULT nextval('public.elo_matches_id_seq'::regclass);


--
-- Name: elo_rating_history id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_rating_history ALTER COLUMN id SET DEFAULT nextval('public.elo_rating_history_id_seq'::regclass);


--
-- Name: elo_spam_patterns id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_spam_patterns ALTER COLUMN id SET DEFAULT nextval('public.elo_spam_patterns_id_seq'::regclass);


--
-- Name: elo_user_votes id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_user_votes ALTER COLUMN id SET DEFAULT nextval('public.elo_user_votes_id_seq'::regclass);


--
-- Name: email_relay_logs id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.email_relay_logs ALTER COLUMN id SET DEFAULT nextval('public.email_relay_logs_id_seq'::regclass);


--
-- Name: embed_analytics id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_analytics ALTER COLUMN id SET DEFAULT nextval('public.embed_analytics_id_seq'::regclass);


--
-- Name: embed_consents id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_consents ALTER COLUMN id SET DEFAULT nextval('public.embed_consents_id_seq'::regclass);


--
-- Name: embed_events id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_events ALTER COLUMN id SET DEFAULT nextval('public.embed_events_id_seq'::regclass);


--
-- Name: embed_sessions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sessions ALTER COLUMN id SET DEFAULT nextval('public.embed_sessions_id_seq'::regclass);


--
-- Name: embed_sites id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sites ALTER COLUMN id SET DEFAULT nextval('public.embed_sites_id_seq'::regclass);


--
-- Name: embed_widgets id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_widgets ALTER COLUMN id SET DEFAULT nextval('public.embed_widgets_id_seq'::regclass);


--
-- Name: error_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.error_log ALTER COLUMN id SET DEFAULT nextval('public.error_log_id_seq'::regclass);


--
-- Name: error_logs id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.error_logs ALTER COLUMN id SET DEFAULT nextval('public.error_logs_id_seq'::regclass);


--
-- Name: errors id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.errors ALTER COLUMN id SET DEFAULT nextval('public.errors_id_seq'::regclass);


--
-- Name: event_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.event_log ALTER COLUMN id SET DEFAULT nextval('public.event_log_id_seq'::regclass);


--
-- Name: experiment_assignments id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_assignments ALTER COLUMN id SET DEFAULT nextval('public.experiment_assignments_id_seq'::regclass);


--
-- Name: experiment_results id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_results ALTER COLUMN id SET DEFAULT nextval('public.experiment_results_id_seq'::regclass);


--
-- Name: experiment_statistics id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_statistics ALTER COLUMN id SET DEFAULT nextval('public.experiment_statistics_id_seq'::regclass);


--
-- Name: experiment_variants id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_variants ALTER COLUMN id SET DEFAULT nextval('public.experiment_variants_id_seq'::regclass);


--
-- Name: experiments id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiments ALTER COLUMN id SET DEFAULT nextval('public.experiments_id_seq'::regclass);


--
-- Name: file_permissions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.file_permissions ALTER COLUMN id SET DEFAULT nextval('public.file_permissions_id_seq'::regclass);


--
-- Name: fine_tune_datasets id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.fine_tune_datasets ALTER COLUMN id SET DEFAULT nextval('public.fine_tune_datasets_id_seq'::regclass);


--
-- Name: fine_tune_runs id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.fine_tune_runs ALTER COLUMN id SET DEFAULT nextval('public.fine_tune_runs_id_seq'::regclass);


--
-- Name: first_names id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.first_names ALTER COLUMN id SET DEFAULT nextval('public.first_names_id_seq'::regclass);


--
-- Name: forum_karma id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_karma ALTER COLUMN id SET DEFAULT nextval('public.forum_karma_id_seq'::regclass);


--
-- Name: forum_posts id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_posts ALTER COLUMN id SET DEFAULT nextval('public.forum_posts_id_seq'::regclass);


--
-- Name: forum_threads id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_threads ALTER COLUMN id SET DEFAULT nextval('public.forum_threads_id_seq'::regclass);


--
-- Name: forum_votes id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_votes ALTER COLUMN id SET DEFAULT nextval('public.forum_votes_id_seq'::regclass);


--
-- Name: funding_registry id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.funding_registry ALTER COLUMN id SET DEFAULT nextval('public.funding_registry_id_seq'::regclass);


--
-- Name: generated_documents id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.generated_documents ALTER COLUMN id SET DEFAULT nextval('public.generated_documents_id_seq'::regclass);


--
-- Name: git_portfolio_stats id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.git_portfolio_stats ALTER COLUMN id SET DEFAULT nextval('public.git_portfolio_stats_id_seq'::regclass);


--
-- Name: github_activity_feed id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.github_activity_feed ALTER COLUMN id SET DEFAULT nextval('public.github_activity_feed_id_seq'::regclass);


--
-- Name: gmail_send_as_aliases id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_send_as_aliases ALTER COLUMN id SET DEFAULT nextval('public.gmail_send_as_aliases_id_seq'::regclass);


--
-- Name: gmail_sent_emails id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_sent_emails ALTER COLUMN id SET DEFAULT nextval('public.gmail_sent_emails_id_seq'::regclass);


--
-- Name: gmail_webhook_configs id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_webhook_configs ALTER COLUMN id SET DEFAULT nextval('public.gmail_webhook_configs_id_seq'::regclass);


--
-- Name: grading_results id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.grading_results ALTER COLUMN id SET DEFAULT nextval('public.grading_results_id_seq'::regclass);


--
-- Name: guardian_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.guardian_log ALTER COLUMN id SET DEFAULT nextval('public.guardian_log_id_seq'::regclass);


--
-- Name: health_metrics id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.health_metrics ALTER COLUMN id SET DEFAULT nextval('public.health_metrics_id_seq'::regclass);


--
-- Name: heatmap_data id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.heatmap_data ALTER COLUMN id SET DEFAULT nextval('public.heatmap_data_id_seq'::regclass);


--
-- Name: icon_animations id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.icon_animations ALTER COLUMN id SET DEFAULT nextval('public.icon_animations_id_seq'::regclass);


--
-- Name: idea_purchases id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.idea_purchases ALTER COLUMN id SET DEFAULT nextval('public.idea_purchases_id_seq'::regclass);


--
-- Name: idea_votes id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.idea_votes ALTER COLUMN id SET DEFAULT nextval('public.idea_votes_id_seq'::regclass);


--
-- Name: iiif_cache_stats id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_cache_stats ALTER COLUMN id SET DEFAULT nextval('public.iiif_cache_stats_id_seq'::regclass);


--
-- Name: iiif_canvas_images id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_canvas_images ALTER COLUMN id SET DEFAULT nextval('public.iiif_canvas_images_id_seq'::regclass);


--
-- Name: iiif_images id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_images ALTER COLUMN id SET DEFAULT nextval('public.iiif_images_id_seq'::regclass);


--
-- Name: iiif_manifests id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_manifests ALTER COLUMN id SET DEFAULT nextval('public.iiif_manifests_id_seq'::regclass);


--
-- Name: incentive_tracker id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.incentive_tracker ALTER COLUMN id SET DEFAULT nextval('public.incentive_tracker_id_seq'::regclass);


--
-- Name: job_execution_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.job_execution_log ALTER COLUMN id SET DEFAULT nextval('public.job_execution_log_id_seq'::regclass);


--
-- Name: karma_transactions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.karma_transactions ALTER COLUMN id SET DEFAULT nextval('public.karma_transactions_id_seq'::regclass);


--
-- Name: knowledge_approvals id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.knowledge_approvals ALTER COLUMN id SET DEFAULT nextval('public.knowledge_approvals_id_seq'::regclass);


--
-- Name: knowledge_chats id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.knowledge_chats ALTER COLUMN id SET DEFAULT nextval('public.knowledge_chats_id_seq'::regclass);


--
-- Name: knowledge_patterns id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.knowledge_patterns ALTER COLUMN id SET DEFAULT nextval('public.knowledge_patterns_id_seq'::regclass);


--
-- Name: last_names id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.last_names ALTER COLUMN id SET DEFAULT nextval('public.last_names_id_seq'::regclass);


--
-- Name: marketplace_ideas id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.marketplace_ideas ALTER COLUMN id SET DEFAULT nextval('public.marketplace_ideas_id_seq'::regclass);


--
-- Name: message_agent_routing id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.message_agent_routing ALTER COLUMN id SET DEFAULT nextval('public.message_agent_routing_id_seq'::regclass);


--
-- Name: message_slack_routing id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.message_slack_routing ALTER COLUMN id SET DEFAULT nextval('public.message_slack_routing_id_seq'::regclass);


--
-- Name: migration_history migration_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.migration_history ALTER COLUMN migration_id SET DEFAULT nextval('public.migration_history_migration_id_seq'::regclass);


--
-- Name: model_benchmarks id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_benchmarks ALTER COLUMN id SET DEFAULT nextval('public.model_benchmarks_id_seq'::regclass);


--
-- Name: model_comparisons id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_comparisons ALTER COLUMN id SET DEFAULT nextval('public.model_comparisons_id_seq'::regclass);


--
-- Name: model_discovery_events id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_discovery_events ALTER COLUMN id SET DEFAULT nextval('public.model_discovery_events_id_seq'::regclass);


--
-- Name: model_performance id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_performance ALTER COLUMN id SET DEFAULT nextval('public.model_performance_id_seq'::regclass);


--
-- Name: model_pricing id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_pricing ALTER COLUMN id SET DEFAULT nextval('public.model_pricing_id_seq'::regclass);


--
-- Name: model_rankings id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_rankings ALTER COLUMN id SET DEFAULT nextval('public.model_rankings_id_seq'::regclass);


--
-- Name: model_recommendations id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_recommendations ALTER COLUMN id SET DEFAULT nextval('public.model_recommendations_id_seq'::regclass);


--
-- Name: model_storage id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_storage ALTER COLUMN id SET DEFAULT nextval('public.model_storage_id_seq'::regclass);


--
-- Name: model_usage_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_usage_log ALTER COLUMN id SET DEFAULT nextval('public.model_usage_log_id_seq'::regclass);


--
-- Name: model_use_cases id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_use_cases ALTER COLUMN id SET DEFAULT nextval('public.model_use_cases_id_seq'::regclass);


--
-- Name: model_version_deployments id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_version_deployments ALTER COLUMN id SET DEFAULT nextval('public.model_version_deployments_id_seq'::regclass);


--
-- Name: model_version_performance id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_version_performance ALTER COLUMN id SET DEFAULT nextval('public.model_version_performance_id_seq'::regclass);


--
-- Name: model_versions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_versions ALTER COLUMN id SET DEFAULT nextval('public.model_versions_id_seq'::regclass);


--
-- Name: model_wrappers id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_wrappers ALTER COLUMN id SET DEFAULT nextval('public.model_wrappers_id_seq'::regclass);


--
-- Name: newsletter_delivery_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.newsletter_delivery_log ALTER COLUMN id SET DEFAULT nextval('public.newsletter_delivery_log_id_seq'::regclass);


--
-- Name: note_access_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.note_access_log ALTER COLUMN id SET DEFAULT nextval('public.note_access_log_id_seq'::regclass);


--
-- Name: note_relationships id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.note_relationships ALTER COLUMN id SET DEFAULT nextval('public.note_relationships_id_seq'::regclass);


--
-- Name: notes id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.notes ALTER COLUMN id SET DEFAULT nextval('public.notes_id_seq'::regclass);


--
-- Name: ollama_training_jobs id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ollama_training_jobs ALTER COLUMN id SET DEFAULT nextval('public.ollama_training_jobs_id_seq'::regclass);


--
-- Name: package_dependencies id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_dependencies ALTER COLUMN id SET DEFAULT nextval('public.package_dependencies_id_seq'::regclass);


--
-- Name: package_intelligence id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_intelligence ALTER COLUMN id SET DEFAULT nextval('public.package_intelligence_id_seq'::regclass);


--
-- Name: package_usage_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_usage_log ALTER COLUMN id SET DEFAULT nextval('public.package_usage_log_id_seq'::regclass);


--
-- Name: paper_embeddings id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.paper_embeddings ALTER COLUMN id SET DEFAULT nextval('public.paper_embeddings_id_seq'::regclass);


--
-- Name: parameter_performance_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.parameter_performance_log ALTER COLUMN id SET DEFAULT nextval('public.parameter_performance_log_id_seq'::regclass);


--
-- Name: phone_patterns id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.phone_patterns ALTER COLUMN id SET DEFAULT nextval('public.phone_patterns_id_seq'::regclass);


--
-- Name: portfolio_analytics id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.portfolio_analytics ALTER COLUMN id SET DEFAULT nextval('public.portfolio_analytics_id_seq'::regclass);


--
-- Name: portfolio_timeline id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.portfolio_timeline ALTER COLUMN id SET DEFAULT nextval('public.portfolio_timeline_id_seq'::regclass);


--
-- Name: price_alerts id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_alerts ALTER COLUMN id SET DEFAULT nextval('public.price_alerts_id_seq'::regclass);


--
-- Name: price_audit_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_audit_log ALTER COLUMN id SET DEFAULT nextval('public.price_audit_log_id_seq'::regclass);


--
-- Name: price_cache id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_cache ALTER COLUMN id SET DEFAULT nextval('public.price_cache_id_seq'::regclass);


--
-- Name: price_candles id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_candles ALTER COLUMN id SET DEFAULT nextval('public.price_candles_id_seq'::regclass);


--
-- Name: price_correlations id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_correlations ALTER COLUMN id SET DEFAULT nextval('public.price_correlations_id_seq'::regclass);


--
-- Name: price_events id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_events ALTER COLUMN id SET DEFAULT nextval('public.price_events_id_seq'::regclass);


--
-- Name: price_history id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_history ALTER COLUMN id SET DEFAULT nextval('public.price_history_id_seq'::regclass);


--
-- Name: price_indicators id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_indicators ALTER COLUMN id SET DEFAULT nextval('public.price_indicators_id_seq'::regclass);


--
-- Name: price_sources id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_sources ALTER COLUMN id SET DEFAULT nextval('public.price_sources_id_seq'::regclass);


--
-- Name: price_watchlist id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_watchlist ALTER COLUMN id SET DEFAULT nextval('public.price_watchlist_id_seq'::regclass);


--
-- Name: profile_matches id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.profile_matches ALTER COLUMN id SET DEFAULT nextval('public.profile_matches_id_seq'::regclass);


--
-- Name: profile_messages id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.profile_messages ALTER COLUMN id SET DEFAULT nextval('public.profile_messages_id_seq'::regclass);


--
-- Name: published_content id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.published_content ALTER COLUMN id SET DEFAULT nextval('public.published_content_id_seq'::regclass);


--
-- Name: recent_files id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.recent_files ALTER COLUMN id SET DEFAULT nextval('public.recent_files_id_seq'::regclass);


--
-- Name: request_lifecycle id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.request_lifecycle ALTER COLUMN id SET DEFAULT nextval('public.request_lifecycle_id_seq'::regclass);


--
-- Name: request_state_transitions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.request_state_transitions ALTER COLUMN id SET DEFAULT nextval('public.request_state_transitions_id_seq'::regclass);


--
-- Name: room_state id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.room_state ALTER COLUMN id SET DEFAULT nextval('public.room_state_id_seq'::regclass);


--
-- Name: scheduled_jobs id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.scheduled_jobs ALTER COLUMN id SET DEFAULT nextval('public.scheduled_jobs_id_seq'::regclass);


--
-- Name: scheduler_log id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.scheduler_log ALTER COLUMN id SET DEFAULT nextval('public.scheduler_log_id_seq'::regclass);


--
-- Name: schema_migrations id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.schema_migrations ALTER COLUMN id SET DEFAULT nextval('public.schema_migrations_id_seq'::regclass);


--
-- Name: sdk_tokens id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sdk_tokens ALTER COLUMN id SET DEFAULT nextval('public.sdk_tokens_id_seq'::regclass);


--
-- Name: service_credentials id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.service_credentials ALTER COLUMN id SET DEFAULT nextval('public.service_credentials_id_seq'::regclass);


--
-- Name: shard_registry id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.shard_registry ALTER COLUMN id SET DEFAULT nextval('public.shard_registry_id_seq'::regclass);


--
-- Name: snapshot_deployments deployment_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_deployments ALTER COLUMN deployment_id SET DEFAULT nextval('public.snapshot_deployments_deployment_id_seq'::regclass);


--
-- Name: snapshot_diffs diff_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_diffs ALTER COLUMN diff_id SET DEFAULT nextval('public.snapshot_diffs_diff_id_seq'::regclass);


--
-- Name: snapshot_validations validation_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_validations ALTER COLUMN validation_id SET DEFAULT nextval('public.snapshot_validations_validation_id_seq'::regclass);


--
-- Name: song_requests id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.song_requests ALTER COLUMN id SET DEFAULT nextval('public.song_requests_id_seq'::regclass);


--
-- Name: sprite_atlas id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sprite_atlas ALTER COLUMN id SET DEFAULT nextval('public.sprite_atlas_id_seq'::regclass);


--
-- Name: sprite_sheets id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sprite_sheets ALTER COLUMN id SET DEFAULT nextval('public.sprite_sheets_id_seq'::regclass);


--
-- Name: stream_chat id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_chat ALTER COLUMN id SET DEFAULT nextval('public.stream_chat_id_seq'::regclass);


--
-- Name: stream_sessions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_sessions ALTER COLUMN id SET DEFAULT nextval('public.stream_sessions_id_seq'::regclass);


--
-- Name: stream_viewers id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_viewers ALTER COLUMN id SET DEFAULT nextval('public.stream_viewers_id_seq'::regclass);


--
-- Name: submissions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.submissions ALTER COLUMN id SET DEFAULT nextval('public.submissions_id_seq'::regclass);


--
-- Name: survey_questions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.survey_questions ALTER COLUMN id SET DEFAULT nextval('public.survey_questions_id_seq'::regclass);


--
-- Name: survey_responses id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.survey_responses ALTER COLUMN id SET DEFAULT nextval('public.survey_responses_id_seq'::regclass);


--
-- Name: swipe_history id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.swipe_history ALTER COLUMN id SET DEFAULT nextval('public.swipe_history_id_seq'::regclass);


--
-- Name: telemetry_aggregates aggregate_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_aggregates ALTER COLUMN aggregate_id SET DEFAULT nextval('public.telemetry_aggregates_aggregate_id_seq'::regclass);


--
-- Name: telemetry_errors error_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_errors ALTER COLUMN error_id SET DEFAULT nextval('public.telemetry_errors_error_id_seq'::regclass);


--
-- Name: telemetry_events event_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_events ALTER COLUMN event_id SET DEFAULT nextval('public.telemetry_events_event_id_seq'::regclass);


--
-- Name: telemetry_features feature_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_features ALTER COLUMN feature_id SET DEFAULT nextval('public.telemetry_features_feature_id_seq'::regclass);


--
-- Name: telemetry_performance performance_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_performance ALTER COLUMN performance_id SET DEFAULT nextval('public.telemetry_performance_performance_id_seq'::regclass);


--
-- Name: telemetry_sessions session_id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_sessions ALTER COLUMN session_id SET DEFAULT nextval('public.telemetry_sessions_session_id_seq'::regclass);


--
-- Name: tenant_api_keys id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.tenant_api_keys ALTER COLUMN id SET DEFAULT nextval('public.tenant_api_keys_id_seq'::regclass);


--
-- Name: todo_archives id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_archives ALTER COLUMN id SET DEFAULT nextval('public.todo_archives_id_seq'::regclass);


--
-- Name: todo_dependencies id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_dependencies ALTER COLUMN id SET DEFAULT nextval('public.todo_dependencies_id_seq'::regclass);


--
-- Name: training_task_assignments id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_assignments ALTER COLUMN id SET DEFAULT nextval('public.training_task_assignments_id_seq'::regclass);


--
-- Name: training_task_leaderboard id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_leaderboard ALTER COLUMN id SET DEFAULT nextval('public.training_task_leaderboard_id_seq'::regclass);


--
-- Name: training_task_streaks id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_streaks ALTER COLUMN id SET DEFAULT nextval('public.training_task_streaks_id_seq'::regclass);


--
-- Name: training_tasks id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_tasks ALTER COLUMN id SET DEFAULT nextval('public.training_tasks_id_seq'::regclass);


--
-- Name: translation_cache id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.translation_cache ALTER COLUMN id SET DEFAULT nextval('public.translation_cache_id_seq'::regclass);


--
-- Name: translation_stats id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.translation_stats ALTER COLUMN id SET DEFAULT nextval('public.translation_stats_id_seq'::regclass);


--
-- Name: trash_bin id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.trash_bin ALTER COLUMN id SET DEFAULT nextval('public.trash_bin_id_seq'::regclass);


--
-- Name: tree_node_completions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.tree_node_completions ALTER COLUMN id SET DEFAULT nextval('public.tree_node_completions_id_seq'::regclass);


--
-- Name: tree_node_visits id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.tree_node_visits ALTER COLUMN id SET DEFAULT nextval('public.tree_node_visits_id_seq'::regclass);


--
-- Name: url_fetch_queue id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.url_fetch_queue ALTER COLUMN id SET DEFAULT nextval('public.url_fetch_queue_id_seq'::regclass);


--
-- Name: url_index id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.url_index ALTER COLUMN id SET DEFAULT nextval('public.url_index_id_seq'::regclass);


--
-- Name: user_api_keys id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_api_keys ALTER COLUMN id SET DEFAULT nextval('public.user_api_keys_id_seq'::regclass);


--
-- Name: user_devices id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_devices ALTER COLUMN id SET DEFAULT nextval('public.user_devices_id_seq'::regclass);


--
-- Name: user_followers id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_followers ALTER COLUMN id SET DEFAULT nextval('public.user_followers_id_seq'::regclass);


--
-- Name: user_goals id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_goals ALTER COLUMN id SET DEFAULT nextval('public.user_goals_id_seq'::regclass);


--
-- Name: user_interactions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_interactions ALTER COLUMN id SET DEFAULT nextval('public.user_interactions_id_seq'::regclass);


--
-- Name: user_language_preferences id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_language_preferences ALTER COLUMN id SET DEFAULT nextval('public.user_language_preferences_id_seq'::regclass);


--
-- Name: user_model_preferences id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_model_preferences ALTER COLUMN id SET DEFAULT nextval('public.user_model_preferences_id_seq'::regclass);


--
-- Name: user_preferences id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_preferences ALTER COLUMN id SET DEFAULT nextval('public.user_preferences_id_seq'::regclass);


--
-- Name: user_profiles id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_profiles ALTER COLUMN id SET DEFAULT nextval('public.user_profiles_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Name: vendored_packages id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.vendored_packages ALTER COLUMN id SET DEFAULT nextval('public.vendored_packages_id_seq'::regclass);


--
-- Name: virtual_files id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_files ALTER COLUMN id SET DEFAULT nextval('public.virtual_files_id_seq'::regclass);


--
-- Name: virtual_folders id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_folders ALTER COLUMN id SET DEFAULT nextval('public.virtual_folders_id_seq'::regclass);


--
-- Name: visit_sessions id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visit_sessions ALTER COLUMN id SET DEFAULT nextval('public.visit_sessions_id_seq'::regclass);


--
-- Name: visual_effects id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visual_effects ALTER COLUMN id SET DEFAULT nextval('public.visual_effects_id_seq'::regclass);


--
-- Name: visual_themes id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visual_themes ALTER COLUMN id SET DEFAULT nextval('public.visual_themes_id_seq'::regclass);


--
-- Name: webhook_deliveries id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_deliveries ALTER COLUMN id SET DEFAULT nextval('public.webhook_deliveries_id_seq'::regclass);


--
-- Name: webhook_endpoints id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_endpoints ALTER COLUMN id SET DEFAULT nextval('public.webhook_endpoints_id_seq'::regclass);


--
-- Name: webhook_events id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_events ALTER COLUMN id SET DEFAULT nextval('public.webhook_events_id_seq'::regclass);


--
-- Name: webhooks id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhooks ALTER COLUMN id SET DEFAULT nextval('public.webhooks_id_seq'::regclass);


--
-- Name: wrapper_performance id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.wrapper_performance ALTER COLUMN id SET DEFAULT nextval('public.wrapper_performance_id_seq'::regclass);


--
-- Name: wrapper_usage_samples id; Type: DEFAULT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.wrapper_usage_samples ALTER COLUMN id SET DEFAULT nextval('public.wrapper_usage_samples_id_seq'::regclass);


--
-- Name: _migrations _migrations_migration_file_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public._migrations
    ADD CONSTRAINT _migrations_migration_file_key UNIQUE (migration_file);


--
-- Name: _migrations _migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public._migrations
    ADD CONSTRAINT _migrations_pkey PRIMARY KEY (id);


--
-- Name: achievements achievements_achievement_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.achievements
    ADD CONSTRAINT achievements_achievement_slug_key UNIQUE (achievement_slug);


--
-- Name: achievements achievements_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.achievements
    ADD CONSTRAINT achievements_pkey PRIMARY KEY (achievement_id);


--
-- Name: activity_comments activity_comments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_comments
    ADD CONSTRAINT activity_comments_pkey PRIMARY KEY (id);


--
-- Name: activity_likes activity_likes_activity_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_likes
    ADD CONSTRAINT activity_likes_activity_id_user_id_key UNIQUE (activity_id, user_id);


--
-- Name: activity_likes activity_likes_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_likes
    ADD CONSTRAINT activity_likes_pkey PRIMARY KEY (id);


--
-- Name: activity_reposts activity_reposts_activity_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_reposts
    ADD CONSTRAINT activity_reposts_activity_id_user_id_key UNIQUE (activity_id, user_id);


--
-- Name: activity_reposts activity_reposts_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_reposts
    ADD CONSTRAINT activity_reposts_pkey PRIMARY KEY (id);


--
-- Name: activitypub_activities activitypub_activities_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_activities
    ADD CONSTRAINT activitypub_activities_pkey PRIMARY KEY (activity_id);


--
-- Name: activitypub_followers activitypub_followers_actor_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_followers
    ADD CONSTRAINT activitypub_followers_actor_id_key UNIQUE (actor_id);


--
-- Name: activitypub_followers activitypub_followers_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_followers
    ADD CONSTRAINT activitypub_followers_pkey PRIMARY KEY (follower_id);


--
-- Name: activitypub_keys activitypub_keys_actor_username_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_keys
    ADD CONSTRAINT activitypub_keys_actor_username_key UNIQUE (actor_username);


--
-- Name: activitypub_keys activitypub_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_keys
    ADD CONSTRAINT activitypub_keys_pkey PRIMARY KEY (key_id);


--
-- Name: activitypub_outbox activitypub_outbox_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activitypub_outbox
    ADD CONSTRAINT activitypub_outbox_pkey PRIMARY KEY (outbox_id);


--
-- Name: ad_campaigns ad_campaigns_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ad_campaigns
    ADD CONSTRAINT ad_campaigns_pkey PRIMARY KEY (campaign_id);


--
-- Name: agent_activity_log agent_activity_log_activity_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.agent_activity_log
    ADD CONSTRAINT agent_activity_log_activity_id_key UNIQUE (activity_id);


--
-- Name: agent_activity_log agent_activity_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.agent_activity_log
    ADD CONSTRAINT agent_activity_log_pkey PRIMARY KEY (id);


--
-- Name: agent_metrics agent_metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.agent_metrics
    ADD CONSTRAINT agent_metrics_pkey PRIMARY KEY (id);


--
-- Name: ai_embeddings ai_embeddings_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_embeddings
    ADD CONSTRAINT ai_embeddings_pkey PRIMARY KEY (id);


--
-- Name: ai_embeddings ai_embeddings_response_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_embeddings
    ADD CONSTRAINT ai_embeddings_response_id_key UNIQUE (response_id);


--
-- Name: ai_price_correlations ai_price_correlations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_price_correlations
    ADD CONSTRAINT ai_price_correlations_pkey PRIMARY KEY (id);


--
-- Name: ai_responses ai_responses_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_responses
    ADD CONSTRAINT ai_responses_pkey PRIMARY KEY (id);


--
-- Name: ai_responses ai_responses_provider_model_query_hash_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_responses
    ADD CONSTRAINT ai_responses_provider_model_query_hash_key UNIQUE (provider, model, query_hash);


--
-- Name: analytics_attribution analytics_attribution_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_attribution
    ADD CONSTRAINT analytics_attribution_pkey PRIMARY KEY (id);


--
-- Name: analytics_conversions analytics_conversions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_conversions
    ADD CONSTRAINT analytics_conversions_pkey PRIMARY KEY (id);


--
-- Name: analytics_feature_usage analytics_feature_usage_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_feature_usage
    ADD CONSTRAINT analytics_feature_usage_pkey PRIMARY KEY (id);


--
-- Name: analytics_page_views analytics_page_views_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_page_views
    ADD CONSTRAINT analytics_page_views_pkey PRIMARY KEY (id);


--
-- Name: animation_sequences animation_sequences_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.animation_sequences
    ADD CONSTRAINT animation_sequences_name_key UNIQUE (name);


--
-- Name: animation_sequences animation_sequences_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.animation_sequences
    ADD CONSTRAINT animation_sequences_pkey PRIMARY KEY (id);


--
-- Name: api_keys api_keys_api_key_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_keys
    ADD CONSTRAINT api_keys_api_key_key UNIQUE (api_key);


--
-- Name: api_keys api_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_keys
    ADD CONSTRAINT api_keys_pkey PRIMARY KEY (key_id);


--
-- Name: api_request_log api_request_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_request_log
    ADD CONSTRAINT api_request_log_pkey PRIMARY KEY (id);


--
-- Name: api_usage api_usage_developer_id_endpoint_hour_bucket_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_usage
    ADD CONSTRAINT api_usage_developer_id_endpoint_hour_bucket_key UNIQUE (developer_id, endpoint, hour_bucket);


--
-- Name: api_usage api_usage_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_usage
    ADD CONSTRAINT api_usage_pkey PRIMARY KEY (id);


--
-- Name: app_instances app_instances_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.app_instances
    ADD CONSTRAINT app_instances_pkey PRIMARY KEY (tenant_id);


--
-- Name: app_launch_log app_launch_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.app_launch_log
    ADD CONSTRAINT app_launch_log_pkey PRIMARY KEY (user_id, app_id);


--
-- Name: app_ratings app_ratings_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.app_ratings
    ADD CONSTRAINT app_ratings_pkey PRIMARY KEY (rating_id);


--
-- Name: app_ratings app_ratings_template_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.app_ratings
    ADD CONSTRAINT app_ratings_template_id_user_id_key UNIQUE (template_id, user_id);


--
-- Name: app_templates app_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.app_templates
    ADD CONSTRAINT app_templates_pkey PRIMARY KEY (template_id);


--
-- Name: arbitrage_opportunities arbitrage_opportunities_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.arbitrage_opportunities
    ADD CONSTRAINT arbitrage_opportunities_pkey PRIMARY KEY (id);


--
-- Name: archetypes archetypes_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.archetypes
    ADD CONSTRAINT archetypes_name_key UNIQUE (name);


--
-- Name: archetypes archetypes_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.archetypes
    ADD CONSTRAINT archetypes_pkey PRIMARY KEY (id);


--
-- Name: archetypes archetypes_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.archetypes
    ADD CONSTRAINT archetypes_slug_key UNIQUE (slug);


--
-- Name: artifact_collection_members artifact_collection_members_collection_id_artifact_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_collection_members
    ADD CONSTRAINT artifact_collection_members_collection_id_artifact_id_key UNIQUE (collection_id, artifact_id);


--
-- Name: artifact_collection_members artifact_collection_members_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_collection_members
    ADD CONSTRAINT artifact_collection_members_pkey PRIMARY KEY (id);


--
-- Name: artifact_collections artifact_collections_collection_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_collections
    ADD CONSTRAINT artifact_collections_collection_slug_key UNIQUE (collection_slug);


--
-- Name: artifact_collections artifact_collections_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_collections
    ADD CONSTRAINT artifact_collections_pkey PRIMARY KEY (collection_id);


--
-- Name: artifact_dependencies artifact_dependencies_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_dependencies
    ADD CONSTRAINT artifact_dependencies_pkey PRIMARY KEY (id);


--
-- Name: artifact_usage_log artifact_usage_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_usage_log
    ADD CONSTRAINT artifact_usage_log_pkey PRIMARY KEY (id);


--
-- Name: arxiv_papers arxiv_papers_arxiv_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.arxiv_papers
    ADD CONSTRAINT arxiv_papers_arxiv_id_key UNIQUE (arxiv_id);


--
-- Name: arxiv_papers arxiv_papers_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.arxiv_papers
    ADD CONSTRAINT arxiv_papers_pkey PRIMARY KEY (id);


--
-- Name: authorship_registry authorship_registry_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.authorship_registry
    ADD CONSTRAINT authorship_registry_pkey PRIMARY KEY (id);


--
-- Name: automated_flows automated_flows_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.automated_flows
    ADD CONSTRAINT automated_flows_pkey PRIMARY KEY (id);


--
-- Name: autonomous_code_matches autonomous_code_matches_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.autonomous_code_matches
    ADD CONSTRAINT autonomous_code_matches_pkey PRIMARY KEY (match_id);


--
-- Name: autonomous_improvements autonomous_improvements_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.autonomous_improvements
    ADD CONSTRAINT autonomous_improvements_pkey PRIMARY KEY (improvement_id);


--
-- Name: autonomous_patterns autonomous_patterns_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.autonomous_patterns
    ADD CONSTRAINT autonomous_patterns_pkey PRIMARY KEY (pattern_id);


--
-- Name: autonomous_sessions autonomous_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.autonomous_sessions
    ADD CONSTRAINT autonomous_sessions_pkey PRIMARY KEY (session_id);


--
-- Name: backtest_results backtest_results_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.backtest_results
    ADD CONSTRAINT backtest_results_pkey PRIMARY KEY (id);


--
-- Name: benchmark_measurements benchmark_measurements_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.benchmark_measurements
    ADD CONSTRAINT benchmark_measurements_pkey PRIMARY KEY (id);


--
-- Name: biometric_challenges biometric_challenges_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.biometric_challenges
    ADD CONSTRAINT biometric_challenges_pkey PRIMARY KEY (challenge_id);


--
-- Name: biometric_credentials biometric_credentials_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.biometric_credentials
    ADD CONSTRAINT biometric_credentials_pkey PRIMARY KEY (credential_id);


--
-- Name: block_time_profiles block_time_profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.block_time_profiles
    ADD CONSTRAINT block_time_profiles_pkey PRIMARY KEY (id);


--
-- Name: block_time_profiles block_time_profiles_profile_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.block_time_profiles
    ADD CONSTRAINT block_time_profiles_profile_name_key UNIQUE (profile_name);


--
-- Name: block_time_profiles block_time_profiles_profile_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.block_time_profiles
    ADD CONSTRAINT block_time_profiles_profile_slug_key UNIQUE (profile_slug);


--
-- Name: blocked_handles blocked_handles_handle_pattern_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.blocked_handles
    ADD CONSTRAINT blocked_handles_handle_pattern_key UNIQUE (handle_pattern);


--
-- Name: blocked_handles blocked_handles_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.blocked_handles
    ADD CONSTRAINT blocked_handles_pkey PRIMARY KEY (block_id);


--
-- Name: brand_ideas brand_ideas_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_ideas
    ADD CONSTRAINT brand_ideas_pkey PRIMARY KEY (id);


--
-- Name: bucket_artifacts bucket_artifacts_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_artifacts
    ADD CONSTRAINT bucket_artifacts_pkey PRIMARY KEY (artifact_id);


--
-- Name: bucket_comments bucket_comments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_comments
    ADD CONSTRAINT bucket_comments_pkey PRIMARY KEY (comment_id);


--
-- Name: bucket_database_stats bucket_database_stats_bucket_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_database_stats
    ADD CONSTRAINT bucket_database_stats_bucket_id_key UNIQUE (bucket_id);


--
-- Name: bucket_database_stats bucket_database_stats_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_database_stats
    ADD CONSTRAINT bucket_database_stats_pkey PRIMARY KEY (id);


--
-- Name: bucket_instances bucket_instances_bucket_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_instances
    ADD CONSTRAINT bucket_instances_bucket_slug_key UNIQUE (bucket_slug);


--
-- Name: bucket_instances bucket_instances_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_instances
    ADD CONSTRAINT bucket_instances_pkey PRIMARY KEY (bucket_id);


--
-- Name: bucket_reasoning_log bucket_reasoning_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_reasoning_log
    ADD CONSTRAINT bucket_reasoning_log_pkey PRIMARY KEY (reasoning_id);


--
-- Name: bucket_todos bucket_todos_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_todos
    ADD CONSTRAINT bucket_todos_pkey PRIMARY KEY (todo_id);


--
-- Name: bucket_versions bucket_versions_bucket_id_version_number_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_versions
    ADD CONSTRAINT bucket_versions_bucket_id_version_number_key UNIQUE (bucket_id, version_number);


--
-- Name: bucket_versions bucket_versions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_versions
    ADD CONSTRAINT bucket_versions_pkey PRIMARY KEY (version_id);


--
-- Name: campaign_variants campaign_variants_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.campaign_variants
    ADD CONSTRAINT campaign_variants_pkey PRIMARY KEY (variant_id);


--
-- Name: code_embeddings code_embeddings_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_embeddings
    ADD CONSTRAINT code_embeddings_pkey PRIMARY KEY (id);


--
-- Name: code_embeddings code_embeddings_snippet_id_embedding_source_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_embeddings
    ADD CONSTRAINT code_embeddings_snippet_id_embedding_source_key UNIQUE (snippet_id, embedding_source);


--
-- Name: code_repositories code_repositories_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_repositories
    ADD CONSTRAINT code_repositories_pkey PRIMARY KEY (id);


--
-- Name: code_room_messages code_room_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_messages
    ADD CONSTRAINT code_room_messages_pkey PRIMARY KEY (id);


--
-- Name: code_room_repositories code_room_repositories_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_repositories
    ADD CONSTRAINT code_room_repositories_pkey PRIMARY KEY (id);


--
-- Name: code_room_repositories code_room_repositories_room_id_repo_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_repositories
    ADD CONSTRAINT code_room_repositories_room_id_repo_id_key UNIQUE (room_id, repo_id);


--
-- Name: code_rooms code_rooms_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_rooms
    ADD CONSTRAINT code_rooms_name_key UNIQUE (name);


--
-- Name: code_rooms code_rooms_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_rooms
    ADD CONSTRAINT code_rooms_pkey PRIMARY KEY (id);


--
-- Name: code_rooms code_rooms_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_rooms
    ADD CONSTRAINT code_rooms_slug_key UNIQUE (slug);


--
-- Name: code_snippets code_snippets_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_snippets
    ADD CONSTRAINT code_snippets_pkey PRIMARY KEY (id);


--
-- Name: code_snippets code_snippets_repo_id_file_path_function_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_snippets
    ADD CONSTRAINT code_snippets_repo_id_file_path_function_name_key UNIQUE (repo_id, file_path, function_name);


--
-- Name: code_usage code_usage_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_usage
    ADD CONSTRAINT code_usage_pkey PRIMARY KEY (id);


--
-- Name: compaction_results compaction_results_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.compaction_results
    ADD CONSTRAINT compaction_results_pkey PRIMARY KEY (id);


--
-- Name: component_relationships component_relationships_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.component_relationships
    ADD CONSTRAINT component_relationships_pkey PRIMARY KEY (relationship_id);


--
-- Name: component_usage_stats component_usage_stats_component_type_component_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.component_usage_stats
    ADD CONSTRAINT component_usage_stats_component_type_component_id_key UNIQUE (component_type, component_id);


--
-- Name: component_usage_stats component_usage_stats_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.component_usage_stats
    ADD CONSTRAINT component_usage_stats_pkey PRIMARY KEY (stat_id);


--
-- Name: contact_exports contact_exports_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.contact_exports
    ADD CONSTRAINT contact_exports_pkey PRIMARY KEY (id);


--
-- Name: content_generation_queue content_generation_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_generation_queue
    ADD CONSTRAINT content_generation_queue_pkey PRIMARY KEY (id);


--
-- Name: content_notifications content_notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_notifications
    ADD CONSTRAINT content_notifications_pkey PRIMARY KEY (id);


--
-- Name: content_subscribers content_subscribers_email_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_subscribers
    ADD CONSTRAINT content_subscribers_email_key UNIQUE (email);


--
-- Name: content_subscribers content_subscribers_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_subscribers
    ADD CONSTRAINT content_subscribers_pkey PRIMARY KEY (id);


--
-- Name: context_drift_log context_drift_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.context_drift_log
    ADD CONSTRAINT context_drift_log_pkey PRIMARY KEY (drift_id);


--
-- Name: context_lock_files context_lock_files_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.context_lock_files
    ADD CONSTRAINT context_lock_files_pkey PRIMARY KEY (lock_id);


--
-- Name: conversations conversations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.conversations
    ADD CONSTRAINT conversations_pkey PRIMARY KEY (id);


--
-- Name: council_debates council_debates_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_debates
    ADD CONSTRAINT council_debates_pkey PRIMARY KEY (debate_id);


--
-- Name: council_model_stats council_model_stats_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_model_stats
    ADD CONSTRAINT council_model_stats_pkey PRIMARY KEY (model_name);


--
-- Name: council_proposals council_proposals_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_proposals
    ADD CONSTRAINT council_proposals_pkey PRIMARY KEY (proposal_id);


--
-- Name: council_sessions council_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_sessions
    ADD CONSTRAINT council_sessions_pkey PRIMARY KEY (session_id);


--
-- Name: council_themes council_themes_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_themes
    ADD CONSTRAINT council_themes_pkey PRIMARY KEY (theme_id);


--
-- Name: council_workflows council_workflows_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_workflows
    ADD CONSTRAINT council_workflows_pkey PRIMARY KEY (workflow_id);


--
-- Name: credential_usage_log credential_usage_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.credential_usage_log
    ADD CONSTRAINT credential_usage_log_pkey PRIMARY KEY (id);


--
-- Name: cross_domain_analytics cross_domain_analytics_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.cross_domain_analytics
    ADD CONSTRAINT cross_domain_analytics_pkey PRIMARY KEY (event_id);


--
-- Name: curated_content curated_content_external_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curated_content
    ADD CONSTRAINT curated_content_external_id_key UNIQUE (external_id);


--
-- Name: curated_content curated_content_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curated_content
    ADD CONSTRAINT curated_content_pkey PRIMARY KEY (id);


--
-- Name: curation_configs curation_configs_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curation_configs
    ADD CONSTRAINT curation_configs_pkey PRIMARY KEY (id);


--
-- Name: curation_configs curation_configs_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curation_configs
    ADD CONSTRAINT curation_configs_user_id_key UNIQUE (user_id);


--
-- Name: curation_reading_history curation_reading_history_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curation_reading_history
    ADD CONSTRAINT curation_reading_history_pkey PRIMARY KEY (id);


--
-- Name: curation_reading_history curation_reading_history_user_id_content_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curation_reading_history
    ADD CONSTRAINT curation_reading_history_user_id_content_id_key UNIQUE (user_id, content_id);


--
-- Name: data_normalization_log data_normalization_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_normalization_log
    ADD CONSTRAINT data_normalization_log_pkey PRIMARY KEY (log_id);


--
-- Name: data_quality_log data_quality_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_quality_log
    ADD CONSTRAINT data_quality_log_pkey PRIMARY KEY (id);


--
-- Name: data_replicas data_replicas_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_replicas
    ADD CONSTRAINT data_replicas_pkey PRIMARY KEY (id);


--
-- Name: data_source_stats data_source_stats_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_source_stats
    ADD CONSTRAINT data_source_stats_pkey PRIMARY KEY (id);


--
-- Name: decision_archives decision_archives_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_archives
    ADD CONSTRAINT decision_archives_pkey PRIMARY KEY (id);


--
-- Name: decision_references decision_references_decision_id_referenced_decision_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_references
    ADD CONSTRAINT decision_references_decision_id_referenced_decision_id_key UNIQUE (decision_id, referenced_decision_id);


--
-- Name: decision_references decision_references_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_references
    ADD CONSTRAINT decision_references_pkey PRIMARY KEY (id);


--
-- Name: decision_todos decision_todos_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_todos
    ADD CONSTRAINT decision_todos_pkey PRIMARY KEY (id);


--
-- Name: decision_versions decision_versions_decision_id_version_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_versions
    ADD CONSTRAINT decision_versions_decision_id_version_key UNIQUE (decision_id, version);


--
-- Name: decision_versions decision_versions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_versions
    ADD CONSTRAINT decision_versions_pkey PRIMARY KEY (id);


--
-- Name: decisions decisions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decisions
    ADD CONSTRAINT decisions_pkey PRIMARY KEY (id);


--
-- Name: dependency_snapshots dependency_snapshots_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.dependency_snapshots
    ADD CONSTRAINT dependency_snapshots_pkey PRIMARY KEY (id);


--
-- Name: developer_subscriptions developer_subscriptions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.developer_subscriptions
    ADD CONSTRAINT developer_subscriptions_pkey PRIMARY KEY (id);


--
-- Name: developers developers_api_key_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.developers
    ADD CONSTRAINT developers_api_key_key UNIQUE (api_key);


--
-- Name: developers developers_email_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.developers
    ADD CONSTRAINT developers_email_key UNIQUE (email);


--
-- Name: developers developers_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.developers
    ADD CONSTRAINT developers_pkey PRIMARY KEY (id);


--
-- Name: discovered_models discovered_models_model_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.discovered_models
    ADD CONSTRAINT discovered_models_model_id_key UNIQUE (model_id);


--
-- Name: discovered_models discovered_models_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.discovered_models
    ADD CONSTRAINT discovered_models_pkey PRIMARY KEY (id);


--
-- Name: document_chunks document_chunks_note_id_chunk_index_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.document_chunks
    ADD CONSTRAINT document_chunks_note_id_chunk_index_key UNIQUE (note_id, chunk_index);


--
-- Name: document_chunks document_chunks_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.document_chunks
    ADD CONSTRAINT document_chunks_pkey PRIMARY KEY (id);


--
-- Name: domain_anti_patterns domain_anti_patterns_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_anti_patterns
    ADD CONSTRAINT domain_anti_patterns_pkey PRIMARY KEY (id);


--
-- Name: domain_challenges domain_challenges_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_challenges
    ADD CONSTRAINT domain_challenges_pkey PRIMARY KEY (challenge_id);


--
-- Name: domain_code_examples domain_code_examples_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_code_examples
    ADD CONSTRAINT domain_code_examples_pkey PRIMARY KEY (example_id);


--
-- Name: domain_context_snapshots domain_context_snapshots_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_context_snapshots
    ADD CONSTRAINT domain_context_snapshots_pkey PRIMARY KEY (snapshot_id);


--
-- Name: domain_implementations domain_implementations_challenge_id_domain_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_implementations
    ADD CONSTRAINT domain_implementations_challenge_id_domain_id_key UNIQUE (challenge_id, domain_id);


--
-- Name: domain_implementations domain_implementations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_implementations
    ADD CONSTRAINT domain_implementations_pkey PRIMARY KEY (implementation_id);


--
-- Name: domain_judgments domain_judgments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_judgments
    ADD CONSTRAINT domain_judgments_pkey PRIMARY KEY (judgment_id);


--
-- Name: domain_knowledge_graph domain_knowledge_graph_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_knowledge_graph
    ADD CONSTRAINT domain_knowledge_graph_pkey PRIMARY KEY (id);


--
-- Name: domain_model_parameters domain_model_parameters_domain_context_model_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_model_parameters
    ADD CONSTRAINT domain_model_parameters_domain_context_model_id_key UNIQUE (domain_context, model_id);


--
-- Name: domain_model_parameters domain_model_parameters_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_model_parameters
    ADD CONSTRAINT domain_model_parameters_pkey PRIMARY KEY (id);


--
-- Name: domain_names domain_names_domain_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_names
    ADD CONSTRAINT domain_names_domain_key UNIQUE (domain);


--
-- Name: domain_names domain_names_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_names
    ADD CONSTRAINT domain_names_pkey PRIMARY KEY (id);


--
-- Name: domain_parameter_presets domain_parameter_presets_domain_context_preset_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_parameter_presets
    ADD CONSTRAINT domain_parameter_presets_domain_context_preset_slug_key UNIQUE (domain_context, preset_slug);


--
-- Name: domain_parameter_presets domain_parameter_presets_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_parameter_presets
    ADD CONSTRAINT domain_parameter_presets_pkey PRIMARY KEY (preset_id);


--
-- Name: domain_pattern_usage domain_pattern_usage_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_pattern_usage
    ADD CONSTRAINT domain_pattern_usage_pkey PRIMARY KEY (id);


--
-- Name: domain_portfolio domain_portfolio_domain_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_portfolio
    ADD CONSTRAINT domain_portfolio_domain_name_key UNIQUE (domain_name);


--
-- Name: domain_portfolio domain_portfolio_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_portfolio
    ADD CONSTRAINT domain_portfolio_pkey PRIMARY KEY (domain_id);


--
-- Name: domain_style_guides domain_style_guides_domain_context_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_style_guides
    ADD CONSTRAINT domain_style_guides_domain_context_key UNIQUE (domain_context);


--
-- Name: domain_style_guides domain_style_guides_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_style_guides
    ADD CONSTRAINT domain_style_guides_pkey PRIMARY KEY (id);


--
-- Name: drip_campaigns drip_campaigns_campaign_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.drip_campaigns
    ADD CONSTRAINT drip_campaigns_campaign_slug_key UNIQUE (campaign_slug);


--
-- Name: drip_campaigns drip_campaigns_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.drip_campaigns
    ADD CONSTRAINT drip_campaigns_pkey PRIMARY KEY (campaign_id);


--
-- Name: elo_blocked_voters elo_blocked_voters_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_blocked_voters
    ADD CONSTRAINT elo_blocked_voters_pkey PRIMARY KEY (id);


--
-- Name: elo_items elo_items_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_items
    ADD CONSTRAINT elo_items_pkey PRIMARY KEY (id);


--
-- Name: elo_matches elo_matches_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_matches
    ADD CONSTRAINT elo_matches_pkey PRIMARY KEY (id);


--
-- Name: elo_rating_history elo_rating_history_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_rating_history
    ADD CONSTRAINT elo_rating_history_pkey PRIMARY KEY (id);


--
-- Name: elo_spam_patterns elo_spam_patterns_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_spam_patterns
    ADD CONSTRAINT elo_spam_patterns_pkey PRIMARY KEY (id);


--
-- Name: elo_user_votes elo_user_votes_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_user_votes
    ADD CONSTRAINT elo_user_votes_pkey PRIMARY KEY (id);


--
-- Name: email_breach_tracker email_breach_tracker_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.email_breach_tracker
    ADD CONSTRAINT email_breach_tracker_pkey PRIMARY KEY (tracker_id);


--
-- Name: email_breach_tracker email_breach_tracker_tagged_email_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.email_breach_tracker
    ADD CONSTRAINT email_breach_tracker_tagged_email_key UNIQUE (tagged_email);


--
-- Name: email_relay_logs email_relay_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.email_relay_logs
    ADD CONSTRAINT email_relay_logs_pkey PRIMARY KEY (id);


--
-- Name: embed_analytics embed_analytics_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_analytics
    ADD CONSTRAINT embed_analytics_pkey PRIMARY KEY (id);


--
-- Name: embed_analytics embed_analytics_site_id_date_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_analytics
    ADD CONSTRAINT embed_analytics_site_id_date_key UNIQUE (site_id, date);


--
-- Name: embed_consents embed_consents_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_consents
    ADD CONSTRAINT embed_consents_pkey PRIMARY KEY (id);


--
-- Name: embed_events embed_events_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_events
    ADD CONSTRAINT embed_events_pkey PRIMARY KEY (id);


--
-- Name: embed_sessions embed_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sessions
    ADD CONSTRAINT embed_sessions_pkey PRIMARY KEY (id);


--
-- Name: embed_sessions embed_sessions_session_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sessions
    ADD CONSTRAINT embed_sessions_session_id_key UNIQUE (session_id);


--
-- Name: embed_sites embed_sites_api_key_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sites
    ADD CONSTRAINT embed_sites_api_key_key UNIQUE (api_key);


--
-- Name: embed_sites embed_sites_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sites
    ADD CONSTRAINT embed_sites_pkey PRIMARY KEY (id);


--
-- Name: embed_sites embed_sites_site_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sites
    ADD CONSTRAINT embed_sites_site_id_key UNIQUE (site_id);


--
-- Name: embed_widgets embed_widgets_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_widgets
    ADD CONSTRAINT embed_widgets_pkey PRIMARY KEY (id);


--
-- Name: equipped_items equipped_items_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.equipped_items
    ADD CONSTRAINT equipped_items_pkey PRIMARY KEY (app_id, user_id, equipment_slot);


--
-- Name: error_log error_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.error_log
    ADD CONSTRAINT error_log_pkey PRIMARY KEY (id);


--
-- Name: error_logs error_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.error_logs
    ADD CONSTRAINT error_logs_pkey PRIMARY KEY (id);


--
-- Name: errors errors_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.errors
    ADD CONSTRAINT errors_pkey PRIMARY KEY (id);


--
-- Name: event_log event_log_event_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.event_log
    ADD CONSTRAINT event_log_event_id_key UNIQUE (event_id);


--
-- Name: event_log event_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.event_log
    ADD CONSTRAINT event_log_pkey PRIMARY KEY (id);


--
-- Name: experiment_assignments experiment_assignments_experiment_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_assignments
    ADD CONSTRAINT experiment_assignments_experiment_id_user_id_key UNIQUE (experiment_id, user_id);


--
-- Name: experiment_assignments experiment_assignments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_assignments
    ADD CONSTRAINT experiment_assignments_pkey PRIMARY KEY (id);


--
-- Name: experiment_results experiment_results_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_results
    ADD CONSTRAINT experiment_results_pkey PRIMARY KEY (id);


--
-- Name: experiment_statistics experiment_statistics_experiment_id_variant_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_statistics
    ADD CONSTRAINT experiment_statistics_experiment_id_variant_id_key UNIQUE (experiment_id, variant_id);


--
-- Name: experiment_statistics experiment_statistics_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_statistics
    ADD CONSTRAINT experiment_statistics_pkey PRIMARY KEY (id);


--
-- Name: experiment_variants experiment_variants_experiment_id_variant_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_variants
    ADD CONSTRAINT experiment_variants_experiment_id_variant_name_key UNIQUE (experiment_id, variant_name);


--
-- Name: experiment_variants experiment_variants_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_variants
    ADD CONSTRAINT experiment_variants_pkey PRIMARY KEY (id);


--
-- Name: experiments experiments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiments
    ADD CONSTRAINT experiments_pkey PRIMARY KEY (id);


--
-- Name: file_permissions file_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.file_permissions
    ADD CONSTRAINT file_permissions_pkey PRIMARY KEY (id);


--
-- Name: fine_tune_datasets fine_tune_datasets_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.fine_tune_datasets
    ADD CONSTRAINT fine_tune_datasets_pkey PRIMARY KEY (id);


--
-- Name: fine_tune_runs fine_tune_runs_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.fine_tune_runs
    ADD CONSTRAINT fine_tune_runs_pkey PRIMARY KEY (id);


--
-- Name: first_names first_names_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.first_names
    ADD CONSTRAINT first_names_name_key UNIQUE (name);


--
-- Name: first_names first_names_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.first_names
    ADD CONSTRAINT first_names_pkey PRIMARY KEY (id);


--
-- Name: flow_executions flow_executions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.flow_executions
    ADD CONSTRAINT flow_executions_pkey PRIMARY KEY (id);


--
-- Name: forum_karma forum_karma_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_karma
    ADD CONSTRAINT forum_karma_pkey PRIMARY KEY (id);


--
-- Name: forum_karma forum_karma_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_karma
    ADD CONSTRAINT forum_karma_user_id_key UNIQUE (user_id);


--
-- Name: forum_posts forum_posts_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_posts
    ADD CONSTRAINT forum_posts_pkey PRIMARY KEY (id);


--
-- Name: forum_threads forum_threads_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_threads
    ADD CONSTRAINT forum_threads_pkey PRIMARY KEY (id);


--
-- Name: forum_votes forum_votes_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_votes
    ADD CONSTRAINT forum_votes_pkey PRIMARY KEY (id);


--
-- Name: forum_votes forum_votes_user_id_post_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_votes
    ADD CONSTRAINT forum_votes_user_id_post_id_key UNIQUE (user_id, post_id);


--
-- Name: forum_votes forum_votes_user_id_thread_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_votes
    ADD CONSTRAINT forum_votes_user_id_thread_id_key UNIQUE (user_id, thread_id);


--
-- Name: funding_registry funding_registry_package_id_funding_url_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.funding_registry
    ADD CONSTRAINT funding_registry_package_id_funding_url_key UNIQUE (package_id, funding_url);


--
-- Name: funding_registry funding_registry_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.funding_registry
    ADD CONSTRAINT funding_registry_pkey PRIMARY KEY (id);


--
-- Name: game_assets game_assets_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.game_assets
    ADD CONSTRAINT game_assets_pkey PRIMARY KEY (app_id);


--
-- Name: brand_bot_posts game_lore_bot_posts_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_bot_posts
    ADD CONSTRAINT game_lore_bot_posts_pkey PRIMARY KEY (id);


--
-- Name: brand_personas game_lore_characters_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_personas
    ADD CONSTRAINT game_lore_characters_pkey PRIMARY KEY (id);


--
-- Name: brand_personas game_lore_characters_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_personas
    ADD CONSTRAINT game_lore_characters_slug_key UNIQUE (slug);


--
-- Name: brand_discussion_templates game_lore_discussion_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_discussion_templates
    ADD CONSTRAINT game_lore_discussion_templates_pkey PRIMARY KEY (id);


--
-- Name: brand_discussion_templates game_lore_discussion_templates_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_discussion_templates
    ADD CONSTRAINT game_lore_discussion_templates_slug_key UNIQUE (slug);


--
-- Name: brand_milestones game_lore_events_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_milestones
    ADD CONSTRAINT game_lore_events_pkey PRIMARY KEY (id);


--
-- Name: brand_milestones game_lore_events_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_milestones
    ADD CONSTRAINT game_lore_events_slug_key UNIQUE (slug);


--
-- Name: brand_knowledge game_lore_fragments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_knowledge
    ADD CONSTRAINT game_lore_fragments_pkey PRIMARY KEY (id);


--
-- Name: brand_knowledge game_lore_fragments_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_knowledge
    ADD CONSTRAINT game_lore_fragments_slug_key UNIQUE (slug);


--
-- Name: brand_domains game_lore_games_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_domains
    ADD CONSTRAINT game_lore_games_pkey PRIMARY KEY (id);


--
-- Name: brand_domains game_lore_games_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_domains
    ADD CONSTRAINT game_lore_games_slug_key UNIQUE (slug);


--
-- Name: brand_projects game_lore_locations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_projects
    ADD CONSTRAINT game_lore_locations_pkey PRIMARY KEY (id);


--
-- Name: brand_projects game_lore_locations_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_projects
    ADD CONSTRAINT game_lore_locations_slug_key UNIQUE (slug);


--
-- Name: generated_documents generated_documents_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.generated_documents
    ADD CONSTRAINT generated_documents_pkey PRIMARY KEY (id);


--
-- Name: git_portfolio_stats git_portfolio_stats_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.git_portfolio_stats
    ADD CONSTRAINT git_portfolio_stats_pkey PRIMARY KEY (id);


--
-- Name: git_portfolio_stats git_portfolio_stats_platform_username_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.git_portfolio_stats
    ADD CONSTRAINT git_portfolio_stats_platform_username_key UNIQUE (platform, username);


--
-- Name: github_activity_feed github_activity_feed_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.github_activity_feed
    ADD CONSTRAINT github_activity_feed_pkey PRIMARY KEY (id);


--
-- Name: gmail_send_as_aliases gmail_send_as_aliases_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_send_as_aliases
    ADD CONSTRAINT gmail_send_as_aliases_pkey PRIMARY KEY (id);


--
-- Name: gmail_sent_emails gmail_sent_emails_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_sent_emails
    ADD CONSTRAINT gmail_sent_emails_pkey PRIMARY KEY (id);


--
-- Name: gmail_webhook_configs gmail_webhook_configs_email_address_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_webhook_configs
    ADD CONSTRAINT gmail_webhook_configs_email_address_key UNIQUE (email_address);


--
-- Name: gmail_webhook_configs gmail_webhook_configs_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_webhook_configs
    ADD CONSTRAINT gmail_webhook_configs_pkey PRIMARY KEY (id);


--
-- Name: grading_results grading_results_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.grading_results
    ADD CONSTRAINT grading_results_pkey PRIMARY KEY (id);


--
-- Name: grading_results grading_results_submission_id_track_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.grading_results
    ADD CONSTRAINT grading_results_submission_id_track_key UNIQUE (submission_id, track);


--
-- Name: guardian_bug_reports guardian_bug_reports_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.guardian_bug_reports
    ADD CONSTRAINT guardian_bug_reports_pkey PRIMARY KEY (report_id);


--
-- Name: guardian_log guardian_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.guardian_log
    ADD CONSTRAINT guardian_log_pkey PRIMARY KEY (id);


--
-- Name: guardian_patch_applications guardian_patch_applications_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.guardian_patch_applications
    ADD CONSTRAINT guardian_patch_applications_pkey PRIMARY KEY (patch_id);


--
-- Name: handle_history handle_history_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.handle_history
    ADD CONSTRAINT handle_history_pkey PRIMARY KEY (history_id);


--
-- Name: handle_reservations handle_reservations_handle_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.handle_reservations
    ADD CONSTRAINT handle_reservations_handle_key UNIQUE (handle);


--
-- Name: handle_reservations handle_reservations_handle_lowercase_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.handle_reservations
    ADD CONSTRAINT handle_reservations_handle_lowercase_key UNIQUE (handle_lowercase);


--
-- Name: handle_reservations handle_reservations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.handle_reservations
    ADD CONSTRAINT handle_reservations_pkey PRIMARY KEY (reservation_id);


--
-- Name: health_metrics health_metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.health_metrics
    ADD CONSTRAINT health_metrics_pkey PRIMARY KEY (id);


--
-- Name: heatmap_data heatmap_data_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.heatmap_data
    ADD CONSTRAINT heatmap_data_pkey PRIMARY KEY (id);


--
-- Name: hint_ratings hint_ratings_hint_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.hint_ratings
    ADD CONSTRAINT hint_ratings_hint_id_user_id_key UNIQUE (hint_id, user_id);


--
-- Name: hint_ratings hint_ratings_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.hint_ratings
    ADD CONSTRAINT hint_ratings_pkey PRIMARY KEY (rating_id);


--
-- Name: icon_animations icon_animations_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.icon_animations
    ADD CONSTRAINT icon_animations_name_key UNIQUE (name);


--
-- Name: icon_animations icon_animations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.icon_animations
    ADD CONSTRAINT icon_animations_pkey PRIMARY KEY (id);


--
-- Name: idea_purchases idea_purchases_idea_id_buyer_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.idea_purchases
    ADD CONSTRAINT idea_purchases_idea_id_buyer_id_key UNIQUE (idea_id, buyer_id);


--
-- Name: idea_purchases idea_purchases_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.idea_purchases
    ADD CONSTRAINT idea_purchases_pkey PRIMARY KEY (id);


--
-- Name: idea_votes idea_votes_idea_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.idea_votes
    ADD CONSTRAINT idea_votes_idea_id_user_id_key UNIQUE (idea_id, user_id);


--
-- Name: idea_votes idea_votes_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.idea_votes
    ADD CONSTRAINT idea_votes_pkey PRIMARY KEY (id);


--
-- Name: identity_resolution_log identity_resolution_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.identity_resolution_log
    ADD CONSTRAINT identity_resolution_log_pkey PRIMARY KEY (resolution_id);


--
-- Name: data_replicas idx_data_replicas_lookup; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_replicas
    ADD CONSTRAINT idx_data_replicas_lookup UNIQUE (data_type, params, replicated_at);


--
-- Name: data_source_stats idx_source_stats_lookup; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_source_stats
    ADD CONSTRAINT idx_source_stats_lookup UNIQUE (source_name, data_type);


--
-- Name: iiif_cache_stats iiif_cache_stats_cache_key_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_cache_stats
    ADD CONSTRAINT iiif_cache_stats_cache_key_key UNIQUE (cache_key);


--
-- Name: iiif_cache_stats iiif_cache_stats_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_cache_stats
    ADD CONSTRAINT iiif_cache_stats_pkey PRIMARY KEY (id);


--
-- Name: iiif_canvas_images iiif_canvas_images_manifest_id_canvas_order_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_canvas_images
    ADD CONSTRAINT iiif_canvas_images_manifest_id_canvas_order_key UNIQUE (manifest_id, canvas_order);


--
-- Name: iiif_canvas_images iiif_canvas_images_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_canvas_images
    ADD CONSTRAINT iiif_canvas_images_pkey PRIMARY KEY (id);


--
-- Name: iiif_images iiif_images_filename_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_images
    ADD CONSTRAINT iiif_images_filename_key UNIQUE (filename);


--
-- Name: iiif_images iiif_images_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_images
    ADD CONSTRAINT iiif_images_pkey PRIMARY KEY (id);


--
-- Name: iiif_manifests iiif_manifests_manifest_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_manifests
    ADD CONSTRAINT iiif_manifests_manifest_id_key UNIQUE (manifest_id);


--
-- Name: iiif_manifests iiif_manifests_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_manifests
    ADD CONSTRAINT iiif_manifests_pkey PRIMARY KEY (id);


--
-- Name: incentive_tracker incentive_tracker_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.incentive_tracker
    ADD CONSTRAINT incentive_tracker_pkey PRIMARY KEY (id);


--
-- Name: inventory_items inventory_items_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.inventory_items
    ADD CONSTRAINT inventory_items_pkey PRIMARY KEY (app_id, user_id, slot_index);


--
-- Name: job_execution_log job_execution_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.job_execution_log
    ADD CONSTRAINT job_execution_log_pkey PRIMARY KEY (id);


--
-- Name: karma_transactions karma_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.karma_transactions
    ADD CONSTRAINT karma_transactions_pkey PRIMARY KEY (id);


--
-- Name: keyword_tracking keyword_tracking_keyword_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.keyword_tracking
    ADD CONSTRAINT keyword_tracking_keyword_key UNIQUE (keyword);


--
-- Name: keyword_tracking keyword_tracking_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.keyword_tracking
    ADD CONSTRAINT keyword_tracking_pkey PRIMARY KEY (keyword_id);


--
-- Name: knowledge_approvals knowledge_approvals_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.knowledge_approvals
    ADD CONSTRAINT knowledge_approvals_pkey PRIMARY KEY (id);


--
-- Name: knowledge_chats knowledge_chats_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.knowledge_chats
    ADD CONSTRAINT knowledge_chats_pkey PRIMARY KEY (id);


--
-- Name: knowledge_patterns knowledge_patterns_pattern_name_problem_description_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.knowledge_patterns
    ADD CONSTRAINT knowledge_patterns_pattern_name_problem_description_key UNIQUE (pattern_name, problem_description);


--
-- Name: knowledge_patterns knowledge_patterns_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.knowledge_patterns
    ADD CONSTRAINT knowledge_patterns_pkey PRIMARY KEY (id);


--
-- Name: last_names last_names_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.last_names
    ADD CONSTRAINT last_names_name_key UNIQUE (name);


--
-- Name: last_names last_names_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.last_names
    ADD CONSTRAINT last_names_pkey PRIMARY KEY (id);


--
-- Name: launcher_apps launcher_apps_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.launcher_apps
    ADD CONSTRAINT launcher_apps_pkey PRIMARY KEY (user_id, app_id);


--
-- Name: launcher_folders launcher_folders_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.launcher_folders
    ADD CONSTRAINT launcher_folders_pkey PRIMARY KEY (folder_id);


--
-- Name: learning_paths learning_paths_path_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.learning_paths
    ADD CONSTRAINT learning_paths_path_slug_key UNIQUE (path_slug);


--
-- Name: learning_paths learning_paths_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.learning_paths
    ADD CONSTRAINT learning_paths_pkey PRIMARY KEY (path_id);


--
-- Name: lesson_completions lesson_completions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lesson_completions
    ADD CONSTRAINT lesson_completions_pkey PRIMARY KEY (completion_id);


--
-- Name: lesson_completions lesson_completions_user_id_lesson_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lesson_completions
    ADD CONSTRAINT lesson_completions_user_id_lesson_id_key UNIQUE (user_id, lesson_id);


--
-- Name: lessons lessons_path_id_lesson_number_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lessons
    ADD CONSTRAINT lessons_path_id_lesson_number_key UNIQUE (path_id, lesson_number);


--
-- Name: lessons lessons_path_id_lesson_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lessons
    ADD CONSTRAINT lessons_path_id_lesson_slug_key UNIQUE (path_id, lesson_slug);


--
-- Name: lessons lessons_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lessons
    ADD CONSTRAINT lessons_pkey PRIMARY KEY (lesson_id);


--
-- Name: marketplace_ideas marketplace_ideas_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.marketplace_ideas
    ADD CONSTRAINT marketplace_ideas_pkey PRIMARY KEY (id);


--
-- Name: message_agent_routing message_agent_routing_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.message_agent_routing
    ADD CONSTRAINT message_agent_routing_pkey PRIMARY KEY (id);


--
-- Name: message_slack_routing message_slack_routing_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.message_slack_routing
    ADD CONSTRAINT message_slack_routing_pkey PRIMARY KEY (id);


--
-- Name: migration_history migration_history_migration_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.migration_history
    ADD CONSTRAINT migration_history_migration_name_key UNIQUE (migration_name);


--
-- Name: migration_history migration_history_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.migration_history
    ADD CONSTRAINT migration_history_pkey PRIMARY KEY (migration_id);


--
-- Name: mini_games mini_games_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.mini_games
    ADD CONSTRAINT mini_games_pkey PRIMARY KEY (game_id);


--
-- Name: model_benchmarks model_benchmarks_model_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_benchmarks
    ADD CONSTRAINT model_benchmarks_model_id_key UNIQUE (model_id);


--
-- Name: model_benchmarks model_benchmarks_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_benchmarks
    ADD CONSTRAINT model_benchmarks_pkey PRIMARY KEY (id);


--
-- Name: model_comparisons model_comparisons_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_comparisons
    ADD CONSTRAINT model_comparisons_pkey PRIMARY KEY (id);


--
-- Name: model_discovery_events model_discovery_events_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_discovery_events
    ADD CONSTRAINT model_discovery_events_pkey PRIMARY KEY (id);


--
-- Name: model_performance model_performance_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_performance
    ADD CONSTRAINT model_performance_pkey PRIMARY KEY (id);


--
-- Name: model_pricing model_pricing_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_pricing
    ADD CONSTRAINT model_pricing_pkey PRIMARY KEY (id);


--
-- Name: model_pricing model_pricing_provider_model_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_pricing
    ADD CONSTRAINT model_pricing_provider_model_name_key UNIQUE (provider, model_name);


--
-- Name: model_rankings model_rankings_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_rankings
    ADD CONSTRAINT model_rankings_pkey PRIMARY KEY (id);


--
-- Name: model_rankings model_rankings_use_case_category_model_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_rankings
    ADD CONSTRAINT model_rankings_use_case_category_model_id_key UNIQUE (use_case_category, model_id);


--
-- Name: model_recommendations model_recommendations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_recommendations
    ADD CONSTRAINT model_recommendations_pkey PRIMARY KEY (id);


--
-- Name: model_storage model_storage_model_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_storage
    ADD CONSTRAINT model_storage_model_id_key UNIQUE (model_id);


--
-- Name: model_storage model_storage_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_storage
    ADD CONSTRAINT model_storage_pkey PRIMARY KEY (id);


--
-- Name: model_usage_log model_usage_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_usage_log
    ADD CONSTRAINT model_usage_log_pkey PRIMARY KEY (id);


--
-- Name: model_use_cases model_use_cases_category_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_use_cases
    ADD CONSTRAINT model_use_cases_category_name_key UNIQUE (category_name);


--
-- Name: model_use_cases model_use_cases_category_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_use_cases
    ADD CONSTRAINT model_use_cases_category_slug_key UNIQUE (category_slug);


--
-- Name: model_use_cases model_use_cases_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_use_cases
    ADD CONSTRAINT model_use_cases_pkey PRIMARY KEY (id);


--
-- Name: model_version_deployments model_version_deployments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_version_deployments
    ADD CONSTRAINT model_version_deployments_pkey PRIMARY KEY (id);


--
-- Name: model_version_performance model_version_performance_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_version_performance
    ADD CONSTRAINT model_version_performance_pkey PRIMARY KEY (id);


--
-- Name: model_version_performance model_version_performance_version_id_date_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_version_performance
    ADD CONSTRAINT model_version_performance_version_id_date_key UNIQUE (version_id, date);


--
-- Name: model_versions model_versions_domain_version_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_versions
    ADD CONSTRAINT model_versions_domain_version_name_key UNIQUE (domain, version_name);


--
-- Name: model_versions model_versions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_versions
    ADD CONSTRAINT model_versions_pkey PRIMARY KEY (id);


--
-- Name: model_wrappers model_wrappers_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_wrappers
    ADD CONSTRAINT model_wrappers_pkey PRIMARY KEY (id);


--
-- Name: model_wrappers model_wrappers_wrapper_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_wrappers
    ADD CONSTRAINT model_wrappers_wrapper_name_key UNIQUE (wrapper_name);


--
-- Name: newsletter_delivery_log newsletter_delivery_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.newsletter_delivery_log
    ADD CONSTRAINT newsletter_delivery_log_pkey PRIMARY KEY (id);


--
-- Name: note_access_log note_access_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.note_access_log
    ADD CONSTRAINT note_access_log_pkey PRIMARY KEY (id);


--
-- Name: note_relationships note_relationships_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.note_relationships
    ADD CONSTRAINT note_relationships_pkey PRIMARY KEY (id);


--
-- Name: note_relationships note_relationships_source_note_id_target_note_id_relationsh_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.note_relationships
    ADD CONSTRAINT note_relationships_source_note_id_target_note_id_relationsh_key UNIQUE (source_note_id, target_note_id, relationship_type);


--
-- Name: notes notes_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.notes
    ADD CONSTRAINT notes_pkey PRIMARY KEY (id);


--
-- Name: ollama_training_jobs ollama_training_jobs_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ollama_training_jobs
    ADD CONSTRAINT ollama_training_jobs_pkey PRIMARY KEY (id);


--
-- Name: package_dependencies package_dependencies_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_dependencies
    ADD CONSTRAINT package_dependencies_pkey PRIMARY KEY (id);


--
-- Name: package_intelligence package_intelligence_package_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_intelligence
    ADD CONSTRAINT package_intelligence_package_id_key UNIQUE (package_id);


--
-- Name: package_intelligence package_intelligence_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_intelligence
    ADD CONSTRAINT package_intelligence_pkey PRIMARY KEY (id);


--
-- Name: package_usage_log package_usage_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_usage_log
    ADD CONSTRAINT package_usage_log_pkey PRIMARY KEY (id);


--
-- Name: paper_embeddings paper_embeddings_paper_id_source_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.paper_embeddings
    ADD CONSTRAINT paper_embeddings_paper_id_source_key UNIQUE (paper_id, source);


--
-- Name: paper_embeddings paper_embeddings_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.paper_embeddings
    ADD CONSTRAINT paper_embeddings_pkey PRIMARY KEY (id);


--
-- Name: parameter_ab_tests parameter_ab_tests_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.parameter_ab_tests
    ADD CONSTRAINT parameter_ab_tests_pkey PRIMARY KEY (test_id);


--
-- Name: parameter_performance_log parameter_performance_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.parameter_performance_log
    ADD CONSTRAINT parameter_performance_log_pkey PRIMARY KEY (id);


--
-- Name: partner_clicks partner_clicks_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.partner_clicks
    ADD CONSTRAINT partner_clicks_pkey PRIMARY KEY (click_id);


--
-- Name: partner_rotations partner_rotations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.partner_rotations
    ADD CONSTRAINT partner_rotations_pkey PRIMARY KEY (rotation_id);


--
-- Name: phone_patterns phone_patterns_country_code_pattern_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.phone_patterns
    ADD CONSTRAINT phone_patterns_country_code_pattern_key UNIQUE (country_code, pattern);


--
-- Name: phone_patterns phone_patterns_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.phone_patterns
    ADD CONSTRAINT phone_patterns_pkey PRIMARY KEY (id);


--
-- Name: player_inventories player_inventories_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.player_inventories
    ADD CONSTRAINT player_inventories_pkey PRIMARY KEY (app_id, user_id);


--
-- Name: portfolio_analytics portfolio_analytics_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.portfolio_analytics
    ADD CONSTRAINT portfolio_analytics_pkey PRIMARY KEY (id);


--
-- Name: portfolio_analytics portfolio_analytics_user_id_date_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.portfolio_analytics
    ADD CONSTRAINT portfolio_analytics_user_id_date_key UNIQUE (user_id, date);


--
-- Name: portfolio_settings portfolio_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.portfolio_settings
    ADD CONSTRAINT portfolio_settings_pkey PRIMARY KEY (user_id);


--
-- Name: portfolio_settings portfolio_settings_public_url_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.portfolio_settings
    ADD CONSTRAINT portfolio_settings_public_url_slug_key UNIQUE (public_url_slug);


--
-- Name: portfolio_timeline portfolio_timeline_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.portfolio_timeline
    ADD CONSTRAINT portfolio_timeline_pkey PRIMARY KEY (id);


--
-- Name: price_alerts price_alerts_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_alerts
    ADD CONSTRAINT price_alerts_pkey PRIMARY KEY (id);


--
-- Name: price_audit_log price_audit_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_audit_log
    ADD CONSTRAINT price_audit_log_pkey PRIMARY KEY (id);


--
-- Name: price_cache price_cache_cache_key_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_cache
    ADD CONSTRAINT price_cache_cache_key_key UNIQUE (cache_key);


--
-- Name: price_cache price_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_cache
    ADD CONSTRAINT price_cache_pkey PRIMARY KEY (id);


--
-- Name: price_candles price_candles_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_candles
    ADD CONSTRAINT price_candles_pkey PRIMARY KEY (id);


--
-- Name: price_candles price_candles_symbol_asset_type_timeframe_candle_start_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_candles
    ADD CONSTRAINT price_candles_symbol_asset_type_timeframe_candle_start_key UNIQUE (symbol, asset_type, timeframe, candle_start);


--
-- Name: price_correlations price_correlations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_correlations
    ADD CONSTRAINT price_correlations_pkey PRIMARY KEY (id);


--
-- Name: price_events price_events_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_events
    ADD CONSTRAINT price_events_pkey PRIMARY KEY (id);


--
-- Name: price_history price_history_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_history
    ADD CONSTRAINT price_history_pkey PRIMARY KEY (id);


--
-- Name: price_indicators price_indicators_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_indicators
    ADD CONSTRAINT price_indicators_pkey PRIMARY KEY (id);


--
-- Name: price_indicators price_indicators_symbol_asset_type_timeframe_calculated_at_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_indicators
    ADD CONSTRAINT price_indicators_symbol_asset_type_timeframe_calculated_at_key UNIQUE (symbol, asset_type, timeframe, calculated_at);


--
-- Name: price_sources price_sources_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_sources
    ADD CONSTRAINT price_sources_pkey PRIMARY KEY (id);


--
-- Name: price_sources price_sources_source_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_sources
    ADD CONSTRAINT price_sources_source_name_key UNIQUE (source_name);


--
-- Name: price_watchlist price_watchlist_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_watchlist
    ADD CONSTRAINT price_watchlist_pkey PRIMARY KEY (id);


--
-- Name: price_watchlist price_watchlist_user_id_symbol_asset_type_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.price_watchlist
    ADD CONSTRAINT price_watchlist_user_id_symbol_asset_type_key UNIQUE (user_id, symbol, asset_type);


--
-- Name: profile_matches profile_matches_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.profile_matches
    ADD CONSTRAINT profile_matches_pkey PRIMARY KEY (id);


--
-- Name: profile_messages profile_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.profile_messages
    ADD CONSTRAINT profile_messages_pkey PRIMARY KEY (id);


--
-- Name: published_content published_content_guid_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.published_content
    ADD CONSTRAINT published_content_guid_key UNIQUE (guid);


--
-- Name: published_content published_content_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.published_content
    ADD CONSTRAINT published_content_pkey PRIMARY KEY (id);


--
-- Name: published_content published_content_slug_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.published_content
    ADD CONSTRAINT published_content_slug_key UNIQUE (slug);


--
-- Name: qr_sessions qr_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.qr_sessions
    ADD CONSTRAINT qr_sessions_pkey PRIMARY KEY (session_id);


--
-- Name: qr_sessions qr_sessions_session_token_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.qr_sessions
    ADD CONSTRAINT qr_sessions_session_token_key UNIQUE (session_token);


--
-- Name: recent_files recent_files_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.recent_files
    ADD CONSTRAINT recent_files_pkey PRIMARY KEY (id);


--
-- Name: recent_files recent_files_user_id_file_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.recent_files
    ADD CONSTRAINT recent_files_user_id_file_id_key UNIQUE (user_id, file_id);


--
-- Name: request_lifecycle request_lifecycle_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.request_lifecycle
    ADD CONSTRAINT request_lifecycle_pkey PRIMARY KEY (id);


--
-- Name: request_lifecycle request_lifecycle_request_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.request_lifecycle
    ADD CONSTRAINT request_lifecycle_request_id_key UNIQUE (request_id);


--
-- Name: request_state_transitions request_state_transitions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.request_state_transitions
    ADD CONSTRAINT request_state_transitions_pkey PRIMARY KEY (id);


--
-- Name: resource_manifests resource_manifests_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.resource_manifests
    ADD CONSTRAINT resource_manifests_pkey PRIMARY KEY (app_id);


--
-- Name: resource_states resource_states_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.resource_states
    ADD CONSTRAINT resource_states_pkey PRIMARY KEY (app_id, resource_id);


--
-- Name: room_state room_state_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.room_state
    ADD CONSTRAINT room_state_pkey PRIMARY KEY (id);


--
-- Name: room_state room_state_room_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.room_state
    ADD CONSTRAINT room_state_room_name_key UNIQUE (room_name);


--
-- Name: scheduled_jobs scheduled_jobs_job_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.scheduled_jobs
    ADD CONSTRAINT scheduled_jobs_job_name_key UNIQUE (job_name);


--
-- Name: scheduled_jobs scheduled_jobs_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.scheduled_jobs
    ADD CONSTRAINT scheduled_jobs_pkey PRIMARY KEY (id);


--
-- Name: scheduler_log scheduler_log_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.scheduler_log
    ADD CONSTRAINT scheduler_log_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_migration_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.schema_migrations
    ADD CONSTRAINT schema_migrations_migration_name_key UNIQUE (migration_name);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (id);


--
-- Name: sdk_tokens sdk_tokens_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sdk_tokens
    ADD CONSTRAINT sdk_tokens_pkey PRIMARY KEY (id);


--
-- Name: sdk_tokens sdk_tokens_token_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sdk_tokens
    ADD CONSTRAINT sdk_tokens_token_key UNIQUE (token);


--
-- Name: service_credentials service_credentials_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.service_credentials
    ADD CONSTRAINT service_credentials_pkey PRIMARY KEY (id);


--
-- Name: service_credentials service_credentials_service_name_credential_type_identifier_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.service_credentials
    ADD CONSTRAINT service_credentials_service_name_credential_type_identifier_key UNIQUE (service_name, credential_type, identifier);


--
-- Name: shard_registry shard_registry_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.shard_registry
    ADD CONSTRAINT shard_registry_pkey PRIMARY KEY (id);


--
-- Name: shard_registry shard_registry_shard_index_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.shard_registry
    ADD CONSTRAINT shard_registry_shard_index_key UNIQUE (shard_index);


--
-- Name: snapshot_deployments snapshot_deployments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_deployments
    ADD CONSTRAINT snapshot_deployments_pkey PRIMARY KEY (deployment_id);


--
-- Name: snapshot_diffs snapshot_diffs_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_diffs
    ADD CONSTRAINT snapshot_diffs_pkey PRIMARY KEY (diff_id);


--
-- Name: snapshot_validations snapshot_validations_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_validations
    ADD CONSTRAINT snapshot_validations_pkey PRIMARY KEY (validation_id);


--
-- Name: song_requests song_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.song_requests
    ADD CONSTRAINT song_requests_pkey PRIMARY KEY (id);


--
-- Name: sprite_atlas sprite_atlas_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sprite_atlas
    ADD CONSTRAINT sprite_atlas_pkey PRIMARY KEY (id);


--
-- Name: sprite_atlas sprite_atlas_sheet_id_sprite_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sprite_atlas
    ADD CONSTRAINT sprite_atlas_sheet_id_sprite_name_key UNIQUE (sheet_id, sprite_name);


--
-- Name: sprite_sheets sprite_sheets_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sprite_sheets
    ADD CONSTRAINT sprite_sheets_name_key UNIQUE (name);


--
-- Name: sprite_sheets sprite_sheets_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sprite_sheets
    ADD CONSTRAINT sprite_sheets_pkey PRIMARY KEY (id);


--
-- Name: stream_chat stream_chat_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_chat
    ADD CONSTRAINT stream_chat_pkey PRIMARY KEY (id);


--
-- Name: stream_sessions stream_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_sessions
    ADD CONSTRAINT stream_sessions_pkey PRIMARY KEY (id);


--
-- Name: stream_sessions stream_sessions_stream_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_sessions
    ADD CONSTRAINT stream_sessions_stream_id_key UNIQUE (stream_id);


--
-- Name: stream_viewers stream_viewers_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_viewers
    ADD CONSTRAINT stream_viewers_pkey PRIMARY KEY (id);


--
-- Name: stream_viewers stream_viewers_stream_id_viewer_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_viewers
    ADD CONSTRAINT stream_viewers_stream_id_viewer_id_key UNIQUE (stream_id, viewer_id);


--
-- Name: student_hints student_hints_lesson_id_user_id_hint_text_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.student_hints
    ADD CONSTRAINT student_hints_lesson_id_user_id_hint_text_key UNIQUE (lesson_id, user_id, hint_text);


--
-- Name: student_hints student_hints_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.student_hints
    ADD CONSTRAINT student_hints_pkey PRIMARY KEY (hint_id);


--
-- Name: submissions submissions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.submissions
    ADD CONSTRAINT submissions_pkey PRIMARY KEY (id);


--
-- Name: survey_questions survey_questions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.survey_questions
    ADD CONSTRAINT survey_questions_pkey PRIMARY KEY (id);


--
-- Name: survey_responses survey_responses_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.survey_responses
    ADD CONSTRAINT survey_responses_pkey PRIMARY KEY (id);


--
-- Name: survey_responses survey_responses_profile_id_question_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.survey_responses
    ADD CONSTRAINT survey_responses_profile_id_question_id_key UNIQUE (profile_id, question_id);


--
-- Name: swipe_history swipe_history_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.swipe_history
    ADD CONSTRAINT swipe_history_pkey PRIMARY KEY (id);


--
-- Name: telemetry_aggregates telemetry_aggregates_install_id_date_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_aggregates
    ADD CONSTRAINT telemetry_aggregates_install_id_date_key UNIQUE (install_id, date);


--
-- Name: telemetry_aggregates telemetry_aggregates_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_aggregates
    ADD CONSTRAINT telemetry_aggregates_pkey PRIMARY KEY (aggregate_id);


--
-- Name: telemetry_errors telemetry_errors_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_errors
    ADD CONSTRAINT telemetry_errors_pkey PRIMARY KEY (error_id);


--
-- Name: telemetry_events telemetry_events_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_events
    ADD CONSTRAINT telemetry_events_pkey PRIMARY KEY (event_id);


--
-- Name: telemetry_features telemetry_features_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_features
    ADD CONSTRAINT telemetry_features_pkey PRIMARY KEY (feature_id);


--
-- Name: telemetry_performance telemetry_performance_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_performance
    ADD CONSTRAINT telemetry_performance_pkey PRIMARY KEY (performance_id);


--
-- Name: telemetry_sessions telemetry_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.telemetry_sessions
    ADD CONSTRAINT telemetry_sessions_pkey PRIMARY KEY (session_id);


--
-- Name: tenant_api_keys tenant_api_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.tenant_api_keys
    ADD CONSTRAINT tenant_api_keys_pkey PRIMARY KEY (id);


--
-- Name: tenant_api_keys tenant_api_keys_tenant_id_provider_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.tenant_api_keys
    ADD CONSTRAINT tenant_api_keys_tenant_id_provider_key UNIQUE (tenant_id, provider);


--
-- Name: todo_archives todo_archives_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_archives
    ADD CONSTRAINT todo_archives_pkey PRIMARY KEY (id);


--
-- Name: todo_dependencies todo_dependencies_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_dependencies
    ADD CONSTRAINT todo_dependencies_pkey PRIMARY KEY (id);


--
-- Name: todo_dependencies todo_dependencies_todo_id_depends_on_todo_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_dependencies
    ADD CONSTRAINT todo_dependencies_todo_id_depends_on_todo_id_key UNIQUE (todo_id, depends_on_todo_id);


--
-- Name: trademark_info trademark_info_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.trademark_info
    ADD CONSTRAINT trademark_info_pkey PRIMARY KEY (trademark_id);


--
-- Name: training_task_assignments training_task_assignments_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_assignments
    ADD CONSTRAINT training_task_assignments_pkey PRIMARY KEY (id);


--
-- Name: training_task_leaderboard training_task_leaderboard_period_type_period_start_user_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_leaderboard
    ADD CONSTRAINT training_task_leaderboard_period_type_period_start_user_id_key UNIQUE (period_type, period_start, user_id);


--
-- Name: training_task_leaderboard training_task_leaderboard_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_leaderboard
    ADD CONSTRAINT training_task_leaderboard_pkey PRIMARY KEY (id);


--
-- Name: training_task_streaks training_task_streaks_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_streaks
    ADD CONSTRAINT training_task_streaks_pkey PRIMARY KEY (id);


--
-- Name: training_task_streaks training_task_streaks_user_id_task_type_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_streaks
    ADD CONSTRAINT training_task_streaks_user_id_task_type_key UNIQUE (user_id, task_type);


--
-- Name: training_task_types training_task_types_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_types
    ADD CONSTRAINT training_task_types_pkey PRIMARY KEY (task_type);


--
-- Name: training_tasks training_tasks_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_tasks
    ADD CONSTRAINT training_tasks_pkey PRIMARY KEY (id);


--
-- Name: translation_cache translation_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.translation_cache
    ADD CONSTRAINT translation_cache_pkey PRIMARY KEY (id);


--
-- Name: translation_cache translation_cache_source_text_source_lang_target_lang_conte_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.translation_cache
    ADD CONSTRAINT translation_cache_source_text_source_lang_target_lang_conte_key UNIQUE (source_text, source_lang, target_lang, context);


--
-- Name: translation_stats translation_stats_date_language_pair_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.translation_stats
    ADD CONSTRAINT translation_stats_date_language_pair_key UNIQUE (date, language_pair);


--
-- Name: translation_stats translation_stats_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.translation_stats
    ADD CONSTRAINT translation_stats_pkey PRIMARY KEY (id);


--
-- Name: trash_bin trash_bin_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.trash_bin
    ADD CONSTRAINT trash_bin_pkey PRIMARY KEY (id);


--
-- Name: tree_node_completions tree_node_completions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.tree_node_completions
    ADD CONSTRAINT tree_node_completions_pkey PRIMARY KEY (id);


--
-- Name: tree_node_completions tree_node_completions_user_id_tree_id_node_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.tree_node_completions
    ADD CONSTRAINT tree_node_completions_user_id_tree_id_node_id_key UNIQUE (user_id, tree_id, node_id);


--
-- Name: tree_node_visits tree_node_visits_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.tree_node_visits
    ADD CONSTRAINT tree_node_visits_pkey PRIMARY KEY (id);


--
-- Name: elo_user_votes unique_session_matchup_24h; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_user_votes
    ADD CONSTRAINT unique_session_matchup_24h UNIQUE (session_id, item_a_id, item_b_id);


--
-- Name: gmail_webhook_configs unique_user_email; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_webhook_configs
    ADD CONSTRAINT unique_user_email UNIQUE (user_id, email_address);


--
-- Name: elo_user_votes unique_user_matchup_24h; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_user_votes
    ADD CONSTRAINT unique_user_matchup_24h UNIQUE (user_id, item_a_id, item_b_id);


--
-- Name: gmail_send_as_aliases unique_user_send_as_email; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.gmail_send_as_aliases
    ADD CONSTRAINT unique_user_send_as_email UNIQUE (user_id, send_as_email);


--
-- Name: url_fetch_queue url_fetch_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.url_fetch_queue
    ADD CONSTRAINT url_fetch_queue_pkey PRIMARY KEY (id);


--
-- Name: url_index url_index_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.url_index
    ADD CONSTRAINT url_index_pkey PRIMARY KEY (id);


--
-- Name: url_index url_index_url_hash_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.url_index
    ADD CONSTRAINT url_index_url_hash_key UNIQUE (url_hash);


--
-- Name: url_index url_index_url_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.url_index
    ADD CONSTRAINT url_index_url_key UNIQUE (url);


--
-- Name: user_achievements user_achievements_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_achievements
    ADD CONSTRAINT user_achievements_pkey PRIMARY KEY (user_achievement_id);


--
-- Name: user_achievements user_achievements_user_id_achievement_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_achievements
    ADD CONSTRAINT user_achievements_user_id_achievement_id_key UNIQUE (user_id, achievement_id);


--
-- Name: user_api_keys user_api_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_api_keys
    ADD CONSTRAINT user_api_keys_pkey PRIMARY KEY (id);


--
-- Name: user_api_keys user_api_keys_user_id_provider_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_api_keys
    ADD CONSTRAINT user_api_keys_user_id_provider_key UNIQUE (user_id, provider);


--
-- Name: user_devices user_devices_device_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_devices
    ADD CONSTRAINT user_devices_device_id_key UNIQUE (device_id);


--
-- Name: user_devices user_devices_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_devices
    ADD CONSTRAINT user_devices_pkey PRIMARY KEY (id);


--
-- Name: user_followers user_followers_follower_id_followee_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_followers
    ADD CONSTRAINT user_followers_follower_id_followee_id_key UNIQUE (follower_id, followee_id);


--
-- Name: user_followers user_followers_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_followers
    ADD CONSTRAINT user_followers_pkey PRIMARY KEY (id);


--
-- Name: user_goals user_goals_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_goals
    ADD CONSTRAINT user_goals_pkey PRIMARY KEY (id);


--
-- Name: user_goals user_goals_user_id_goal_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_goals
    ADD CONSTRAINT user_goals_user_id_goal_key UNIQUE (user_id, goal);


--
-- Name: user_installed_apps user_installed_apps_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_installed_apps
    ADD CONSTRAINT user_installed_apps_pkey PRIMARY KEY (app_id);


--
-- Name: user_installed_apps user_installed_apps_subdomain_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_installed_apps
    ADD CONSTRAINT user_installed_apps_subdomain_key UNIQUE (subdomain);


--
-- Name: user_installed_apps user_installed_apps_user_id_template_id_status_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_installed_apps
    ADD CONSTRAINT user_installed_apps_user_id_template_id_status_key UNIQUE (user_id, template_id, status);


--
-- Name: user_interactions user_interactions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_interactions
    ADD CONSTRAINT user_interactions_pkey PRIMARY KEY (id);


--
-- Name: user_language_preferences user_language_preferences_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_language_preferences
    ADD CONSTRAINT user_language_preferences_pkey PRIMARY KEY (id);


--
-- Name: user_model_preferences user_model_preferences_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_model_preferences
    ADD CONSTRAINT user_model_preferences_pkey PRIMARY KEY (id);


--
-- Name: user_model_preferences user_model_preferences_user_id_model_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_model_preferences
    ADD CONSTRAINT user_model_preferences_user_id_model_id_key UNIQUE (user_id, model_id);


--
-- Name: user_playstyles user_playstyles_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_playstyles
    ADD CONSTRAINT user_playstyles_pkey PRIMARY KEY (user_id);


--
-- Name: user_preferences user_preferences_key_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_preferences
    ADD CONSTRAINT user_preferences_key_key UNIQUE (key);


--
-- Name: user_preferences user_preferences_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_preferences
    ADD CONSTRAINT user_preferences_pkey PRIMARY KEY (id);


--
-- Name: user_profiles user_profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_profiles
    ADD CONSTRAINT user_profiles_pkey PRIMARY KEY (id);


--
-- Name: user_profiles user_profiles_session_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_profiles
    ADD CONSTRAINT user_profiles_session_id_key UNIQUE (session_id);


--
-- Name: user_progress user_progress_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_progress
    ADD CONSTRAINT user_progress_pkey PRIMARY KEY (progress_id);


--
-- Name: user_progress user_progress_user_id_path_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_progress
    ADD CONSTRAINT user_progress_user_id_path_id_key UNIQUE (user_id, path_id);


--
-- Name: user_reputation user_reputation_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_reputation
    ADD CONSTRAINT user_reputation_pkey PRIMARY KEY (user_id);


--
-- Name: user_tree_progress user_tree_progress_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_tree_progress
    ADD CONSTRAINT user_tree_progress_pkey PRIMARY KEY (user_id, tree_id);


--
-- Name: users users_email_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_email_key UNIQUE (email);


--
-- Name: users users_handle_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_handle_key UNIQUE (handle);


--
-- Name: users users_handle_lowercase_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_handle_lowercase_key UNIQUE (handle_lowercase);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: vendored_packages vendored_packages_package_name_package_version_package_type_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.vendored_packages
    ADD CONSTRAINT vendored_packages_package_name_package_version_package_type_key UNIQUE (package_name, package_version, package_type);


--
-- Name: vendored_packages vendored_packages_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.vendored_packages
    ADD CONSTRAINT vendored_packages_pkey PRIMARY KEY (id);


--
-- Name: virtual_files virtual_files_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_files
    ADD CONSTRAINT virtual_files_pkey PRIMARY KEY (id);


--
-- Name: virtual_files virtual_files_user_id_folder_id_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_files
    ADD CONSTRAINT virtual_files_user_id_folder_id_name_key UNIQUE (user_id, folder_id, name);


--
-- Name: virtual_files virtual_files_user_id_path_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_files
    ADD CONSTRAINT virtual_files_user_id_path_key UNIQUE (user_id, path);


--
-- Name: virtual_folders virtual_folders_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_folders
    ADD CONSTRAINT virtual_folders_pkey PRIMARY KEY (id);


--
-- Name: virtual_folders virtual_folders_user_id_parent_id_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_folders
    ADD CONSTRAINT virtual_folders_user_id_parent_id_name_key UNIQUE (user_id, parent_id, name);


--
-- Name: virtual_folders virtual_folders_user_id_path_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_folders
    ADD CONSTRAINT virtual_folders_user_id_path_key UNIQUE (user_id, path);


--
-- Name: visit_sessions visit_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visit_sessions
    ADD CONSTRAINT visit_sessions_pkey PRIMARY KEY (id);


--
-- Name: visit_sessions visit_sessions_session_id_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visit_sessions
    ADD CONSTRAINT visit_sessions_session_id_key UNIQUE (session_id);


--
-- Name: visual_effects visual_effects_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visual_effects
    ADD CONSTRAINT visual_effects_name_key UNIQUE (name);


--
-- Name: visual_effects visual_effects_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visual_effects
    ADD CONSTRAINT visual_effects_pkey PRIMARY KEY (id);


--
-- Name: visual_themes visual_themes_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visual_themes
    ADD CONSTRAINT visual_themes_name_key UNIQUE (name);


--
-- Name: visual_themes visual_themes_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visual_themes
    ADD CONSTRAINT visual_themes_pkey PRIMARY KEY (id);


--
-- Name: webhook_deliveries webhook_deliveries_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_deliveries
    ADD CONSTRAINT webhook_deliveries_pkey PRIMARY KEY (id);


--
-- Name: webhook_endpoints webhook_endpoints_endpoint_name_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_endpoints
    ADD CONSTRAINT webhook_endpoints_endpoint_name_key UNIQUE (endpoint_name);


--
-- Name: webhook_endpoints webhook_endpoints_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_endpoints
    ADD CONSTRAINT webhook_endpoints_pkey PRIMARY KEY (id);


--
-- Name: webhook_events webhook_events_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_events
    ADD CONSTRAINT webhook_events_pkey PRIMARY KEY (id);


--
-- Name: webhooks webhooks_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhooks
    ADD CONSTRAINT webhooks_pkey PRIMARY KEY (id);


--
-- Name: wrapper_performance wrapper_performance_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.wrapper_performance
    ADD CONSTRAINT wrapper_performance_pkey PRIMARY KEY (id);


--
-- Name: wrapper_performance wrapper_performance_wrapper_name_domain_user_profile_date_key; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.wrapper_performance
    ADD CONSTRAINT wrapper_performance_wrapper_name_domain_user_profile_date_key UNIQUE (wrapper_name, domain, user_profile, date);


--
-- Name: wrapper_usage_samples wrapper_usage_samples_pkey; Type: CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.wrapper_usage_samples
    ADD CONSTRAINT wrapper_usage_samples_pkey PRIMARY KEY (id);


--
-- Name: game_lore_bot_posts_domain_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_bot_posts_domain_idx ON public.brand_bot_posts USING btree (domain);


--
-- Name: game_lore_bot_posts_engagement_score_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_bot_posts_engagement_score_idx ON public.brand_bot_posts USING btree (engagement_score);


--
-- Name: game_lore_bot_posts_game_id_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_bot_posts_game_id_idx ON public.brand_bot_posts USING btree (domain_id);


--
-- Name: game_lore_bot_posts_posted_at_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_bot_posts_posted_at_idx ON public.brand_bot_posts USING btree (posted_at);


--
-- Name: game_lore_bot_posts_thread_id_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_bot_posts_thread_id_idx ON public.brand_bot_posts USING btree (thread_id);


--
-- Name: game_lore_characters_active_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_characters_active_idx ON public.brand_personas USING btree (active);


--
-- Name: game_lore_characters_game_id_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_characters_game_id_idx ON public.brand_personas USING btree (domain_id);


--
-- Name: game_lore_characters_role_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_characters_role_idx ON public.brand_personas USING btree (role);


--
-- Name: game_lore_characters_slug_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_characters_slug_idx ON public.brand_personas USING btree (slug);


--
-- Name: game_lore_discussion_templates_active_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_discussion_templates_active_idx ON public.brand_discussion_templates USING btree (active);


--
-- Name: game_lore_discussion_templates_slug_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_discussion_templates_slug_idx ON public.brand_discussion_templates USING btree (slug);


--
-- Name: game_lore_discussion_templates_template_type_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_discussion_templates_template_type_idx ON public.brand_discussion_templates USING btree (template_type);


--
-- Name: game_lore_events_active_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_events_active_idx ON public.brand_milestones USING btree (active);


--
-- Name: game_lore_events_event_type_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_events_event_type_idx ON public.brand_milestones USING btree (milestone_type);


--
-- Name: game_lore_events_game_id_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_events_game_id_idx ON public.brand_milestones USING btree (domain_id);


--
-- Name: game_lore_events_slug_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_events_slug_idx ON public.brand_milestones USING btree (slug);


--
-- Name: game_lore_fragments_active_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_fragments_active_idx ON public.brand_knowledge USING btree (active);


--
-- Name: game_lore_fragments_fragment_type_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_fragments_fragment_type_idx ON public.brand_knowledge USING btree (knowledge_type);


--
-- Name: game_lore_fragments_game_id_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_fragments_game_id_idx ON public.brand_knowledge USING btree (domain_id);


--
-- Name: game_lore_fragments_slug_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_fragments_slug_idx ON public.brand_knowledge USING btree (slug);


--
-- Name: game_lore_games_active_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_games_active_idx ON public.brand_domains USING btree (active);


--
-- Name: game_lore_games_franchise_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_games_franchise_idx ON public.brand_domains USING btree (ecosystem);


--
-- Name: game_lore_games_slug_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_games_slug_idx ON public.brand_domains USING btree (slug);


--
-- Name: game_lore_locations_active_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_locations_active_idx ON public.brand_projects USING btree (active);


--
-- Name: game_lore_locations_game_id_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_locations_game_id_idx ON public.brand_projects USING btree (domain_id);


--
-- Name: game_lore_locations_location_type_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_locations_location_type_idx ON public.brand_projects USING btree (project_type);


--
-- Name: game_lore_locations_parent_location_id_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_locations_parent_location_id_idx ON public.brand_projects USING btree (parent_project_id);


--
-- Name: game_lore_locations_slug_idx; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX game_lore_locations_slug_idx ON public.brand_projects USING btree (slug);


--
-- Name: idx_ab_tests_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_ab_tests_domain ON public.parameter_ab_tests USING btree (domain_context);


--
-- Name: idx_ab_tests_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_ab_tests_status ON public.parameter_ab_tests USING btree (status);


--
-- Name: idx_access_note; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_access_note ON public.note_access_log USING btree (note_id, accessed_at DESC);


--
-- Name: idx_access_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_access_user ON public.note_access_log USING btree (user_id, accessed_at DESC);


--
-- Name: idx_achievements_path; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_achievements_path ON public.achievements USING btree (path_id);


--
-- Name: idx_achievements_rarity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_achievements_rarity ON public.achievements USING btree (rarity);


--
-- Name: idx_activities_actor; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activities_actor ON public.activitypub_activities USING btree (actor_id);


--
-- Name: idx_activities_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activities_type ON public.activitypub_activities USING btree (activity_type);


--
-- Name: idx_activity_comments_activity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activity_comments_activity ON public.activity_comments USING btree (activity_id);


--
-- Name: idx_activity_comments_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activity_comments_created ON public.activity_comments USING btree (created_at DESC);


--
-- Name: idx_activity_comments_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activity_comments_user ON public.activity_comments USING btree (user_id);


--
-- Name: idx_activity_likes_activity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activity_likes_activity ON public.activity_likes USING btree (activity_id);


--
-- Name: idx_activity_likes_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activity_likes_user ON public.activity_likes USING btree (user_id);


--
-- Name: idx_activity_reposts_activity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activity_reposts_activity ON public.activity_reposts USING btree (activity_id);


--
-- Name: idx_activity_reposts_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_activity_reposts_user ON public.activity_reposts USING btree (user_id);


--
-- Name: idx_agent_activity_agent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_agent_activity_agent ON public.agent_activity_log USING btree (agent, "timestamp" DESC);


--
-- Name: idx_agent_activity_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_agent_activity_domain ON public.agent_activity_log USING btree (origin_domain, "timestamp" DESC);


--
-- Name: idx_agent_activity_identity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_agent_activity_identity ON public.agent_activity_log USING btree (identity_id, "timestamp" DESC);


--
-- Name: idx_agent_activity_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_agent_activity_session ON public.agent_activity_log USING btree (session_id, "timestamp" DESC);


--
-- Name: idx_agent_activity_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_agent_activity_status ON public.agent_activity_log USING btree (status);


--
-- Name: idx_agent_activity_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_agent_activity_timestamp ON public.agent_activity_log USING btree ("timestamp" DESC);


--
-- Name: idx_agent_activity_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_agent_activity_user ON public.agent_activity_log USING btree (user_id, "timestamp" DESC);


--
-- Name: idx_agent_activity_uuid; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_agent_activity_uuid ON public.agent_activity_log USING btree (activity_id);


--
-- Name: idx_analytics_attribution_affiliate; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_attribution_affiliate ON public.analytics_attribution USING btree (affiliate_code);


--
-- Name: idx_analytics_attribution_conversion; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_attribution_conversion ON public.analytics_attribution USING btree (conversion_id);


--
-- Name: idx_analytics_attribution_referral; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_attribution_referral ON public.analytics_attribution USING btree (referral_code);


--
-- Name: idx_analytics_attribution_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_attribution_session ON public.analytics_attribution USING btree (session_id);


--
-- Name: idx_analytics_attribution_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_attribution_timestamp ON public.analytics_attribution USING btree ("timestamp");


--
-- Name: idx_analytics_attribution_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_attribution_user ON public.analytics_attribution USING btree (user_id);


--
-- Name: idx_analytics_conversions_affiliate; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_conversions_affiliate ON public.analytics_conversions USING btree (affiliate_code);


--
-- Name: idx_analytics_conversions_referral; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_conversions_referral ON public.analytics_conversions USING btree (referral_code);


--
-- Name: idx_analytics_conversions_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_conversions_session ON public.analytics_conversions USING btree (session_id);


--
-- Name: idx_analytics_conversions_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_conversions_timestamp ON public.analytics_conversions USING btree ("timestamp");


--
-- Name: idx_analytics_conversions_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_conversions_type ON public.analytics_conversions USING btree (conversion_type);


--
-- Name: idx_analytics_conversions_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_conversions_user ON public.analytics_conversions USING btree (user_id);


--
-- Name: idx_analytics_feature_usage_feature; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_feature_usage_feature ON public.analytics_feature_usage USING btree (feature_name);


--
-- Name: idx_analytics_feature_usage_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_feature_usage_session ON public.analytics_feature_usage USING btree (session_id);


--
-- Name: idx_analytics_feature_usage_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_feature_usage_timestamp ON public.analytics_feature_usage USING btree ("timestamp");


--
-- Name: idx_analytics_feature_usage_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_feature_usage_type ON public.analytics_feature_usage USING btree (feature_type);


--
-- Name: idx_analytics_feature_usage_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_feature_usage_user ON public.analytics_feature_usage USING btree (user_id);


--
-- Name: idx_analytics_page_views_date_range; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_page_views_date_range ON public.analytics_page_views USING btree ("timestamp", path);


--
-- Name: idx_analytics_page_views_path; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_page_views_path ON public.analytics_page_views USING btree (path);


--
-- Name: idx_analytics_page_views_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_page_views_session ON public.analytics_page_views USING btree (session_id);


--
-- Name: idx_analytics_page_views_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_page_views_timestamp ON public.analytics_page_views USING btree ("timestamp");


--
-- Name: idx_analytics_page_views_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_analytics_page_views_user ON public.analytics_page_views USING btree (user_id);


--
-- Name: idx_animation_sequences_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_animation_sequences_category ON public.animation_sequences USING btree (category);


--
-- Name: idx_animation_sequences_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_animation_sequences_name ON public.animation_sequences USING btree (name);


--
-- Name: idx_animation_sequences_sheet; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_animation_sequences_sheet ON public.animation_sequences USING btree (sheet_id);


--
-- Name: idx_anti_patterns_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_anti_patterns_category ON public.domain_anti_patterns USING btree (anti_pattern_category);


--
-- Name: idx_anti_patterns_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_anti_patterns_domain ON public.domain_anti_patterns USING btree (domain_context);


--
-- Name: idx_anti_patterns_severity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_anti_patterns_severity ON public.domain_anti_patterns USING btree (severity);


--
-- Name: idx_api_keys_app; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_api_keys_app ON public.api_keys USING btree (app_id);


--
-- Name: idx_api_keys_tenant; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_api_keys_tenant ON public.api_keys USING btree (tenant_id);


--
-- Name: idx_api_request_log_developer; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_api_request_log_developer ON public.api_request_log USING btree (developer_id, requested_at DESC);


--
-- Name: idx_api_request_log_requested; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_api_request_log_requested ON public.api_request_log USING btree (requested_at DESC);


--
-- Name: idx_api_request_log_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_api_request_log_status ON public.api_request_log USING btree (status_code);


--
-- Name: idx_api_usage_developer_hour; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_api_usage_developer_hour ON public.api_usage USING btree (developer_id, hour_bucket DESC);


--
-- Name: idx_api_usage_endpoint; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_api_usage_endpoint ON public.api_usage USING btree (endpoint);


--
-- Name: idx_app_instances_template; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_app_instances_template ON public.app_instances USING btree (template_id);


--
-- Name: idx_app_instances_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_app_instances_user ON public.app_instances USING btree (user_id);


--
-- Name: idx_app_launch_log_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_app_launch_log_user ON public.app_launch_log USING btree (user_id, last_opened_at DESC);


--
-- Name: idx_app_ratings_template; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_app_ratings_template ON public.app_ratings USING btree (template_id);


--
-- Name: idx_app_ratings_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_app_ratings_user ON public.app_ratings USING btree (user_id);


--
-- Name: idx_app_templates_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_app_templates_category ON public.app_templates USING btree (category);


--
-- Name: idx_app_templates_featured; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_app_templates_featured ON public.app_templates USING btree (featured) WHERE (featured = true);


--
-- Name: idx_app_templates_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_app_templates_status ON public.app_templates USING btree (status);


--
-- Name: idx_approvals_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_approvals_created ON public.knowledge_approvals USING btree (created_at DESC);


--
-- Name: idx_approvals_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_approvals_session ON public.knowledge_approvals USING btree (session_id);


--
-- Name: idx_approvals_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_approvals_status ON public.knowledge_approvals USING btree (status);


--
-- Name: idx_approvals_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_approvals_user ON public.knowledge_approvals USING btree (user_id);


--
-- Name: idx_arbitrage_detected_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_arbitrage_detected_at ON public.arbitrage_opportunities USING btree (detected_at DESC);


--
-- Name: idx_arbitrage_error; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_arbitrage_error ON public.arbitrage_opportunities USING btree (is_data_error, detected_at DESC);


--
-- Name: idx_arbitrage_spread; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_arbitrage_spread ON public.arbitrage_opportunities USING btree (spread_percent DESC);


--
-- Name: idx_arbitrage_symbol; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_arbitrage_symbol ON public.arbitrage_opportunities USING btree (symbol);


--
-- Name: idx_archetypes_slug; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_archetypes_slug ON public.archetypes USING btree (slug);


--
-- Name: idx_artifact_collections_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_collections_bucket ON public.artifact_collections USING btree (bucket_id);


--
-- Name: idx_artifact_collections_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_collections_domain ON public.artifact_collections USING btree (domain_context);


--
-- Name: idx_artifact_collections_slug; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_collections_slug ON public.artifact_collections USING btree (collection_slug);


--
-- Name: idx_artifact_deps_artifact; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_deps_artifact ON public.artifact_dependencies USING btree (artifact_id);


--
-- Name: idx_artifact_deps_depends; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_deps_depends ON public.artifact_dependencies USING btree (depends_on_artifact_id);


--
-- Name: idx_artifact_deps_external; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_deps_external ON public.artifact_dependencies USING btree (depends_on_external);


--
-- Name: idx_artifact_usage_artifact; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_usage_artifact ON public.artifact_usage_log USING btree (artifact_id);


--
-- Name: idx_artifact_usage_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_usage_timestamp ON public.artifact_usage_log USING btree ("timestamp" DESC);


--
-- Name: idx_artifact_usage_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_artifact_usage_user ON public.artifact_usage_log USING btree (used_by);


--
-- Name: idx_arxiv_categories; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_arxiv_categories ON public.arxiv_papers USING gin (categories);


--
-- Name: idx_arxiv_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_arxiv_id ON public.arxiv_papers USING btree (arxiv_id);


--
-- Name: idx_arxiv_published; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_arxiv_published ON public.arxiv_papers USING btree (published_date DESC);


--
-- Name: idx_assignments_experiment; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_assignments_experiment ON public.experiment_assignments USING btree (experiment_id);


--
-- Name: idx_assignments_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_assignments_user ON public.experiment_assignments USING btree (user_id);


--
-- Name: idx_assignments_variant; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_assignments_variant ON public.experiment_assignments USING btree (variant_id);


--
-- Name: idx_authorship_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_authorship_category ON public.authorship_registry USING btree (category);


--
-- Name: idx_authorship_filing_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_authorship_filing_date ON public.authorship_registry USING btree (filing_date);


--
-- Name: idx_authorship_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_authorship_hash ON public.authorship_registry USING btree (soulfra_hash);


--
-- Name: idx_authorship_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_authorship_status ON public.authorship_registry USING btree (status);


--
-- Name: idx_authorship_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_authorship_type ON public.authorship_registry USING btree (ip_type);


--
-- Name: idx_authorship_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_authorship_user ON public.authorship_registry USING btree (user_id);


--
-- Name: idx_automated_flows_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_automated_flows_category ON public.automated_flows USING btree (((metadata ->> 'category'::text)));


--
-- Name: idx_automated_flows_emoji; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_automated_flows_emoji ON public.automated_flows USING btree (((metadata ->> 'emoji'::text)));


--
-- Name: idx_automated_flows_metadata; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_automated_flows_metadata ON public.automated_flows USING gin (metadata);


--
-- Name: idx_automated_flows_trigger; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_automated_flows_trigger ON public.automated_flows USING btree (trigger);


--
-- Name: idx_autonomous_code_matches_helpful; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_code_matches_helpful ON public.autonomous_code_matches USING btree (was_helpful) WHERE (was_helpful = true);


--
-- Name: idx_autonomous_code_matches_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_code_matches_score ON public.autonomous_code_matches USING btree (match_score DESC);


--
-- Name: idx_autonomous_code_matches_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_code_matches_session ON public.autonomous_code_matches USING btree (session_id);


--
-- Name: idx_autonomous_improvements_impact; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_improvements_impact ON public.autonomous_improvements USING btree (improvement_percentage DESC NULLS LAST);


--
-- Name: idx_autonomous_improvements_implemented; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_improvements_implemented ON public.autonomous_improvements USING btree (implemented, created_at);


--
-- Name: idx_autonomous_improvements_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_improvements_type ON public.autonomous_improvements USING btree (improvement_type);


--
-- Name: idx_autonomous_patterns_action; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_patterns_action ON public.autonomous_patterns USING btree (action);


--
-- Name: idx_autonomous_patterns_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_patterns_session ON public.autonomous_patterns USING btree (session_id);


--
-- Name: idx_autonomous_patterns_similarity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_patterns_similarity ON public.autonomous_patterns USING btree (similarity_score DESC);


--
-- Name: idx_autonomous_sessions_council; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_sessions_council ON public.autonomous_sessions USING btree (council_session_id) WHERE (council_session_id IS NOT NULL);


--
-- Name: idx_autonomous_sessions_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_sessions_created_at ON public.autonomous_sessions USING btree (created_at DESC);


--
-- Name: idx_autonomous_sessions_duration; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_sessions_duration ON public.autonomous_sessions USING btree (duration_ms) WHERE (success = true);


--
-- Name: idx_autonomous_sessions_success; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_autonomous_sessions_success ON public.autonomous_sessions USING btree (success);


--
-- Name: idx_backtest_performance; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_backtest_performance ON public.backtest_results USING btree (total_return_percent DESC);


--
-- Name: idx_backtest_strategy; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_backtest_strategy ON public.backtest_results USING btree (strategy_name, executed_at DESC);


--
-- Name: idx_backtest_symbol; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_backtest_symbol ON public.backtest_results USING btree (symbol, executed_at DESC);


--
-- Name: idx_benchmarks_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_benchmarks_active ON public.model_benchmarks USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_benchmarks_family; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_benchmarks_family ON public.model_benchmarks USING btree (model_family);


--
-- Name: idx_benchmarks_fast; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_benchmarks_fast ON public.model_benchmarks USING btree (is_fast) WHERE (is_fast = true);


--
-- Name: idx_benchmarks_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_benchmarks_model ON public.model_benchmarks USING btree (model_id);


--
-- Name: idx_benchmarks_tps; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_benchmarks_tps ON public.model_benchmarks USING btree (avg_tokens_per_second DESC);


--
-- Name: idx_biometric_challenges_expires; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_biometric_challenges_expires ON public.biometric_challenges USING btree (expires_at);


--
-- Name: idx_biometric_challenges_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_biometric_challenges_user ON public.biometric_challenges USING btree (user_id);


--
-- Name: idx_biometric_credentials_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_biometric_credentials_user ON public.biometric_credentials USING btree (user_id);


--
-- Name: idx_blocked_handles_reason; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_blocked_handles_reason ON public.blocked_handles USING btree (block_reason);


--
-- Name: idx_blocked_voters_expires; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_blocked_voters_expires ON public.elo_blocked_voters USING btree (expires_at);


--
-- Name: idx_blocked_voters_type_value; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_blocked_voters_type_value ON public.elo_blocked_voters USING btree (block_type, block_value);


--
-- Name: idx_brand_ideas_profile; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_brand_ideas_profile ON public.brand_ideas USING btree (profile_id);


--
-- Name: idx_brand_ideas_viability; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_brand_ideas_viability ON public.brand_ideas USING btree (viability_score DESC);


--
-- Name: idx_bucket_artifacts_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_bucket ON public.bucket_artifacts USING btree (bucket_id);


--
-- Name: idx_bucket_artifacts_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_created ON public.bucket_artifacts USING btree (created_at DESC);


--
-- Name: idx_bucket_artifacts_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_domain ON public.bucket_artifacts USING btree (domain_context);


--
-- Name: idx_bucket_artifacts_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_hash ON public.bucket_artifacts USING btree (code_hash);


--
-- Name: idx_bucket_artifacts_language; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_language ON public.bucket_artifacts USING btree (language);


--
-- Name: idx_bucket_artifacts_parent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_parent ON public.bucket_artifacts USING btree (parent_artifact_id) WHERE (parent_artifact_id IS NOT NULL);


--
-- Name: idx_bucket_artifacts_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_status ON public.bucket_artifacts USING btree (status, is_current);


--
-- Name: idx_bucket_artifacts_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_tags ON public.bucket_artifacts USING gin (tags);


--
-- Name: idx_bucket_artifacts_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_artifacts_type ON public.bucket_artifacts USING btree (artifact_type);


--
-- Name: idx_bucket_comments_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_comments_bucket ON public.bucket_comments USING btree (bucket_id);


--
-- Name: idx_bucket_comments_thread; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_comments_thread ON public.bucket_comments USING btree (parent_comment_id);


--
-- Name: idx_bucket_comments_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_comments_timestamp ON public.bucket_comments USING btree ("timestamp" DESC);


--
-- Name: idx_bucket_comments_version; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_comments_version ON public.bucket_comments USING btree (bucket_id, version);


--
-- Name: idx_bucket_instances_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_instances_category ON public.bucket_instances USING btree (category);


--
-- Name: idx_bucket_instances_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_instances_domain ON public.bucket_instances USING btree (domain_context);


--
-- Name: idx_bucket_instances_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_instances_status ON public.bucket_instances USING btree (status);


--
-- Name: idx_bucket_stats_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_stats_bucket ON public.bucket_database_stats USING btree (bucket_id);


--
-- Name: idx_bucket_stats_computed; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_stats_computed ON public.bucket_database_stats USING btree (computed_at DESC);


--
-- Name: idx_bucket_todos_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_todos_bucket ON public.bucket_todos USING btree (bucket_id);


--
-- Name: idx_bucket_todos_priority; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_todos_priority ON public.bucket_todos USING btree (priority DESC);


--
-- Name: idx_bucket_todos_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_todos_status ON public.bucket_todos USING btree (status);


--
-- Name: idx_bucket_todos_version; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_todos_version ON public.bucket_todos USING btree (bucket_id, version);


--
-- Name: idx_bucket_versions_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_versions_bucket ON public.bucket_versions USING btree (bucket_id);


--
-- Name: idx_bucket_versions_number; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_versions_number ON public.bucket_versions USING btree (bucket_id, version_number DESC);


--
-- Name: idx_bucket_versions_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_bucket_versions_status ON public.bucket_versions USING btree (status);


--
-- Name: idx_campaigns_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_campaigns_active ON public.ad_campaigns USING btree (status, starts_at, ends_at);


--
-- Name: idx_campaigns_advertiser; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_campaigns_advertiser ON public.ad_campaigns USING btree (advertiser_id);


--
-- Name: idx_campaigns_experiment; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_campaigns_experiment ON public.ad_campaigns USING btree (experiment_id);


--
-- Name: idx_campaigns_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_campaigns_status ON public.ad_campaigns USING btree (status);


--
-- Name: idx_campaigns_tenant; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_campaigns_tenant ON public.ad_campaigns USING btree (tenant_id);


--
-- Name: idx_campaigns_vertical; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_campaigns_vertical ON public.ad_campaigns USING btree (target_vertical);


--
-- Name: idx_candles_asset; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_candles_asset ON public.price_candles USING btree (asset_type, candle_start DESC);


--
-- Name: idx_candles_symbol_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_candles_symbol_time ON public.price_candles USING btree (symbol, timeframe, candle_start DESC);


--
-- Name: idx_candles_timeframe; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_candles_timeframe ON public.price_candles USING btree (timeframe, candle_start DESC);


--
-- Name: idx_challenges_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_challenges_created ON public.domain_challenges USING btree (created_at DESC);


--
-- Name: idx_challenges_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_challenges_status ON public.domain_challenges USING btree (status);


--
-- Name: idx_chunks_embedding; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_chunks_embedding ON public.document_chunks USING ivfflat (embedding public.vector_cosine_ops) WITH (lists='100');


--
-- Name: idx_chunks_note; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_chunks_note ON public.document_chunks USING btree (note_id);


--
-- Name: idx_code_embeddings_snippet; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_embeddings_snippet ON public.code_embeddings USING btree (snippet_id);


--
-- Name: idx_code_embeddings_vector; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_embeddings_vector ON public.code_embeddings USING ivfflat (embedding public.vector_cosine_ops) WITH (lists='100');


--
-- Name: idx_code_repos_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_repos_active ON public.code_repositories USING btree (is_active);


--
-- Name: idx_code_repos_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_repos_source ON public.code_repositories USING btree (source);


--
-- Name: idx_code_rooms_language; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_rooms_language ON public.code_rooms USING btree (primary_language);


--
-- Name: idx_code_rooms_model_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_rooms_model_status ON public.code_rooms USING btree (model_training_status);


--
-- Name: idx_code_rooms_slug; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_rooms_slug ON public.code_rooms USING btree (slug);


--
-- Name: idx_code_rooms_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_rooms_type ON public.code_rooms USING btree (room_type);


--
-- Name: idx_code_snippets_filename; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_snippets_filename ON public.code_snippets USING btree (filename);


--
-- Name: idx_code_snippets_language; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_snippets_language ON public.code_snippets USING btree (language);


--
-- Name: idx_code_snippets_repo; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_snippets_repo ON public.code_snippets USING btree (repo_id);


--
-- Name: idx_code_snippets_search; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_snippets_search ON public.code_snippets USING gin (search_vector);


--
-- Name: idx_code_snippets_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_snippets_tags ON public.code_snippets USING gin (tags);


--
-- Name: idx_code_snippets_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_snippets_type ON public.code_snippets USING btree (snippet_type);


--
-- Name: idx_code_usage_response; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_usage_response ON public.code_usage USING btree (used_in_response);


--
-- Name: idx_code_usage_snippet; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_code_usage_snippet ON public.code_usage USING btree (snippet_id, "timestamp" DESC);


--
-- Name: idx_collection_members_artifact; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_collection_members_artifact ON public.artifact_collection_members USING btree (artifact_id);


--
-- Name: idx_collection_members_collection; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_collection_members_collection ON public.artifact_collection_members USING btree (collection_id, "position");


--
-- Name: idx_compaction_results_combined_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_compaction_results_combined_score ON public.compaction_results USING btree ((((final_scores ->> 'combined'::text))::numeric) DESC NULLS LAST);


--
-- Name: idx_compaction_results_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_compaction_results_created_at ON public.compaction_results USING btree (created_at DESC);


--
-- Name: idx_compaction_results_project_title; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_compaction_results_project_title ON public.compaction_results USING btree (((project ->> 'title'::text)));


--
-- Name: idx_comparisons_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_comparisons_model ON public.model_comparisons USING btree (our_model_id);


--
-- Name: idx_comparisons_ratio; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_comparisons_ratio ON public.model_comparisons USING btree (performance_ratio DESC NULLS LAST);


--
-- Name: idx_component_relationships_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_relationships_created ON public.component_relationships USING btree (created_at);


--
-- Name: idx_component_relationships_lookup; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_relationships_lookup ON public.component_relationships USING btree (target_type, target_id, relationship_type);


--
-- Name: idx_component_relationships_request; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_relationships_request ON public.component_relationships USING btree (request_id);


--
-- Name: idx_component_relationships_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_relationships_session ON public.component_relationships USING btree (session_id);


--
-- Name: idx_component_relationships_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_relationships_source ON public.component_relationships USING btree (source_type, source_id);


--
-- Name: idx_component_relationships_target; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_relationships_target ON public.component_relationships USING btree (target_type, target_id);


--
-- Name: idx_component_relationships_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_relationships_type ON public.component_relationships USING btree (relationship_type);


--
-- Name: idx_component_relationships_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_relationships_user ON public.component_relationships USING btree (user_id);


--
-- Name: idx_component_usage_stats_lookup; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_usage_stats_lookup ON public.component_usage_stats USING btree (component_type, component_id);


--
-- Name: idx_component_usage_stats_success; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_usage_stats_success ON public.component_usage_stats USING btree (success_rate DESC);


--
-- Name: idx_component_usage_stats_uses; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_component_usage_stats_uses ON public.component_usage_stats USING btree (total_uses DESC);


--
-- Name: idx_contact_exports_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_contact_exports_created ON public.contact_exports USING btree (created_at DESC);


--
-- Name: idx_contact_exports_format; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_contact_exports_format ON public.contact_exports USING btree (export_format);


--
-- Name: idx_contact_exports_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_contact_exports_user ON public.contact_exports USING btree (user_id);


--
-- Name: idx_content_queue_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_content_queue_status ON public.content_generation_queue USING btree (status, created_at DESC);


--
-- Name: idx_context_snapshots_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_context_snapshots_bucket ON public.domain_context_snapshots USING btree (bucket_id);


--
-- Name: idx_context_snapshots_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_context_snapshots_created ON public.domain_context_snapshots USING btree (created_at DESC);


--
-- Name: idx_context_snapshots_current; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_context_snapshots_current ON public.domain_context_snapshots USING btree (is_current) WHERE (is_current = true);


--
-- Name: idx_context_snapshots_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_context_snapshots_domain ON public.domain_context_snapshots USING btree (domain_context);


--
-- Name: idx_context_snapshots_golden; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_context_snapshots_golden ON public.domain_context_snapshots USING btree (is_golden) WHERE (is_golden = true);


--
-- Name: idx_context_snapshots_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_context_snapshots_status ON public.domain_context_snapshots USING btree (status);


--
-- Name: idx_context_snapshots_tag; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_context_snapshots_tag ON public.domain_context_snapshots USING btree (snapshot_tag);


--
-- Name: idx_conversations_agent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_conversations_agent ON public.conversations USING btree (last_agent) WHERE (last_agent IS NOT NULL);


--
-- Name: idx_conversations_started; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_conversations_started ON public.conversations USING btree (started_at DESC);


--
-- Name: idx_conversations_updated; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_conversations_updated ON public.conversations USING btree (updated_at DESC);


--
-- Name: idx_correlations_strength; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_correlations_strength ON public.price_correlations USING btree (strength, abs(correlation) DESC);


--
-- Name: idx_correlations_symbols; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_correlations_symbols ON public.price_correlations USING btree (symbol1, symbol2);


--
-- Name: idx_correlations_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_correlations_time ON public.price_correlations USING btree (calculated_at DESC);


--
-- Name: idx_correlations_timeframe; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_correlations_timeframe ON public.price_correlations USING btree (timeframe, calculated_at DESC);


--
-- Name: idx_council_debates_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_debates_session ON public.council_debates USING btree (session_id, created_at);


--
-- Name: idx_council_model_stats_performance; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_model_stats_performance ON public.council_model_stats USING btree (avg_response_time_ms);


--
-- Name: idx_council_model_stats_success; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_model_stats_success ON public.council_model_stats USING btree (times_won_vote DESC);


--
-- Name: idx_council_proposals_duration; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_proposals_duration ON public.council_proposals USING btree (duration_ms) WHERE (timed_out = false);


--
-- Name: idx_council_proposals_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_proposals_model ON public.council_proposals USING btree (model_name);


--
-- Name: idx_council_proposals_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_proposals_session ON public.council_proposals USING btree (session_id, created_at);


--
-- Name: idx_council_sessions_started_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_sessions_started_at ON public.council_sessions USING btree (started_at DESC);


--
-- Name: idx_council_sessions_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_sessions_status ON public.council_sessions USING btree (status);


--
-- Name: idx_council_sessions_task_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_sessions_task_type ON public.council_sessions USING btree (task_type);


--
-- Name: idx_council_themes_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_themes_session ON public.council_themes USING btree (session_id, rank);


--
-- Name: idx_council_workflows_assigned; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_workflows_assigned ON public.council_workflows USING btree (assigned_model);


--
-- Name: idx_council_workflows_depends; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_workflows_depends ON public.council_workflows USING btree (depends_on) WHERE (depends_on IS NOT NULL);


--
-- Name: idx_council_workflows_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_workflows_session ON public.council_workflows USING btree (session_id, priority DESC);


--
-- Name: idx_council_workflows_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_council_workflows_status ON public.council_workflows USING btree (status) WHERE ((status)::text <> 'completed'::text);


--
-- Name: idx_credential_log_credential; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_credential_log_credential ON public.credential_usage_log USING btree (credential_id, "timestamp" DESC);


--
-- Name: idx_credentials_expires; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_credentials_expires ON public.service_credentials USING btree (expires_at) WHERE (expires_at IS NOT NULL);


--
-- Name: idx_credentials_service; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_credentials_service ON public.service_credentials USING btree (service_name, is_active);


--
-- Name: idx_cross_domain_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_cross_domain_session ON public.cross_domain_analytics USING btree (session_id);


--
-- Name: idx_cross_domain_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_cross_domain_source ON public.cross_domain_analytics USING btree (source_domain_id);


--
-- Name: idx_cross_domain_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_cross_domain_timestamp ON public.cross_domain_analytics USING btree ("timestamp");


--
-- Name: idx_curated_content_external_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_curated_content_external_id ON public.curated_content USING btree (external_id);


--
-- Name: idx_curated_content_published; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_curated_content_published ON public.curated_content USING btree (published_at DESC);


--
-- Name: idx_curated_content_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_curated_content_score ON public.curated_content USING btree (score DESC);


--
-- Name: idx_curated_content_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_curated_content_source ON public.curated_content USING btree (source);


--
-- Name: idx_curated_content_topics; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_curated_content_topics ON public.curated_content USING gin (to_tsvector('english'::regconfig, topics));


--
-- Name: idx_curation_configs_frequency; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_curation_configs_frequency ON public.curation_configs USING btree (frequency);


--
-- Name: idx_curation_configs_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_curation_configs_user ON public.curation_configs USING btree (user_id);


--
-- Name: idx_data_norm_game; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_data_norm_game ON public.data_normalization_log USING btree (game_id);


--
-- Name: idx_data_norm_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_data_norm_type ON public.data_normalization_log USING btree (task_type);


--
-- Name: idx_data_norm_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_data_norm_user ON public.data_normalization_log USING btree (user_id);


--
-- Name: idx_data_replicas_params; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_data_replicas_params ON public.data_replicas USING gin (params);


--
-- Name: idx_data_replicas_type_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_data_replicas_type_time ON public.data_replicas USING btree (data_type, replicated_at DESC);


--
-- Name: idx_datasets_provider; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_datasets_provider ON public.fine_tune_datasets USING btree (provider);


--
-- Name: idx_datasets_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_datasets_status ON public.fine_tune_datasets USING btree (status);


--
-- Name: idx_decision_archives_archived; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_archives_archived ON public.decision_archives USING btree (archived_at DESC);


--
-- Name: idx_decision_archives_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_archives_category ON public.decision_archives USING btree (archive_category);


--
-- Name: idx_decision_archives_decision; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_archives_decision ON public.decision_archives USING btree (decision_id);


--
-- Name: idx_decision_archives_restored; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_archives_restored ON public.decision_archives USING btree (restored_at);


--
-- Name: idx_decision_refs_decision; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_refs_decision ON public.decision_references USING btree (decision_id);


--
-- Name: idx_decision_refs_referenced; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_refs_referenced ON public.decision_references USING btree (referenced_decision_id);


--
-- Name: idx_decision_refs_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_refs_type ON public.decision_references USING btree (reference_type);


--
-- Name: idx_decision_todos_assigned; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_todos_assigned ON public.decision_todos USING btree (assigned_to);


--
-- Name: idx_decision_todos_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_todos_created ON public.decision_todos USING btree (created_at DESC);


--
-- Name: idx_decision_todos_decision; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_todos_decision ON public.decision_todos USING btree (decision_id);


--
-- Name: idx_decision_todos_due; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_todos_due ON public.decision_todos USING btree (due_date);


--
-- Name: idx_decision_todos_priority; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_todos_priority ON public.decision_todos USING btree (priority);


--
-- Name: idx_decision_todos_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_todos_status ON public.decision_todos USING btree (status);


--
-- Name: idx_decision_todos_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_todos_tags ON public.decision_todos USING gin (tags);


--
-- Name: idx_decision_versions_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_versions_created ON public.decision_versions USING btree (created_at DESC);


--
-- Name: idx_decision_versions_decision; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_versions_decision ON public.decision_versions USING btree (decision_id);


--
-- Name: idx_decision_versions_version; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decision_versions_version ON public.decision_versions USING btree (decision_id, version DESC);


--
-- Name: idx_decisions_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decisions_category ON public.decisions USING btree (category);


--
-- Name: idx_decisions_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decisions_created_at ON public.decisions USING btree (created_at DESC);


--
-- Name: idx_decisions_created_by; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decisions_created_by ON public.decisions USING btree (created_by);


--
-- Name: idx_decisions_replaced_by; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decisions_replaced_by ON public.decisions USING btree (replaced_by);


--
-- Name: idx_decisions_search; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decisions_search ON public.decisions USING gin (to_tsvector('english'::regconfig, ((title || ' '::text) || content)));


--
-- Name: idx_decisions_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decisions_status ON public.decisions USING btree (status);


--
-- Name: idx_decisions_updated_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_decisions_updated_at ON public.decisions USING btree (updated_at DESC);


--
-- Name: idx_dependency_snapshots_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_dependency_snapshots_date ON public.dependency_snapshots USING btree (created_at DESC);


--
-- Name: idx_deployments_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_deployments_bucket ON public.snapshot_deployments USING btree (bucket_id);


--
-- Name: idx_deployments_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_deployments_date ON public.snapshot_deployments USING btree (deployed_at DESC);


--
-- Name: idx_deployments_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_deployments_domain ON public.model_version_deployments USING btree (domain);


--
-- Name: idx_deployments_environment; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_deployments_environment ON public.snapshot_deployments USING btree (environment, status);


--
-- Name: idx_deployments_snapshot; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_deployments_snapshot ON public.snapshot_deployments USING btree (snapshot_id);


--
-- Name: idx_deployments_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_deployments_time ON public.model_version_deployments USING btree (deployed_at DESC);


--
-- Name: idx_deployments_version; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_deployments_version ON public.model_version_deployments USING btree (version_id);


--
-- Name: idx_developer_subscriptions_developer; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_developer_subscriptions_developer ON public.developer_subscriptions USING btree (developer_id);


--
-- Name: idx_developer_subscriptions_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_developer_subscriptions_status ON public.developer_subscriptions USING btree (status);


--
-- Name: idx_developers_api_key; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_developers_api_key ON public.developers USING btree (api_key);


--
-- Name: idx_developers_email; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_developers_email ON public.developers USING btree (email);


--
-- Name: idx_developers_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_developers_status ON public.developers USING btree (status);


--
-- Name: idx_developers_tier; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_developers_tier ON public.developers USING btree (tier);


--
-- Name: idx_discovered_models_capabilities; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_discovered_models_capabilities ON public.discovered_models USING gin (capabilities);


--
-- Name: idx_discovered_models_family; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_discovered_models_family ON public.discovered_models USING btree (family);


--
-- Name: idx_discovered_models_last_seen; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_discovered_models_last_seen ON public.discovered_models USING btree (last_seen_at DESC);


--
-- Name: idx_discovered_models_provider; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_discovered_models_provider ON public.discovered_models USING btree (provider);


--
-- Name: idx_domain_examples_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_examples_category ON public.domain_code_examples USING btree (pattern_category);


--
-- Name: idx_domain_examples_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_examples_domain ON public.domain_code_examples USING btree (domain_context);


--
-- Name: idx_domain_examples_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_examples_hash ON public.domain_code_examples USING btree (code_hash);


--
-- Name: idx_domain_examples_language; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_examples_language ON public.domain_code_examples USING btree (language);


--
-- Name: idx_domain_examples_pattern; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_examples_pattern ON public.domain_code_examples USING btree (pattern_name);


--
-- Name: idx_domain_examples_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_examples_status ON public.domain_code_examples USING btree (status, is_current);


--
-- Name: idx_domain_examples_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_examples_tags ON public.domain_code_examples USING gin (tags);


--
-- Name: idx_domain_examples_use_cases; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_examples_use_cases ON public.domain_code_examples USING gin (use_cases);


--
-- Name: idx_domain_model_params_combo; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_model_params_combo ON public.domain_model_parameters USING btree (domain_context, model_id);


--
-- Name: idx_domain_model_params_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_model_params_domain ON public.domain_model_parameters USING btree (domain_context);


--
-- Name: idx_domain_model_params_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_model_params_model ON public.domain_model_parameters USING btree (model_id);


--
-- Name: idx_domain_names_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_names_active ON public.domain_names USING btree (active);


--
-- Name: idx_domain_names_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_names_type ON public.domain_names USING btree (type);


--
-- Name: idx_domain_params_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_params_active ON public.domain_parameter_presets USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_domain_params_default; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_params_default ON public.domain_parameter_presets USING btree (is_default) WHERE (is_default = true);


--
-- Name: idx_domain_params_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_params_domain ON public.domain_parameter_presets USING btree (domain_context);


--
-- Name: idx_domain_params_slug; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_params_slug ON public.domain_parameter_presets USING btree (preset_slug);


--
-- Name: idx_domain_params_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_params_status ON public.domain_parameter_presets USING btree (status);


--
-- Name: idx_domain_portfolio_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_portfolio_category ON public.domain_portfolio USING btree (category);


--
-- Name: idx_domain_portfolio_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_portfolio_status ON public.domain_portfolio USING btree (status);


--
-- Name: idx_domain_styles_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_domain_styles_domain ON public.domain_style_guides USING btree (domain_context);


--
-- Name: idx_drift_log_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_drift_log_bucket ON public.context_drift_log USING btree (bucket_id);


--
-- Name: idx_drift_log_detected; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_drift_log_detected ON public.context_drift_log USING btree (detected_at DESC);


--
-- Name: idx_drift_log_resolved; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_drift_log_resolved ON public.context_drift_log USING btree (resolved);


--
-- Name: idx_drift_log_severity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_drift_log_severity ON public.context_drift_log USING btree (drift_severity);


--
-- Name: idx_drift_log_snapshot; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_drift_log_snapshot ON public.context_drift_log USING btree (snapshot_id);


--
-- Name: idx_drip_campaigns_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_drip_campaigns_active ON public.drip_campaigns USING btree (active);


--
-- Name: idx_drip_campaigns_path; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_drip_campaigns_path ON public.drip_campaigns USING btree (path_id);


--
-- Name: idx_drip_campaigns_trigger; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_drip_campaigns_trigger ON public.drip_campaigns USING btree (trigger_event);


--
-- Name: idx_elo_history_item; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_history_item ON public.elo_rating_history USING btree (item_id, recorded_at DESC);


--
-- Name: idx_elo_items_created_by; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_items_created_by ON public.elo_items USING btree (created_by);


--
-- Name: idx_elo_items_rank; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_items_rank ON public.elo_items USING btree (item_type, rank);


--
-- Name: idx_elo_items_rating; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_items_rating ON public.elo_items USING btree (item_type, elo_rating DESC);


--
-- Name: idx_elo_items_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_items_tags ON public.elo_items USING gin (tags);


--
-- Name: idx_elo_items_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_items_type ON public.elo_items USING btree (item_type);


--
-- Name: idx_elo_matches_item_a; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_matches_item_a ON public.elo_matches USING btree (item_a_id, matched_at DESC);


--
-- Name: idx_elo_matches_item_b; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_matches_item_b ON public.elo_matches USING btree (item_b_id, matched_at DESC);


--
-- Name: idx_elo_matches_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_matches_session ON public.elo_matches USING btree (session_id);


--
-- Name: idx_elo_matches_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_matches_type ON public.elo_matches USING btree (match_type);


--
-- Name: idx_elo_matches_winner; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_matches_winner ON public.elo_matches USING btree (winner_id);


--
-- Name: idx_elo_votes_device_fp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_votes_device_fp ON public.elo_user_votes USING btree (device_fingerprint);


--
-- Name: idx_elo_votes_ip; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_votes_ip ON public.elo_user_votes USING btree (ip_address);


--
-- Name: idx_elo_votes_session_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_votes_session_id ON public.elo_user_votes USING btree (session_id);


--
-- Name: idx_elo_votes_suspicious; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_votes_suspicious ON public.elo_user_votes USING btree (is_suspicious) WHERE (is_suspicious = true);


--
-- Name: idx_elo_votes_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_votes_user_id ON public.elo_user_votes USING btree (user_id);


--
-- Name: idx_elo_votes_voted_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_elo_votes_voted_at ON public.elo_user_votes USING btree (voted_at);


--
-- Name: idx_email_breach_detected; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_email_breach_detected ON public.email_breach_tracker USING btree (breach_detected, breach_detected_at);


--
-- Name: idx_email_breach_tag; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_email_breach_tag ON public.email_breach_tracker USING btree (service_tag);


--
-- Name: idx_email_breach_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_email_breach_user ON public.email_breach_tracker USING btree (user_id);


--
-- Name: idx_email_relay_logs_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_email_relay_logs_created_at ON public.email_relay_logs USING btree (created_at DESC);


--
-- Name: idx_email_relay_logs_gmail_message_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_email_relay_logs_gmail_message_id ON public.email_relay_logs USING btree (gmail_message_id);


--
-- Name: idx_email_relay_logs_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_email_relay_logs_status ON public.email_relay_logs USING btree (status);


--
-- Name: idx_email_relay_logs_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_email_relay_logs_user_id ON public.email_relay_logs USING btree (user_id);


--
-- Name: idx_embed_analytics_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_analytics_date ON public.embed_analytics USING btree (date);


--
-- Name: idx_embed_analytics_site_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_analytics_site_id ON public.embed_analytics USING btree (site_id);


--
-- Name: idx_embed_consents_granted_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_consents_granted_at ON public.embed_consents USING btree (granted_at);


--
-- Name: idx_embed_consents_site_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_consents_site_id ON public.embed_consents USING btree (site_id);


--
-- Name: idx_embed_consents_visitor_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_consents_visitor_id ON public.embed_consents USING btree (visitor_id);


--
-- Name: idx_embed_events_event_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_events_event_type ON public.embed_events USING btree (event_type);


--
-- Name: idx_embed_events_session_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_events_session_id ON public.embed_events USING btree (session_id);


--
-- Name: idx_embed_events_site_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_events_site_id ON public.embed_events USING btree (site_id);


--
-- Name: idx_embed_events_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_events_timestamp ON public.embed_events USING btree ("timestamp");


--
-- Name: idx_embed_events_visitor_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_events_visitor_id ON public.embed_events USING btree (visitor_id);


--
-- Name: idx_embed_sessions_converted; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sessions_converted ON public.embed_sessions USING btree (converted);


--
-- Name: idx_embed_sessions_session_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sessions_session_id ON public.embed_sessions USING btree (session_id);


--
-- Name: idx_embed_sessions_site_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sessions_site_id ON public.embed_sessions USING btree (site_id);


--
-- Name: idx_embed_sessions_started_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sessions_started_at ON public.embed_sessions USING btree (started_at);


--
-- Name: idx_embed_sessions_visitor_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sessions_visitor_id ON public.embed_sessions USING btree (visitor_id);


--
-- Name: idx_embed_sites_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sites_domain ON public.embed_sites USING btree (domain);


--
-- Name: idx_embed_sites_site_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sites_site_id ON public.embed_sites USING btree (site_id);


--
-- Name: idx_embed_sites_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sites_status ON public.embed_sites USING btree (status);


--
-- Name: idx_embed_sites_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_sites_user_id ON public.embed_sites USING btree (user_id);


--
-- Name: idx_embed_widgets_enabled; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_widgets_enabled ON public.embed_widgets USING btree (enabled);


--
-- Name: idx_embed_widgets_site_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_widgets_site_id ON public.embed_widgets USING btree (site_id);


--
-- Name: idx_embed_widgets_widget_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embed_widgets_widget_type ON public.embed_widgets USING btree (widget_type);


--
-- Name: idx_embeddings_vector; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_embeddings_vector ON public.ai_embeddings USING ivfflat (embedding public.vector_cosine_ops) WITH (lists='100');


--
-- Name: idx_equipped_items_app; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_equipped_items_app ON public.equipped_items USING btree (app_id);


--
-- Name: idx_equipped_items_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_equipped_items_user ON public.equipped_items USING btree (user_id);


--
-- Name: idx_event_log_data_gin; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_event_log_data_gin ON public.event_log USING gin (event_data);


--
-- Name: idx_event_log_event_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_event_log_event_id ON public.event_log USING btree (event_id);


--
-- Name: idx_event_log_origin; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_event_log_origin ON public.event_log USING btree (origin_instance);


--
-- Name: idx_event_log_path_gin; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_event_log_path_gin ON public.event_log USING gin (propagation_path);


--
-- Name: idx_event_log_recorded; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_event_log_recorded ON public.event_log USING btree (recorded_at DESC);


--
-- Name: idx_event_log_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_event_log_timestamp ON public.event_log USING btree ("timestamp" DESC);


--
-- Name: idx_event_log_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_event_log_type ON public.event_log USING btree (event_type);


--
-- Name: idx_events_severity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_events_severity ON public.price_events USING btree (severity, detected_at DESC);


--
-- Name: idx_events_symbol; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_events_symbol ON public.price_events USING btree (symbol, detected_at DESC);


--
-- Name: idx_events_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_events_type ON public.price_events USING btree (event_type, detected_at DESC);


--
-- Name: idx_events_unnotified; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_events_unnotified ON public.price_events USING btree (notified, detected_at DESC) WHERE (notified = false);


--
-- Name: idx_experiments_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_experiments_active ON public.experiments USING btree (status, ends_at) WHERE (status = 'active'::text);


--
-- Name: idx_experiments_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_experiments_domain ON public.experiments USING btree (domain) WHERE (domain IS NOT NULL);


--
-- Name: idx_experiments_profile; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_experiments_profile ON public.experiments USING btree (user_profile) WHERE (user_profile IS NOT NULL);


--
-- Name: idx_experiments_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_experiments_status ON public.experiments USING btree (status);


--
-- Name: idx_experiments_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_experiments_type ON public.experiments USING btree (experiment_type);


--
-- Name: idx_file_permissions_item; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_file_permissions_item ON public.file_permissions USING btree (item_type, item_id);


--
-- Name: idx_file_permissions_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_file_permissions_user ON public.file_permissions USING btree (user_id);


--
-- Name: idx_first_names_gender; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_first_names_gender ON public.first_names USING btree (gender);


--
-- Name: idx_first_names_origin; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_first_names_origin ON public.first_names USING btree (origin);


--
-- Name: idx_first_names_popularity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_first_names_popularity ON public.first_names USING btree (popularity DESC);


--
-- Name: idx_flow_executions_flow; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_flow_executions_flow ON public.flow_executions USING btree (flow_id);


--
-- Name: idx_flow_executions_started; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_flow_executions_started ON public.flow_executions USING btree (started_at DESC);


--
-- Name: idx_flow_executions_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_flow_executions_status ON public.flow_executions USING btree (status);


--
-- Name: idx_followers_actor; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_followers_actor ON public.activitypub_followers USING btree (actor_id);


--
-- Name: idx_forum_karma_total; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_karma_total ON public.forum_karma USING btree (total_karma DESC);


--
-- Name: idx_forum_karma_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_karma_user ON public.forum_karma USING btree (user_id);


--
-- Name: idx_forum_posts_author; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_posts_author ON public.forum_posts USING btree (author_id);


--
-- Name: idx_forum_posts_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_posts_created ON public.forum_posts USING btree (created_at DESC);


--
-- Name: idx_forum_posts_parent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_posts_parent ON public.forum_posts USING btree (parent_id);


--
-- Name: idx_forum_posts_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_posts_score ON public.forum_posts USING btree (score DESC);


--
-- Name: idx_forum_posts_thread; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_posts_thread ON public.forum_posts USING btree (thread_id);


--
-- Name: idx_forum_threads_activity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_threads_activity ON public.forum_threads USING btree (last_activity_at DESC);


--
-- Name: idx_forum_threads_author; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_threads_author ON public.forum_threads USING btree (author_id);


--
-- Name: idx_forum_threads_content; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_threads_content ON public.forum_threads USING btree (content_id);


--
-- Name: idx_forum_threads_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_threads_created ON public.forum_threads USING btree (created_at DESC);


--
-- Name: idx_forum_threads_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_threads_score ON public.forum_threads USING btree (score DESC);


--
-- Name: idx_forum_threads_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_threads_tags ON public.forum_threads USING gin (tags);


--
-- Name: idx_forum_votes_post; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_votes_post ON public.forum_votes USING btree (post_id);


--
-- Name: idx_forum_votes_thread; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_votes_thread ON public.forum_votes USING btree (thread_id);


--
-- Name: idx_forum_votes_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_forum_votes_user ON public.forum_votes USING btree (user_id);


--
-- Name: idx_funding_registry_package; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_funding_registry_package ON public.funding_registry USING btree (package_id);


--
-- Name: idx_funding_registry_we_fund; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_funding_registry_we_fund ON public.funding_registry USING btree (we_fund);


--
-- Name: idx_game_assets_app; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_game_assets_app ON public.game_assets USING btree (app_id);


--
-- Name: idx_gendocs_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gendocs_created ON public.generated_documents USING btree (created_at DESC);


--
-- Name: idx_gendocs_format; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gendocs_format ON public.generated_documents USING btree (format);


--
-- Name: idx_gendocs_notes; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gendocs_notes ON public.generated_documents USING gin (source_notes);


--
-- Name: idx_gendocs_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gendocs_status ON public.generated_documents USING btree (status);


--
-- Name: idx_gendocs_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gendocs_user ON public.generated_documents USING btree (user_id);


--
-- Name: idx_git_portfolio_last_synced; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_git_portfolio_last_synced ON public.git_portfolio_stats USING btree (last_synced_at);


--
-- Name: idx_git_portfolio_platform; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_git_portfolio_platform ON public.git_portfolio_stats USING btree (platform);


--
-- Name: idx_git_portfolio_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_git_portfolio_user ON public.git_portfolio_stats USING btree (user_id);


--
-- Name: idx_git_portfolio_username; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_git_portfolio_username ON public.git_portfolio_stats USING btree (username);


--
-- Name: idx_github_activity_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_github_activity_created ON public.github_activity_feed USING btree (created_at DESC);


--
-- Name: idx_github_activity_likes; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_github_activity_likes ON public.github_activity_feed USING btree (like_count DESC);


--
-- Name: idx_github_activity_trending; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_github_activity_trending ON public.github_activity_feed USING btree ((((like_count + (comment_count * 2)) + (repost_count * 3))) DESC);


--
-- Name: idx_github_activity_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_github_activity_type ON public.github_activity_feed USING btree (activity_type);


--
-- Name: idx_github_activity_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_github_activity_user ON public.github_activity_feed USING btree (user_id);


--
-- Name: idx_gmail_send_as_aliases_is_default; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_send_as_aliases_is_default ON public.gmail_send_as_aliases USING btree (is_default);


--
-- Name: idx_gmail_send_as_aliases_send_as_email; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_send_as_aliases_send_as_email ON public.gmail_send_as_aliases USING btree (send_as_email);


--
-- Name: idx_gmail_send_as_aliases_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_send_as_aliases_user_id ON public.gmail_send_as_aliases USING btree (user_id);


--
-- Name: idx_gmail_send_as_aliases_verification_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_send_as_aliases_verification_status ON public.gmail_send_as_aliases USING btree (verification_status);


--
-- Name: idx_gmail_sent_emails_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_sent_emails_created_at ON public.gmail_sent_emails USING btree (created_at DESC);


--
-- Name: idx_gmail_sent_emails_gmail_message_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_sent_emails_gmail_message_id ON public.gmail_sent_emails USING btree (gmail_message_id);


--
-- Name: idx_gmail_sent_emails_send_as_email; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_sent_emails_send_as_email ON public.gmail_sent_emails USING btree (send_as_email);


--
-- Name: idx_gmail_sent_emails_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_sent_emails_status ON public.gmail_sent_emails USING btree (status);


--
-- Name: idx_gmail_sent_emails_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_sent_emails_user_id ON public.gmail_sent_emails USING btree (user_id);


--
-- Name: idx_gmail_webhook_configs_email; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_webhook_configs_email ON public.gmail_webhook_configs USING btree (email_address);


--
-- Name: idx_gmail_webhook_configs_enabled; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_webhook_configs_enabled ON public.gmail_webhook_configs USING btree (enabled);


--
-- Name: idx_gmail_webhook_configs_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_gmail_webhook_configs_user_id ON public.gmail_webhook_configs USING btree (user_id);


--
-- Name: idx_grading_results_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_grading_results_created_at ON public.grading_results USING btree (created_at DESC);


--
-- Name: idx_grading_results_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_grading_results_score ON public.grading_results USING btree (score DESC);


--
-- Name: idx_grading_results_submission_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_grading_results_submission_id ON public.grading_results USING btree (submission_id);


--
-- Name: idx_grading_results_track; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_grading_results_track ON public.grading_results USING btree (track);


--
-- Name: idx_guardian_log_result; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_log_result ON public.guardian_log USING btree (result);


--
-- Name: idx_guardian_log_severity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_log_severity ON public.guardian_log USING btree (severity);


--
-- Name: idx_guardian_log_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_log_timestamp ON public.guardian_log USING btree ("timestamp" DESC);


--
-- Name: idx_guardian_patches_applied; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_patches_applied ON public.guardian_patch_applications USING btree (applied_at DESC);


--
-- Name: idx_guardian_patches_file; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_patches_file ON public.guardian_patch_applications USING btree (file_path);


--
-- Name: idx_guardian_patches_rollback; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_patches_rollback ON public.guardian_patch_applications USING btree (rolled_back);


--
-- Name: idx_guardian_patches_success; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_patches_success ON public.guardian_patch_applications USING btree (success);


--
-- Name: idx_guardian_reports_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_reports_created ON public.guardian_bug_reports USING btree (created_at DESC);


--
-- Name: idx_guardian_reports_file; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_reports_file ON public.guardian_bug_reports USING btree (file_path);


--
-- Name: idx_guardian_reports_service; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_reports_service ON public.guardian_bug_reports USING btree (service);


--
-- Name: idx_guardian_reports_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_guardian_reports_status ON public.guardian_bug_reports USING btree (status);


--
-- Name: idx_handle_history_handle; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_handle_history_handle ON public.handle_history USING btree (new_handle);


--
-- Name: idx_handle_history_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_handle_history_user ON public.handle_history USING btree (user_id, changed_at DESC);


--
-- Name: idx_handle_reservations_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_handle_reservations_status ON public.handle_reservations USING btree (status);


--
-- Name: idx_handle_reservations_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_handle_reservations_type ON public.handle_reservations USING btree (reservation_type);


--
-- Name: idx_health_metrics_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_health_metrics_name ON public.health_metrics USING btree (metric_name);


--
-- Name: idx_health_metrics_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_health_metrics_timestamp ON public.health_metrics USING btree ("timestamp" DESC);


--
-- Name: idx_heatmap_page; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_heatmap_page ON public.heatmap_data USING btree (page);


--
-- Name: idx_heatmap_position; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_heatmap_position ON public.heatmap_data USING btree (x_position, y_position);


--
-- Name: idx_heatmap_room; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_heatmap_room ON public.heatmap_data USING btree (room_name);


--
-- Name: idx_heatmap_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_heatmap_time ON public.heatmap_data USING btree (recorded_at DESC);


--
-- Name: idx_heatmap_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_heatmap_type ON public.heatmap_data USING btree (interaction_type);


--
-- Name: idx_hint_ratings_hint; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_hint_ratings_hint ON public.hint_ratings USING btree (hint_id);


--
-- Name: idx_hint_ratings_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_hint_ratings_user ON public.hint_ratings USING btree (user_id);


--
-- Name: idx_icon_animations_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_icon_animations_name ON public.icon_animations USING btree (name);


--
-- Name: idx_icon_animations_trigger; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_icon_animations_trigger ON public.icon_animations USING btree (trigger);


--
-- Name: idx_idea_purchases_buyer; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_idea_purchases_buyer ON public.idea_purchases USING btree (buyer_id);


--
-- Name: idx_idea_purchases_creator; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_idea_purchases_creator ON public.idea_purchases USING btree (creator_id);


--
-- Name: idx_idea_purchases_idea; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_idea_purchases_idea ON public.idea_purchases USING btree (idea_id);


--
-- Name: idx_idea_purchases_purchased; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_idea_purchases_purchased ON public.idea_purchases USING btree (purchased_at DESC);


--
-- Name: idx_idea_votes_idea; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_idea_votes_idea ON public.idea_votes USING btree (idea_id);


--
-- Name: idx_idea_votes_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_idea_votes_user ON public.idea_votes USING btree (user_id);


--
-- Name: idx_identity_res_game; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_identity_res_game ON public.identity_resolution_log USING btree (game_id);


--
-- Name: idx_identity_res_method; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_identity_res_method ON public.identity_resolution_log USING btree (discovery_method);


--
-- Name: idx_identity_res_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_identity_res_user ON public.identity_resolution_log USING btree (user_id);


--
-- Name: idx_iiif_cache_image; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_cache_image ON public.iiif_cache_stats USING btree (image_id);


--
-- Name: idx_iiif_cache_key; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_cache_key ON public.iiif_cache_stats USING btree (cache_key);


--
-- Name: idx_iiif_images_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_images_created ON public.iiif_images USING btree (created_at DESC);


--
-- Name: idx_iiif_images_filename; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_images_filename ON public.iiif_images USING btree (filename);


--
-- Name: idx_iiif_images_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_images_session ON public.iiif_images USING btree (session_id);


--
-- Name: idx_iiif_images_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_images_tags ON public.iiif_images USING gin (tags);


--
-- Name: idx_iiif_images_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_images_user ON public.iiif_images USING btree (user_id);


--
-- Name: idx_iiif_manifests_manifest_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_manifests_manifest_id ON public.iiif_manifests USING btree (manifest_id);


--
-- Name: idx_iiif_manifests_public; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_manifests_public ON public.iiif_manifests USING btree (is_public);


--
-- Name: idx_iiif_manifests_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_iiif_manifests_user ON public.iiif_manifests USING btree (user_id);


--
-- Name: idx_implementations_challenge; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_implementations_challenge ON public.domain_implementations USING btree (challenge_id);


--
-- Name: idx_implementations_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_implementations_domain ON public.domain_implementations USING btree (domain_id);


--
-- Name: idx_implementations_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_implementations_score ON public.domain_implementations USING btree (total_score DESC);


--
-- Name: idx_incentive_tracker_profile; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_incentive_tracker_profile ON public.incentive_tracker USING btree (profile_id);


--
-- Name: idx_indicators_rsi; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_indicators_rsi ON public.price_indicators USING btree (symbol, rsi_14, calculated_at DESC);


--
-- Name: idx_indicators_symbol_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_indicators_symbol_time ON public.price_indicators USING btree (symbol, timeframe, calculated_at DESC);


--
-- Name: idx_indicators_timeframe; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_indicators_timeframe ON public.price_indicators USING btree (timeframe, calculated_at DESC);


--
-- Name: idx_inventory_items_app; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_inventory_items_app ON public.inventory_items USING btree (app_id);


--
-- Name: idx_inventory_items_rarity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_inventory_items_rarity ON public.inventory_items USING btree (rarity);


--
-- Name: idx_inventory_items_stackable; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_inventory_items_stackable ON public.inventory_items USING btree (app_id, user_id, item_id) WHERE (stackable = true);


--
-- Name: idx_inventory_items_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_inventory_items_type ON public.inventory_items USING btree (item_type);


--
-- Name: idx_inventory_items_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_inventory_items_user ON public.inventory_items USING btree (user_id);


--
-- Name: idx_inventory_items_user_rarity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_inventory_items_user_rarity ON public.inventory_items USING btree (user_id, rarity);


--
-- Name: idx_inventory_items_user_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_inventory_items_user_type ON public.inventory_items USING btree (user_id, item_type);


--
-- Name: idx_job_log_job; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_job_log_job ON public.job_execution_log USING btree (job_id, started_at DESC);


--
-- Name: idx_judgments_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_judgments_date ON public.domain_judgments USING btree (judged_at DESC);


--
-- Name: idx_judgments_implementation; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_judgments_implementation ON public.domain_judgments USING btree (implementation_id);


--
-- Name: idx_judgments_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_judgments_session ON public.domain_judgments USING btree (session_id);


--
-- Name: idx_karma_transactions_action; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_karma_transactions_action ON public.karma_transactions USING btree (action_type);


--
-- Name: idx_karma_transactions_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_karma_transactions_created ON public.karma_transactions USING btree (created_at DESC);


--
-- Name: idx_karma_transactions_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_karma_transactions_user ON public.karma_transactions USING btree (user_id);


--
-- Name: idx_kchats_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kchats_created ON public.knowledge_chats USING btree (created_at DESC);


--
-- Name: idx_kchats_notes; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kchats_notes ON public.knowledge_chats USING gin (source_notes);


--
-- Name: idx_kchats_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kchats_session ON public.knowledge_chats USING btree (session_id);


--
-- Name: idx_keyword_tracking_keyword; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_keyword_tracking_keyword ON public.keyword_tracking USING btree (keyword);


--
-- Name: idx_knowledge_graph_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_knowledge_graph_source ON public.domain_knowledge_graph USING btree (source_type, source_id);


--
-- Name: idx_knowledge_graph_target; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_knowledge_graph_target ON public.domain_knowledge_graph USING btree (target_type, target_id);


--
-- Name: idx_knowledge_graph_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_knowledge_graph_type ON public.domain_knowledge_graph USING btree (relationship_type);


--
-- Name: idx_kpatterns_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_category ON public.knowledge_patterns USING btree (category);


--
-- Name: idx_kpatterns_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_created ON public.knowledge_patterns USING btree (created_at DESC);


--
-- Name: idx_kpatterns_keywords; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_keywords ON public.knowledge_patterns USING gin (keywords);


--
-- Name: idx_kpatterns_last_seen; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_last_seen ON public.knowledge_patterns USING btree (last_seen_at DESC);


--
-- Name: idx_kpatterns_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_name ON public.knowledge_patterns USING btree (pattern_name);


--
-- Name: idx_kpatterns_occurrence; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_occurrence ON public.knowledge_patterns USING btree (occurrence_count DESC);


--
-- Name: idx_kpatterns_search; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_search ON public.knowledge_patterns USING gin (to_tsvector('english'::regconfig, ((problem_description || ' '::text) || solution_description)));


--
-- Name: idx_kpatterns_severity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_severity ON public.knowledge_patterns USING btree (severity);


--
-- Name: idx_kpatterns_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_kpatterns_type ON public.knowledge_patterns USING btree (pattern_type);


--
-- Name: idx_last_names_frequency; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_last_names_frequency ON public.last_names USING btree (frequency DESC);


--
-- Name: idx_last_names_origin; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_last_names_origin ON public.last_names USING btree (origin);


--
-- Name: idx_launcher_apps_folder; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_launcher_apps_folder ON public.launcher_apps USING btree (folder_id);


--
-- Name: idx_launcher_apps_position; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_launcher_apps_position ON public.launcher_apps USING btree (user_id, folder_id, "position");


--
-- Name: idx_launcher_apps_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_launcher_apps_user ON public.launcher_apps USING btree (user_id);


--
-- Name: idx_launcher_apps_user_folder; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_launcher_apps_user_folder ON public.launcher_apps USING btree (user_id, folder_id, "position");


--
-- Name: idx_launcher_folders_position; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_launcher_folders_position ON public.launcher_folders USING btree (user_id, "position");


--
-- Name: idx_launcher_folders_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_launcher_folders_user ON public.launcher_folders USING btree (user_id);


--
-- Name: idx_learning_paths_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_learning_paths_domain ON public.learning_paths USING btree (domain_id);


--
-- Name: idx_learning_paths_slug; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_learning_paths_slug ON public.learning_paths USING btree (path_slug);


--
-- Name: idx_learning_paths_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_learning_paths_status ON public.learning_paths USING btree (status);


--
-- Name: idx_lesson_completions_lesson; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lesson_completions_lesson ON public.lesson_completions USING btree (lesson_id);


--
-- Name: idx_lesson_completions_progress; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lesson_completions_progress ON public.lesson_completions USING btree (progress_id);


--
-- Name: idx_lesson_completions_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lesson_completions_user ON public.lesson_completions USING btree (user_id);


--
-- Name: idx_lessons_number; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lessons_number ON public.lessons USING btree (path_id, lesson_number);


--
-- Name: idx_lessons_path; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lessons_path ON public.lessons USING btree (path_id);


--
-- Name: idx_lessons_requires; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lessons_requires ON public.lessons USING btree (requires_lesson_id);


--
-- Name: idx_lifecycle_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lifecycle_bucket ON public.request_lifecycle USING btree (bucket_id) WHERE (bucket_id IS NOT NULL);


--
-- Name: idx_lifecycle_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lifecycle_created ON public.request_lifecycle USING btree (created_at DESC);


--
-- Name: idx_lifecycle_deadline; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lifecycle_deadline ON public.request_lifecycle USING btree (deadline_at) WHERE (state = ANY (ARRAY['pending'::text, 'running'::text]));


--
-- Name: idx_lifecycle_parent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lifecycle_parent ON public.request_lifecycle USING btree (parent_request_id) WHERE (parent_request_id IS NOT NULL);


--
-- Name: idx_lifecycle_request_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lifecycle_request_id ON public.request_lifecycle USING btree (request_id);


--
-- Name: idx_lifecycle_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lifecycle_session ON public.request_lifecycle USING btree (session_id) WHERE (session_id IS NOT NULL);


--
-- Name: idx_lifecycle_state; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lifecycle_state ON public.request_lifecycle USING btree (state);


--
-- Name: idx_lifecycle_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lifecycle_user ON public.request_lifecycle USING btree (user_id) WHERE (user_id IS NOT NULL);


--
-- Name: idx_lock_files_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lock_files_hash ON public.context_lock_files USING btree (lock_hash);


--
-- Name: idx_lock_files_snapshot; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_lock_files_snapshot ON public.context_lock_files USING btree (snapshot_id);


--
-- Name: idx_marketplace_ideas_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_marketplace_ideas_category ON public.marketplace_ideas USING btree (category);


--
-- Name: idx_marketplace_ideas_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_marketplace_ideas_created ON public.marketplace_ideas USING btree (created_at DESC);


--
-- Name: idx_marketplace_ideas_creator; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_marketplace_ideas_creator ON public.marketplace_ideas USING btree (creator_id);


--
-- Name: idx_marketplace_ideas_purchases; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_marketplace_ideas_purchases ON public.marketplace_ideas USING btree (purchase_count DESC);


--
-- Name: idx_marketplace_ideas_search; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_marketplace_ideas_search ON public.marketplace_ideas USING gin (to_tsvector('english'::regconfig, ((title || ' '::text) || description)));


--
-- Name: idx_marketplace_ideas_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_marketplace_ideas_status ON public.marketplace_ideas USING btree (status);


--
-- Name: idx_marketplace_ideas_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_marketplace_ideas_tags ON public.marketplace_ideas USING gin (tags);


--
-- Name: idx_marketplace_ideas_votes; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_marketplace_ideas_votes ON public.marketplace_ideas USING btree (vote_count DESC);


--
-- Name: idx_measurements_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_measurements_date ON public.benchmark_measurements USING btree (measured_at DESC);


--
-- Name: idx_measurements_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_measurements_model ON public.benchmark_measurements USING btree (model_id);


--
-- Name: idx_measurements_tps; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_measurements_tps ON public.benchmark_measurements USING btree (tokens_per_second DESC);


--
-- Name: idx_message_agent_routing_agent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_message_agent_routing_agent ON public.message_agent_routing USING btree (agent_id);


--
-- Name: idx_message_agent_routing_message; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_message_agent_routing_message ON public.message_agent_routing USING btree (message_id);


--
-- Name: idx_message_agent_routing_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_message_agent_routing_type ON public.message_agent_routing USING btree (agent_type);


--
-- Name: idx_message_slack_routing_message; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_message_slack_routing_message ON public.message_slack_routing USING btree (message_id);


--
-- Name: idx_message_slack_routing_slack; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_message_slack_routing_slack ON public.message_slack_routing USING btree (slack_message_ts);


--
-- Name: idx_metrics_agent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_metrics_agent ON public.agent_metrics USING btree (agent_id, "timestamp" DESC);


--
-- Name: idx_metrics_response; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_metrics_response ON public.agent_metrics USING btree (response_id) WHERE (response_id IS NOT NULL);


--
-- Name: idx_metrics_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_metrics_timestamp ON public.agent_metrics USING btree ("timestamp" DESC);


--
-- Name: idx_metrics_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_metrics_type ON public.agent_metrics USING btree (metric_type);


--
-- Name: idx_migration_executed; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_migration_executed ON public.migration_history USING btree (executed_at);


--
-- Name: idx_migration_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_migration_name ON public.migration_history USING btree (migration_name);


--
-- Name: idx_mini_games_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_mini_games_date ON public.mini_games USING btree (available_date DESC);


--
-- Name: idx_mini_games_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_mini_games_domain ON public.mini_games USING btree (domain_id);


--
-- Name: idx_mini_games_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_mini_games_type ON public.mini_games USING btree (game_type);


--
-- Name: idx_model_performance_latency; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_performance_latency ON public.model_performance USING btree (avg_latency_ms);


--
-- Name: idx_model_performance_provider; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_performance_provider ON public.model_performance USING btree (provider, model_name, measured_at DESC);


--
-- Name: idx_model_pricing_cost; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_pricing_cost ON public.model_pricing USING btree (input_price_per_1k, output_price_per_1k);


--
-- Name: idx_model_pricing_provider; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_pricing_provider ON public.model_pricing USING btree (provider, fetched_at DESC);


--
-- Name: idx_model_pricing_quality; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_pricing_quality ON public.model_pricing USING btree (quality_score DESC);


--
-- Name: idx_model_recs_recommended; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_recs_recommended ON public.model_recommendations USING btree (recommended_provider, recommended_model);


--
-- Name: idx_model_recs_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_recs_session ON public.model_recommendations USING btree (session_id, created_at DESC);


--
-- Name: idx_model_recs_tenant; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_recs_tenant ON public.model_recommendations USING btree (tenant_id, created_at DESC);


--
-- Name: idx_model_recs_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_recs_user ON public.model_recommendations USING btree (user_id, created_at DESC);


--
-- Name: idx_model_versions_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_versions_active ON public.model_versions USING btree (domain, status) WHERE (status = 'active'::text);


--
-- Name: idx_model_versions_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_versions_domain ON public.model_versions USING btree (domain);


--
-- Name: idx_model_versions_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_model_versions_status ON public.model_versions USING btree (status);


--
-- Name: idx_newsletter_log_delivered; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_newsletter_log_delivered ON public.newsletter_delivery_log USING btree (delivered_at DESC);


--
-- Name: idx_newsletter_log_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_newsletter_log_status ON public.newsletter_delivery_log USING btree (status);


--
-- Name: idx_newsletter_log_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_newsletter_log_user ON public.newsletter_delivery_log USING btree (user_id);


--
-- Name: idx_note_rels_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_note_rels_source ON public.note_relationships USING btree (source_note_id);


--
-- Name: idx_note_rels_target; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_note_rels_target ON public.note_relationships USING btree (target_note_id);


--
-- Name: idx_note_rels_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_note_rels_type ON public.note_relationships USING btree (relationship_type);


--
-- Name: idx_notes_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_category ON public.notes USING btree (category);


--
-- Name: idx_notes_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_created ON public.notes USING btree (created_at DESC);


--
-- Name: idx_notes_embedding; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_embedding ON public.notes USING ivfflat (embedding public.vector_cosine_ops) WITH (lists='100');


--
-- Name: idx_notes_search; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_search ON public.notes USING gin (to_tsvector('english'::regconfig, (((title)::text || ' '::text) || content)));


--
-- Name: idx_notes_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_session ON public.notes USING btree (session_id);


--
-- Name: idx_notes_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_source ON public.notes USING btree (source);


--
-- Name: idx_notes_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_status ON public.notes USING btree (status);


--
-- Name: idx_notes_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_tags ON public.notes USING gin (tags);


--
-- Name: idx_notes_updated; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_updated ON public.notes USING btree (updated_at DESC);


--
-- Name: idx_notes_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notes_user ON public.notes USING btree (user_id);


--
-- Name: idx_notifications_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notifications_status ON public.content_notifications USING btree (status, created_at DESC);


--
-- Name: idx_notifications_subscriber; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_notifications_subscriber ON public.content_notifications USING btree (subscriber_id);


--
-- Name: idx_outbox_object; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_outbox_object ON public.activitypub_outbox USING btree (object_id);


--
-- Name: idx_package_dependencies_child; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_dependencies_child ON public.package_dependencies USING btree (child_package_name);


--
-- Name: idx_package_dependencies_depth; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_dependencies_depth ON public.package_dependencies USING btree (depth_level);


--
-- Name: idx_package_dependencies_parent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_dependencies_parent ON public.package_dependencies USING btree (parent_package_id);


--
-- Name: idx_package_intelligence_leftpad; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_intelligence_leftpad ON public.package_intelligence USING btree (leftpad_risk_score DESC);


--
-- Name: idx_package_intelligence_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_intelligence_score ON public.package_intelligence USING btree (intelligence_score DESC);


--
-- Name: idx_package_intelligence_security; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_intelligence_security ON public.package_intelligence USING btree (security_score DESC);


--
-- Name: idx_package_usage_log_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_usage_log_date ON public.package_usage_log USING btree (used_at DESC);


--
-- Name: idx_package_usage_log_package; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_usage_log_package ON public.package_usage_log USING btree (package_id);


--
-- Name: idx_package_usage_log_used_by; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_package_usage_log_used_by ON public.package_usage_log USING btree (used_by);


--
-- Name: idx_paper_embeddings_vector; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_paper_embeddings_vector ON public.paper_embeddings USING ivfflat (embedding public.vector_cosine_ops) WITH (lists='100');


--
-- Name: idx_param_perf_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_param_perf_domain ON public.parameter_performance_log USING btree (domain_context);


--
-- Name: idx_param_perf_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_param_perf_model ON public.parameter_performance_log USING btree (model_id);


--
-- Name: idx_param_perf_preset; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_param_perf_preset ON public.parameter_performance_log USING btree (preset_id);


--
-- Name: idx_param_perf_success; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_param_perf_success ON public.parameter_performance_log USING btree (success);


--
-- Name: idx_param_perf_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_param_perf_timestamp ON public.parameter_performance_log USING btree ("timestamp" DESC);


--
-- Name: idx_partner_clicks_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_partner_clicks_session ON public.partner_clicks USING btree (session_id);


--
-- Name: idx_partner_clicks_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_partner_clicks_source ON public.partner_clicks USING btree (source_domain_id);


--
-- Name: idx_partner_clicks_target; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_partner_clicks_target ON public.partner_clicks USING btree (target_domain_id);


--
-- Name: idx_partner_rotations_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_partner_rotations_source ON public.partner_rotations USING btree (source_domain_id);


--
-- Name: idx_pattern_usage_example; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_pattern_usage_example ON public.domain_pattern_usage USING btree (example_id);


--
-- Name: idx_pattern_usage_success; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_pattern_usage_success ON public.domain_pattern_usage USING btree (success);


--
-- Name: idx_pattern_usage_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_pattern_usage_timestamp ON public.domain_pattern_usage USING btree ("timestamp" DESC);


--
-- Name: idx_phone_patterns_country; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_phone_patterns_country ON public.phone_patterns USING btree (country_code);


--
-- Name: idx_player_inventories_app; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_player_inventories_app ON public.player_inventories USING btree (app_id);


--
-- Name: idx_player_inventories_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_player_inventories_user ON public.player_inventories USING btree (user_id);


--
-- Name: idx_portfolio_analytics_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_portfolio_analytics_date ON public.portfolio_analytics USING btree (date DESC);


--
-- Name: idx_portfolio_analytics_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_portfolio_analytics_user ON public.portfolio_analytics USING btree (user_id);


--
-- Name: idx_price_alerts_symbol; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_alerts_symbol ON public.price_alerts USING btree (symbol, triggered);


--
-- Name: idx_price_alerts_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_alerts_user ON public.price_alerts USING btree (user_id, triggered);


--
-- Name: idx_price_audit_confidence; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_audit_confidence ON public.price_audit_log USING btree (confidence_score);


--
-- Name: idx_price_audit_logged_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_audit_logged_at ON public.price_audit_log USING btree (logged_at DESC);


--
-- Name: idx_price_audit_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_audit_status ON public.price_audit_log USING btree (verification_status);


--
-- Name: idx_price_audit_symbol; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_audit_symbol ON public.price_audit_log USING btree (symbol);


--
-- Name: idx_price_audit_symbol_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_audit_symbol_time ON public.price_audit_log USING btree (symbol, logged_at DESC);


--
-- Name: idx_price_cache_key; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_cache_key ON public.price_cache USING btree (cache_key);


--
-- Name: idx_price_cache_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_cache_time ON public.price_cache USING btree (cached_at DESC);


--
-- Name: idx_price_corr_asset; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_corr_asset ON public.ai_price_correlations USING btree (asset_symbol, calculated_at DESC);


--
-- Name: idx_price_corr_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_corr_model ON public.ai_price_correlations USING btree (provider, model_name, calculated_at DESC);


--
-- Name: idx_price_corr_strength; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_corr_strength ON public.ai_price_correlations USING btree (abs(correlation_coefficient) DESC);


--
-- Name: idx_price_history_symbol; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_history_symbol ON public.price_history USING btree (symbol, recorded_at DESC);


--
-- Name: idx_price_history_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_history_time ON public.price_history USING btree (recorded_at DESC);


--
-- Name: idx_price_history_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_price_history_type ON public.price_history USING btree (asset_type, recorded_at DESC);


--
-- Name: idx_profile_matches_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_matches_created ON public.profile_matches USING btree (created_at DESC);


--
-- Name: idx_profile_matches_email; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_matches_email ON public.profile_matches USING btree (email);


--
-- Name: idx_profile_matches_exported; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_matches_exported ON public.profile_matches USING btree (exported);


--
-- Name: idx_profile_matches_full_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_matches_full_name ON public.profile_matches USING btree (full_name);


--
-- Name: idx_profile_matches_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_matches_score ON public.profile_matches USING btree (match_score DESC);


--
-- Name: idx_profile_matches_search; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_matches_search ON public.profile_matches USING gin (to_tsvector('english'::regconfig, (((((first_name)::text || ' '::text) || (last_name)::text) || ' '::text) || (email)::text)));


--
-- Name: idx_profile_matches_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_matches_session ON public.profile_matches USING btree (session_id);


--
-- Name: idx_profile_matches_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_matches_user ON public.profile_matches USING btree (user_id);


--
-- Name: idx_profile_messages_from; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_messages_from ON public.profile_messages USING btree (from_user_id);


--
-- Name: idx_profile_messages_search; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_messages_search ON public.profile_messages USING gin (to_tsvector('english'::regconfig, ((subject || ' '::text) || content)));


--
-- Name: idx_profile_messages_sent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_messages_sent ON public.profile_messages USING btree (sent_at DESC);


--
-- Name: idx_profile_messages_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_messages_status ON public.profile_messages USING btree (status);


--
-- Name: idx_profile_messages_thread; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_messages_thread ON public.profile_messages USING btree (thread_id);


--
-- Name: idx_profile_messages_to; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_profile_messages_to ON public.profile_messages USING btree (to_user_id);


--
-- Name: idx_published_content_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_published_content_category ON public.published_content USING btree (category);


--
-- Name: idx_published_content_slug; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_published_content_slug ON public.published_content USING btree (slug);


--
-- Name: idx_published_content_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_published_content_status ON public.published_content USING btree (status, published_at DESC);


--
-- Name: idx_published_content_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_published_content_tags ON public.published_content USING gin (tags);


--
-- Name: idx_qr_sessions_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_qr_sessions_active ON public.qr_sessions USING btree (status, expires_at) WHERE (status = 'active'::text);


--
-- Name: idx_qr_sessions_expires; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_qr_sessions_expires ON public.qr_sessions USING btree (expires_at);


--
-- Name: idx_qr_sessions_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_qr_sessions_status ON public.qr_sessions USING btree (status);


--
-- Name: idx_qr_sessions_token; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_qr_sessions_token ON public.qr_sessions USING btree (session_token);


--
-- Name: idx_qr_sessions_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_qr_sessions_user ON public.qr_sessions USING btree (user_id);


--
-- Name: idx_quality_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_quality_status ON public.data_quality_log USING btree (status, checked_at DESC);


--
-- Name: idx_quality_symbol; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_quality_symbol ON public.data_quality_log USING btree (symbol, checked_at DESC);


--
-- Name: idx_quality_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_quality_type ON public.data_quality_log USING btree (check_type, checked_at DESC);


--
-- Name: idx_rankings_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_rankings_model ON public.model_rankings USING btree (model_id);


--
-- Name: idx_rankings_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_rankings_score ON public.model_rankings USING btree (ranking_score DESC);


--
-- Name: idx_rankings_use_case; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_rankings_use_case ON public.model_rankings USING btree (use_case_category);


--
-- Name: idx_reading_history_content; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_reading_history_content ON public.curation_reading_history USING btree (content_id);


--
-- Name: idx_reading_history_read_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_reading_history_read_at ON public.curation_reading_history USING btree (read_at DESC);


--
-- Name: idx_reading_history_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_reading_history_user ON public.curation_reading_history USING btree (user_id);


--
-- Name: idx_reasoning_log_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_reasoning_log_bucket ON public.bucket_reasoning_log USING btree (bucket_id);


--
-- Name: idx_reasoning_log_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_reasoning_log_timestamp ON public.bucket_reasoning_log USING btree ("timestamp" DESC);


--
-- Name: idx_reasoning_log_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_reasoning_log_type ON public.bucket_reasoning_log USING btree (decision_type);


--
-- Name: idx_reasoning_log_version; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_reasoning_log_version ON public.bucket_reasoning_log USING btree (bucket_id, version);


--
-- Name: idx_recent_files_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_recent_files_user ON public.recent_files USING btree (user_id, accessed_at DESC);


--
-- Name: idx_resource_manifests_app; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_resource_manifests_app ON public.resource_manifests USING btree (app_id);


--
-- Name: idx_resource_states_app; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_resource_states_app ON public.resource_states USING btree (app_id);


--
-- Name: idx_resource_states_state; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_resource_states_state ON public.resource_states USING btree (state);


--
-- Name: idx_resource_states_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_resource_states_type ON public.resource_states USING btree (resource_type);


--
-- Name: idx_responses_cache_hit; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_responses_cache_hit ON public.ai_responses USING btree (cache_hit);


--
-- Name: idx_responses_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_responses_created_at ON public.ai_responses USING btree (created_at DESC);


--
-- Name: idx_responses_latency; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_responses_latency ON public.ai_responses USING btree (latency_ms) WHERE (latency_ms IS NOT NULL);


--
-- Name: idx_responses_provider_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_responses_provider_model ON public.ai_responses USING btree (provider, model);


--
-- Name: idx_responses_query_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_responses_query_hash ON public.ai_responses USING btree (query_hash);


--
-- Name: idx_responses_request_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_responses_request_time ON public.ai_responses USING btree (request_timestamp DESC);


--
-- Name: idx_results_experiment; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_results_experiment ON public.experiment_results USING btree (experiment_id);


--
-- Name: idx_results_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_results_time ON public.experiment_results USING btree (recorded_at DESC);


--
-- Name: idx_results_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_results_user ON public.experiment_results USING btree (user_id);


--
-- Name: idx_results_variant; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_results_variant ON public.experiment_results USING btree (variant_id);


--
-- Name: idx_room_messages_room; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_room_messages_room ON public.code_room_messages USING btree (room_id, created_at DESC);


--
-- Name: idx_room_repos_repo; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_room_repos_repo ON public.code_room_repositories USING btree (repo_id);


--
-- Name: idx_room_repos_room; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_room_repos_room ON public.code_room_repositories USING btree (room_id);


--
-- Name: idx_runs_dataset; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_runs_dataset ON public.fine_tune_runs USING btree (dataset_id);


--
-- Name: idx_runs_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_runs_status ON public.fine_tune_runs USING btree (status);


--
-- Name: idx_scheduled_jobs_enabled; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_scheduled_jobs_enabled ON public.scheduled_jobs USING btree (is_enabled, next_run);


--
-- Name: idx_scheduler_failures; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_scheduler_failures ON public.scheduler_log USING btree (status, started_at DESC) WHERE ((status)::text = 'failed'::text);


--
-- Name: idx_scheduler_job; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_scheduler_job ON public.scheduler_log USING btree (job_name, started_at DESC);


--
-- Name: idx_scheduler_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_scheduler_status ON public.scheduler_log USING btree (status, started_at DESC);


--
-- Name: idx_sdk_tokens_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sdk_tokens_active ON public.sdk_tokens USING btree (active);


--
-- Name: idx_sdk_tokens_developer; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sdk_tokens_developer ON public.sdk_tokens USING btree (developer_id);


--
-- Name: idx_sdk_tokens_expires; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sdk_tokens_expires ON public.sdk_tokens USING btree (expires_at);


--
-- Name: idx_sdk_tokens_token; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sdk_tokens_token ON public.sdk_tokens USING btree (token);


--
-- Name: idx_service_credentials_expires; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_service_credentials_expires ON public.service_credentials USING btree (expires_at) WHERE (expires_at IS NOT NULL);


--
-- Name: idx_service_credentials_lookup; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_service_credentials_lookup ON public.service_credentials USING btree (service_name, credential_type, identifier);


--
-- Name: idx_shard_registry_health; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_shard_registry_health ON public.shard_registry USING btree (health_status);


--
-- Name: idx_shard_registry_index; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_shard_registry_index ON public.shard_registry USING btree (shard_index);


--
-- Name: idx_shard_registry_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_shard_registry_status ON public.shard_registry USING btree (status);


--
-- Name: idx_snapshot_diffs_from; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_snapshot_diffs_from ON public.snapshot_diffs USING btree (from_snapshot_id);


--
-- Name: idx_snapshot_diffs_to; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_snapshot_diffs_to ON public.snapshot_diffs USING btree (to_snapshot_id);


--
-- Name: idx_snapshot_diffs_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_snapshot_diffs_type ON public.snapshot_diffs USING btree (change_type);


--
-- Name: idx_song_requests_device; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_song_requests_device ON public.song_requests USING btree (device_id);


--
-- Name: idx_song_requests_queue; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_song_requests_queue ON public.song_requests USING btree (queue_position);


--
-- Name: idx_song_requests_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_song_requests_status ON public.song_requests USING btree (status);


--
-- Name: idx_song_requests_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_song_requests_time ON public.song_requests USING btree (requested_at DESC);


--
-- Name: idx_sources_reliability; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sources_reliability ON public.price_sources USING btree (reliability_score DESC);


--
-- Name: idx_sources_updated; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sources_updated ON public.price_sources USING btree (last_updated DESC);


--
-- Name: idx_spam_patterns_identifier; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_spam_patterns_identifier ON public.elo_spam_patterns USING btree (identifier_type, identifier_value);


--
-- Name: idx_spam_patterns_severity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_spam_patterns_severity ON public.elo_spam_patterns USING btree (severity);


--
-- Name: idx_spam_patterns_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_spam_patterns_type ON public.elo_spam_patterns USING btree (pattern_type);


--
-- Name: idx_sprite_atlas_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sprite_atlas_name ON public.sprite_atlas USING btree (sheet_id, sprite_name);


--
-- Name: idx_sprite_atlas_sheet; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sprite_atlas_sheet ON public.sprite_atlas USING btree (sheet_id);


--
-- Name: idx_sprite_sheets_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sprite_sheets_category ON public.sprite_sheets USING btree (category);


--
-- Name: idx_sprite_sheets_metadata; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sprite_sheets_metadata ON public.sprite_sheets USING gin (metadata);


--
-- Name: idx_sprite_sheets_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sprite_sheets_name ON public.sprite_sheets USING btree (name);


--
-- Name: idx_sprite_sheets_tags; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_sprite_sheets_tags ON public.sprite_sheets USING gin (tags);


--
-- Name: idx_stats_experiment; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stats_experiment ON public.experiment_statistics USING btree (experiment_id);


--
-- Name: idx_stats_significant; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stats_significant ON public.experiment_statistics USING btree (is_significant) WHERE (is_significant = true);


--
-- Name: idx_stats_success_rate; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stats_success_rate ON public.experiment_statistics USING btree (success_rate DESC);


--
-- Name: idx_stats_variant; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stats_variant ON public.experiment_statistics USING btree (variant_id);


--
-- Name: idx_storage_bucket; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_storage_bucket ON public.model_storage USING btree (bucket_name, object_path);


--
-- Name: idx_storage_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_storage_model ON public.model_storage USING btree (model_id);


--
-- Name: idx_stream_chat_stream; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_chat_stream ON public.stream_chat USING btree (stream_id, "timestamp" DESC);


--
-- Name: idx_stream_chat_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_chat_type ON public.stream_chat USING btree (message_type);


--
-- Name: idx_stream_chat_viewer; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_chat_viewer ON public.stream_chat USING btree (viewer_id);


--
-- Name: idx_stream_sessions_started; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_sessions_started ON public.stream_sessions USING btree (started_at DESC);


--
-- Name: idx_stream_sessions_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_sessions_status ON public.stream_sessions USING btree (status, started_at DESC);


--
-- Name: idx_stream_sessions_stream_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_sessions_stream_id ON public.stream_sessions USING btree (stream_id);


--
-- Name: idx_stream_sessions_streamer; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_sessions_streamer ON public.stream_sessions USING btree (streamer_id);


--
-- Name: idx_stream_viewers_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_viewers_active ON public.stream_viewers USING btree (stream_id, left_at) WHERE (left_at IS NULL);


--
-- Name: idx_stream_viewers_stream; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_viewers_stream ON public.stream_viewers USING btree (stream_id);


--
-- Name: idx_stream_viewers_viewer; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_stream_viewers_viewer ON public.stream_viewers USING btree (viewer_id);


--
-- Name: idx_student_hints_lesson; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_student_hints_lesson ON public.student_hints USING btree (lesson_id, visible);


--
-- Name: idx_student_hints_path; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_student_hints_path ON public.student_hints USING btree (path_id);


--
-- Name: idx_student_hints_score; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_student_hints_score ON public.student_hints USING btree (helpfulness_score DESC);


--
-- Name: idx_student_hints_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_student_hints_user ON public.student_hints USING btree (user_id);


--
-- Name: idx_submissions_challenge_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_submissions_challenge_id ON public.submissions USING btree (challenge_id);


--
-- Name: idx_submissions_content_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_submissions_content_type ON public.submissions USING btree (content_type);


--
-- Name: idx_submissions_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_submissions_created_at ON public.submissions USING btree (created_at DESC);


--
-- Name: idx_submissions_grading_tracks; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_submissions_grading_tracks ON public.submissions USING gin (grading_tracks);


--
-- Name: idx_submissions_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_submissions_user_id ON public.submissions USING btree (user_id);


--
-- Name: idx_subscribers_email; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_subscribers_email ON public.content_subscribers USING btree (email);


--
-- Name: idx_subscribers_verified; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_subscribers_verified ON public.content_subscribers USING btree (verified, unsubscribed);


--
-- Name: idx_survey_questions_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_survey_questions_category ON public.survey_questions USING btree (category);


--
-- Name: idx_survey_questions_level; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_survey_questions_level ON public.survey_questions USING btree (level, question_order);


--
-- Name: idx_survey_responses_profile; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_survey_responses_profile ON public.survey_responses USING btree (profile_id);


--
-- Name: idx_survey_responses_quality; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_survey_responses_quality ON public.survey_responses USING btree (quality_score);


--
-- Name: idx_survey_responses_question; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_survey_responses_question ON public.survey_responses USING btree (question_id);


--
-- Name: idx_swipe_history_direction; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_swipe_history_direction ON public.swipe_history USING btree (direction);


--
-- Name: idx_swipe_history_match; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_swipe_history_match ON public.swipe_history USING btree (match_id);


--
-- Name: idx_swipe_history_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_swipe_history_session ON public.swipe_history USING btree (session_id);


--
-- Name: idx_swipe_history_swiped; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_swipe_history_swiped ON public.swipe_history USING btree (swiped_at DESC);


--
-- Name: idx_swipe_history_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_swipe_history_user ON public.swipe_history USING btree (user_id);


--
-- Name: idx_task_assignments_completed; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_assignments_completed ON public.training_task_assignments USING btree (completed_at DESC) WHERE (status = 'completed'::text);


--
-- Name: idx_task_assignments_device; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_assignments_device ON public.training_task_assignments USING btree (device_id);


--
-- Name: idx_task_assignments_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_assignments_status ON public.training_task_assignments USING btree (status);


--
-- Name: idx_task_assignments_task; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_assignments_task ON public.training_task_assignments USING btree (task_id);


--
-- Name: idx_task_assignments_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_assignments_user ON public.training_task_assignments USING btree (user_id);


--
-- Name: idx_task_leaderboard_period; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_leaderboard_period ON public.training_task_leaderboard USING btree (period_type, period_start);


--
-- Name: idx_task_leaderboard_rank; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_leaderboard_rank ON public.training_task_leaderboard USING btree (rank);


--
-- Name: idx_task_leaderboard_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_leaderboard_user ON public.training_task_leaderboard USING btree (user_id);


--
-- Name: idx_task_streaks_current; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_streaks_current ON public.training_task_streaks USING btree (current_streak DESC);


--
-- Name: idx_task_streaks_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_task_streaks_user ON public.training_task_streaks USING btree (user_id);


--
-- Name: idx_telemetry_aggregates_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_aggregates_date ON public.telemetry_aggregates USING btree (date DESC);


--
-- Name: idx_telemetry_aggregates_install_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_aggregates_install_id ON public.telemetry_aggregates USING btree (install_id);


--
-- Name: idx_telemetry_errors_install_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_errors_install_id ON public.telemetry_errors USING btree (install_id);


--
-- Name: idx_telemetry_errors_last_seen; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_errors_last_seen ON public.telemetry_errors USING btree (last_seen_at DESC);


--
-- Name: idx_telemetry_errors_occurrence_count; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_errors_occurrence_count ON public.telemetry_errors USING btree (occurrence_count DESC);


--
-- Name: idx_telemetry_errors_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_errors_type ON public.telemetry_errors USING btree (error_type);


--
-- Name: idx_telemetry_events_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_events_created_at ON public.telemetry_events USING btree (created_at DESC);


--
-- Name: idx_telemetry_events_install_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_events_install_id ON public.telemetry_events USING btree (install_id);


--
-- Name: idx_telemetry_events_install_type_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_events_install_type_created ON public.telemetry_events USING btree (install_id, event_type, created_at DESC);


--
-- Name: idx_telemetry_events_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_events_type ON public.telemetry_events USING btree (event_type);


--
-- Name: idx_telemetry_features_feature_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_features_feature_name ON public.telemetry_features USING btree (feature_name);


--
-- Name: idx_telemetry_features_install_feature; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE UNIQUE INDEX idx_telemetry_features_install_feature ON public.telemetry_features USING btree (install_id, feature_name);


--
-- Name: idx_telemetry_features_install_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_features_install_id ON public.telemetry_features USING btree (install_id);


--
-- Name: idx_telemetry_features_usage_count; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_features_usage_count ON public.telemetry_features USING btree (usage_count DESC);


--
-- Name: idx_telemetry_performance_install_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_performance_install_id ON public.telemetry_performance USING btree (install_id);


--
-- Name: idx_telemetry_performance_install_metric_recorded; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_performance_install_metric_recorded ON public.telemetry_performance USING btree (install_id, metric_name, recorded_at DESC);


--
-- Name: idx_telemetry_performance_metric; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_performance_metric ON public.telemetry_performance USING btree (metric_name);


--
-- Name: idx_telemetry_performance_recorded_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_performance_recorded_at ON public.telemetry_performance USING btree (recorded_at DESC);


--
-- Name: idx_telemetry_sessions_created_at; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_sessions_created_at ON public.telemetry_sessions USING btree (created_at DESC);


--
-- Name: idx_telemetry_sessions_install_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_sessions_install_id ON public.telemetry_sessions USING btree (install_id);


--
-- Name: idx_telemetry_sessions_session_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_telemetry_sessions_session_hash ON public.telemetry_sessions USING btree (session_hash);


--
-- Name: idx_tenant_api_keys_provider; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tenant_api_keys_provider ON public.tenant_api_keys USING btree (provider, active);


--
-- Name: idx_tenant_api_keys_tenant; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tenant_api_keys_tenant ON public.tenant_api_keys USING btree (tenant_id, active);


--
-- Name: idx_timeline_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_timeline_category ON public.portfolio_timeline USING btree (event_category);


--
-- Name: idx_timeline_featured; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_timeline_featured ON public.portfolio_timeline USING btree (is_featured);


--
-- Name: idx_timeline_public; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_timeline_public ON public.portfolio_timeline USING btree (is_public);


--
-- Name: idx_timeline_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_timeline_source ON public.portfolio_timeline USING btree (source, source_id);


--
-- Name: idx_timeline_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_timeline_timestamp ON public.portfolio_timeline USING btree (event_timestamp DESC);


--
-- Name: idx_timeline_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_timeline_type ON public.portfolio_timeline USING btree (event_type);


--
-- Name: idx_timeline_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_timeline_user ON public.portfolio_timeline USING btree (user_id);


--
-- Name: idx_todo_archives_archived; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_todo_archives_archived ON public.todo_archives USING btree (archived_at DESC);


--
-- Name: idx_todo_archives_decision; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_todo_archives_decision ON public.todo_archives USING btree (decision_id);


--
-- Name: idx_todo_archives_todo; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_todo_archives_todo ON public.todo_archives USING btree (todo_id);


--
-- Name: idx_todo_deps_depends; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_todo_deps_depends ON public.todo_dependencies USING btree (depends_on_todo_id);


--
-- Name: idx_todo_deps_todo; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_todo_deps_todo ON public.todo_dependencies USING btree (todo_id);


--
-- Name: idx_training_jobs_room; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_training_jobs_room ON public.ollama_training_jobs USING btree (room_id);


--
-- Name: idx_training_jobs_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_training_jobs_status ON public.ollama_training_jobs USING btree (status, created_at DESC);


--
-- Name: idx_training_tasks_assigned; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_training_tasks_assigned ON public.training_tasks USING btree (assigned_user_id) WHERE (status = 'claimed'::text);


--
-- Name: idx_training_tasks_expires; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_training_tasks_expires ON public.training_tasks USING btree (expires_at) WHERE (status = ANY (ARRAY['available'::text, 'claimed'::text]));


--
-- Name: idx_training_tasks_priority; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_training_tasks_priority ON public.training_tasks USING btree (priority DESC) WHERE (status = 'available'::text);


--
-- Name: idx_training_tasks_skill; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_training_tasks_skill ON public.training_tasks USING btree (skill);


--
-- Name: idx_training_tasks_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_training_tasks_status ON public.training_tasks USING btree (status);


--
-- Name: idx_training_tasks_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_training_tasks_type ON public.training_tasks USING btree (task_type);


--
-- Name: idx_transitions_request; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_transitions_request ON public.request_state_transitions USING btree (request_id, transitioned_at DESC);


--
-- Name: idx_transitions_to_state; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_transitions_to_state ON public.request_state_transitions USING btree (to_state);


--
-- Name: idx_translation_context; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_translation_context ON public.translation_cache USING btree (context, target_lang);


--
-- Name: idx_translation_lookup; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_translation_lookup ON public.translation_cache USING btree (source_text, source_lang, target_lang);


--
-- Name: idx_translation_stats_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_translation_stats_date ON public.translation_stats USING btree (date);


--
-- Name: idx_translation_target_lang; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_translation_target_lang ON public.translation_cache USING btree (target_lang);


--
-- Name: idx_trash_bin_auto_delete; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_trash_bin_auto_delete ON public.trash_bin USING btree (auto_delete_at) WHERE (auto_delete_at IS NOT NULL);


--
-- Name: idx_trash_bin_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_trash_bin_user ON public.trash_bin USING btree (user_id, deleted_at DESC);


--
-- Name: idx_tree_completions_completed; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_completions_completed ON public.tree_node_completions USING btree (completed_at DESC);


--
-- Name: idx_tree_completions_identity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_completions_identity ON public.tree_node_completions USING btree (identity_id);


--
-- Name: idx_tree_completions_tree; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_completions_tree ON public.tree_node_completions USING btree (tree_id);


--
-- Name: idx_tree_completions_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_completions_user ON public.tree_node_completions USING btree (user_id);


--
-- Name: idx_tree_progress_activity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_progress_activity ON public.user_tree_progress USING btree (last_activity DESC);


--
-- Name: idx_tree_progress_completion; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_progress_completion ON public.user_tree_progress USING btree (completion_rate DESC);


--
-- Name: idx_tree_progress_identity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_progress_identity ON public.user_tree_progress USING btree (identity_id);


--
-- Name: idx_tree_visits_identity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_visits_identity ON public.tree_node_visits USING btree (identity_id);


--
-- Name: idx_tree_visits_node; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_visits_node ON public.tree_node_visits USING btree (tree_id, node_id);


--
-- Name: idx_tree_visits_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_visits_timestamp ON public.tree_node_visits USING btree ("timestamp" DESC);


--
-- Name: idx_tree_visits_tree; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_visits_tree ON public.tree_node_visits USING btree (tree_id);


--
-- Name: idx_tree_visits_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_tree_visits_user ON public.tree_node_visits USING btree (user_id);


--
-- Name: idx_url_fetch_queue_priority; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_url_fetch_queue_priority ON public.url_fetch_queue USING btree (priority DESC);


--
-- Name: idx_url_fetch_queue_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_url_fetch_queue_status ON public.url_fetch_queue USING btree (status);


--
-- Name: idx_url_index_critical; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_url_index_critical ON public.url_index USING btree (is_critical);


--
-- Name: idx_url_index_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_url_index_domain ON public.url_index USING btree (domain);


--
-- Name: idx_url_index_fetch_count; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_url_index_fetch_count ON public.url_index USING btree (fetch_count DESC);


--
-- Name: idx_url_index_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_url_index_hash ON public.url_index USING btree (url_hash);


--
-- Name: idx_url_index_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_url_index_type ON public.url_index USING btree (url_type);


--
-- Name: idx_usage_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_usage_model ON public.model_usage_log USING btree (model_id);


--
-- Name: idx_usage_prompt_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_usage_prompt_hash ON public.model_usage_log USING btree (prompt_hash);


--
-- Name: idx_usage_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_usage_status ON public.model_usage_log USING btree (status);


--
-- Name: idx_usage_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_usage_timestamp ON public.model_usage_log USING btree ("timestamp" DESC);


--
-- Name: idx_usage_use_case; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_usage_use_case ON public.model_usage_log USING btree (use_case_category);


--
-- Name: idx_usage_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_usage_user ON public.model_usage_log USING btree (user_id) WHERE (user_id IS NOT NULL);


--
-- Name: idx_user_achievements_achievement; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_achievements_achievement ON public.user_achievements USING btree (achievement_id);


--
-- Name: idx_user_achievements_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_achievements_user ON public.user_achievements USING btree (user_id);


--
-- Name: idx_user_api_keys_provider; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_api_keys_provider ON public.user_api_keys USING btree (provider, active);


--
-- Name: idx_user_api_keys_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_api_keys_user ON public.user_api_keys USING btree (user_id, active);


--
-- Name: idx_user_apps_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_apps_active ON public.user_installed_apps USING btree (user_id, status) WHERE (status = 'active'::text);


--
-- Name: idx_user_devices_badge; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_devices_badge ON public.user_devices USING btree (current_badge);


--
-- Name: idx_user_devices_device_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_devices_device_id ON public.user_devices USING btree (device_id);


--
-- Name: idx_user_devices_last_seen; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_devices_last_seen ON public.user_devices USING btree (last_seen DESC);


--
-- Name: idx_user_devices_trust; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_devices_trust ON public.user_devices USING btree (trust_score DESC);


--
-- Name: idx_user_devices_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_devices_user_id ON public.user_devices USING btree (user_id);


--
-- Name: idx_user_followers_created; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_followers_created ON public.user_followers USING btree (created_at DESC);


--
-- Name: idx_user_followers_followee; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_followers_followee ON public.user_followers USING btree (followee_id);


--
-- Name: idx_user_followers_follower; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_followers_follower ON public.user_followers USING btree (follower_id);


--
-- Name: idx_user_goals_confidence; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_goals_confidence ON public.user_goals USING btree (confidence DESC);


--
-- Name: idx_user_goals_goal; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_goals_goal ON public.user_goals USING btree (goal);


--
-- Name: idx_user_goals_identity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_goals_identity ON public.user_goals USING btree (identity_id);


--
-- Name: idx_user_goals_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_goals_status ON public.user_goals USING btree (status);


--
-- Name: idx_user_goals_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_goals_user ON public.user_goals USING btree (user_id);


--
-- Name: idx_user_installed_apps_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_installed_apps_status ON public.user_installed_apps USING btree (status);


--
-- Name: idx_user_installed_apps_subdomain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_installed_apps_subdomain ON public.user_installed_apps USING btree (subdomain);


--
-- Name: idx_user_installed_apps_template; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_installed_apps_template ON public.user_installed_apps USING btree (template_id);


--
-- Name: idx_user_installed_apps_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_installed_apps_user ON public.user_installed_apps USING btree (user_id);


--
-- Name: idx_user_interactions_identity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_interactions_identity ON public.user_interactions USING btree (identity_id);


--
-- Name: idx_user_interactions_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_interactions_timestamp ON public.user_interactions USING btree ("timestamp" DESC);


--
-- Name: idx_user_interactions_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_interactions_type ON public.user_interactions USING btree (interaction_type);


--
-- Name: idx_user_interactions_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_interactions_user ON public.user_interactions USING btree (user_id);


--
-- Name: idx_user_lang_ip; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_lang_ip ON public.user_language_preferences USING btree (ip_address);


--
-- Name: idx_user_lang_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_lang_user ON public.user_language_preferences USING btree (user_id);


--
-- Name: idx_user_model_prefs_favorite; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_model_prefs_favorite ON public.user_model_preferences USING btree (user_id, is_favorite) WHERE (is_favorite = true);


--
-- Name: idx_user_model_prefs_model; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_model_prefs_model ON public.user_model_preferences USING btree (model_id);


--
-- Name: idx_user_model_prefs_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_model_prefs_user ON public.user_model_preferences USING btree (user_id);


--
-- Name: idx_user_playstyles_identity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_playstyles_identity ON public.user_playstyles USING btree (identity_id);


--
-- Name: idx_user_profiles_archetype; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_profiles_archetype ON public.user_profiles USING btree (archetype_id);


--
-- Name: idx_user_profiles_current_level; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_profiles_current_level ON public.user_profiles USING btree (current_level);


--
-- Name: idx_user_profiles_payout_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_profiles_payout_status ON public.user_profiles USING btree (payout_status);


--
-- Name: idx_user_profiles_session; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_profiles_session ON public.user_profiles USING btree (session_id);


--
-- Name: idx_user_progress_path; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_progress_path ON public.user_progress USING btree (path_id);


--
-- Name: idx_user_progress_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_progress_status ON public.user_progress USING btree (status);


--
-- Name: idx_user_progress_streak; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_progress_streak ON public.user_progress USING btree (current_streak_days DESC);


--
-- Name: idx_user_progress_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_progress_user ON public.user_progress USING btree (user_id);


--
-- Name: idx_user_reputation_activity; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_reputation_activity ON public.user_reputation USING btree (last_activity DESC);


--
-- Name: idx_user_reputation_badge; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_reputation_badge ON public.user_reputation USING btree (badge);


--
-- Name: idx_user_reputation_karma; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_reputation_karma ON public.user_reputation USING btree (karma DESC);


--
-- Name: idx_user_reputation_trust; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_user_reputation_trust ON public.user_reputation USING btree (trust_score DESC);


--
-- Name: idx_users_handle_lowercase; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_users_handle_lowercase ON public.users USING btree (handle_lowercase);


--
-- Name: idx_validations_passed; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_validations_passed ON public.snapshot_validations USING btree (passed);


--
-- Name: idx_validations_snapshot; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_validations_snapshot ON public.snapshot_validations USING btree (snapshot_id);


--
-- Name: idx_validations_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_validations_type ON public.snapshot_validations USING btree (validation_type);


--
-- Name: idx_variants_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_variants_active ON public.campaign_variants USING btree (is_active);


--
-- Name: idx_variants_campaign; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_variants_campaign ON public.campaign_variants USING btree (campaign_id);


--
-- Name: idx_variants_control; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_variants_control ON public.experiment_variants USING btree (is_control) WHERE (is_control = true);


--
-- Name: idx_variants_experiment; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_variants_experiment ON public.experiment_variants USING btree (experiment_id);


--
-- Name: idx_variants_winner; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_variants_winner ON public.campaign_variants USING btree (is_winner);


--
-- Name: idx_vendored_packages_critical; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_vendored_packages_critical ON public.vendored_packages USING btree (is_critical);


--
-- Name: idx_vendored_packages_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_vendored_packages_name ON public.vendored_packages USING btree (package_name);


--
-- Name: idx_vendored_packages_risk; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_vendored_packages_risk ON public.vendored_packages USING btree (risk_score DESC);


--
-- Name: idx_vendored_packages_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_vendored_packages_status ON public.vendored_packages USING btree (vendor_status);


--
-- Name: idx_version_perf_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_version_perf_date ON public.model_version_performance USING btree (date DESC);


--
-- Name: idx_version_perf_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_version_perf_domain ON public.model_version_performance USING btree (domain, date DESC);


--
-- Name: idx_version_perf_version; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_version_perf_version ON public.model_version_performance USING btree (version_id);


--
-- Name: idx_virtual_files_desktop; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_virtual_files_desktop ON public.virtual_files USING btree (user_id, is_desktop) WHERE (is_desktop = true);


--
-- Name: idx_virtual_files_folder; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_virtual_files_folder ON public.virtual_files USING btree (folder_id);


--
-- Name: idx_virtual_files_metadata; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_virtual_files_metadata ON public.virtual_files USING gin (metadata) WHERE (metadata IS NOT NULL);


--
-- Name: idx_virtual_files_path; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_virtual_files_path ON public.virtual_files USING btree (user_id, path);


--
-- Name: idx_virtual_files_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_virtual_files_type ON public.virtual_files USING btree (type);


--
-- Name: idx_virtual_folders_desktop; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_virtual_folders_desktop ON public.virtual_folders USING btree (user_id, is_desktop) WHERE (is_desktop = true);


--
-- Name: idx_virtual_folders_parent; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_virtual_folders_parent ON public.virtual_folders USING btree (parent_id);


--
-- Name: idx_virtual_folders_path; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_virtual_folders_path ON public.virtual_folders USING btree (user_id, path);


--
-- Name: idx_visit_sessions_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_active ON public.visit_sessions USING btree (is_active, last_heartbeat_at);


--
-- Name: idx_visit_sessions_affiliate; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_affiliate ON public.visit_sessions USING btree (affiliate_code);


--
-- Name: idx_visit_sessions_bounce; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_bounce ON public.visit_sessions USING btree (bounce_detected, bounce_reason);


--
-- Name: idx_visit_sessions_device_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_device_id ON public.visit_sessions USING btree (device_id);


--
-- Name: idx_visit_sessions_duration; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_duration ON public.visit_sessions USING btree (duration_ms DESC);


--
-- Name: idx_visit_sessions_ip_hash; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_ip_hash ON public.visit_sessions USING btree (ip_hash);


--
-- Name: idx_visit_sessions_page; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_page ON public.visit_sessions USING btree (page);


--
-- Name: idx_visit_sessions_session_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_session_id ON public.visit_sessions USING btree (session_id);


--
-- Name: idx_visit_sessions_spam; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_spam ON public.visit_sessions USING btree (spam_score DESC);


--
-- Name: idx_visit_sessions_start_time; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_start_time ON public.visit_sessions USING btree (start_time DESC);


--
-- Name: idx_visit_sessions_user_id; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visit_sessions_user_id ON public.visit_sessions USING btree (user_id);


--
-- Name: idx_visual_effects_category; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visual_effects_category ON public.visual_effects USING btree (category);


--
-- Name: idx_visual_effects_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visual_effects_name ON public.visual_effects USING btree (name);


--
-- Name: idx_visual_effects_type; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visual_effects_type ON public.visual_effects USING btree (effect_type);


--
-- Name: idx_visual_themes_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_visual_themes_name ON public.visual_themes USING btree (name);


--
-- Name: idx_watchlist_user; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_watchlist_user ON public.price_watchlist USING btree (user_id);


--
-- Name: idx_webhook_deliveries_next_retry; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhook_deliveries_next_retry ON public.webhook_deliveries USING btree (next_retry_at) WHERE ((status)::text = 'pending'::text);


--
-- Name: idx_webhook_deliveries_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhook_deliveries_status ON public.webhook_deliveries USING btree (status);


--
-- Name: idx_webhook_deliveries_webhook; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhook_deliveries_webhook ON public.webhook_deliveries USING btree (webhook_id, attempted_at DESC);


--
-- Name: idx_webhook_endpoints_source; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhook_endpoints_source ON public.webhook_endpoints USING btree (source, is_active);


--
-- Name: idx_webhook_events_endpoint; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhook_events_endpoint ON public.webhook_events USING btree (endpoint_id, received_at DESC);


--
-- Name: idx_webhook_events_status; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhook_events_status ON public.webhook_events USING btree (status);


--
-- Name: idx_webhooks_active; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhooks_active ON public.webhooks USING btree (active);


--
-- Name: idx_webhooks_developer; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhooks_developer ON public.webhooks USING btree (developer_id);


--
-- Name: idx_webhooks_events; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_webhooks_events ON public.webhooks USING gin (events);


--
-- Name: idx_wrapper_perf_date; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_wrapper_perf_date ON public.wrapper_performance USING btree (date DESC);


--
-- Name: idx_wrapper_perf_domain; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_wrapper_perf_domain ON public.wrapper_performance USING btree (domain);


--
-- Name: idx_wrapper_perf_profile; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_wrapper_perf_profile ON public.wrapper_performance USING btree (user_profile);


--
-- Name: idx_wrapper_perf_wrapper; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_wrapper_perf_wrapper ON public.wrapper_performance USING btree (wrapper_name);


--
-- Name: idx_wrapper_samples_timestamp; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_wrapper_samples_timestamp ON public.wrapper_usage_samples USING btree ("timestamp" DESC);


--
-- Name: idx_wrapper_samples_wrapper; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_wrapper_samples_wrapper ON public.wrapper_usage_samples USING btree (wrapper_name);


--
-- Name: idx_wrappers_domains; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_wrappers_domains ON public.model_wrappers USING gin (applicable_domains);


--
-- Name: idx_wrappers_name; Type: INDEX; Schema: public; Owner: matthewmauer
--

CREATE INDEX idx_wrappers_name ON public.model_wrappers USING btree (wrapper_name);


--
-- Name: challenge_details _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.challenge_details AS
 SELECT dc.challenge_id,
    dc.challenge_prompt,
    dc.challenge_type,
    dc.status,
    dc.created_at,
    count(di.implementation_id) AS total_implementations,
    count(
        CASE
            WHEN (di.total_score > (0)::numeric) THEN 1
            ELSE NULL::integer
        END) AS judged_implementations,
    max(di.total_score) AS highest_score,
    avg(di.total_score) AS avg_score,
    dp.domain_name AS winner_domain,
    dp.brand_name AS winner_brand,
    dc.winner_score
   FROM ((public.domain_challenges dc
     LEFT JOIN public.domain_implementations di ON ((dc.challenge_id = di.challenge_id)))
     LEFT JOIN public.domain_portfolio dp ON ((dc.winner_domain_id = dp.domain_id)))
  GROUP BY dc.challenge_id, dp.domain_name, dp.brand_name
  ORDER BY dc.created_at DESC;


--
-- Name: implementation_quality _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.implementation_quality AS
 SELECT di.implementation_id,
    di.challenge_id,
    dp.domain_name,
    dp.brand_name,
    dp.primary_color,
    di.code_length,
    di.has_comments,
    di.uses_domain_colors,
    di.uses_expected_services,
    di.swipe_right_count,
    di.swipe_left_count,
    di.feedback_count,
    round(avg(dj.creativity_score), 2) AS avg_creativity,
    round(avg(dj.functionality_score), 2) AS avg_functionality,
    round(avg(dj.code_quality_score), 2) AS avg_code_quality,
    round(avg(dj.brand_alignment_score), 2) AS avg_brand_alignment,
    di.total_score,
    di.created_at
   FROM ((public.domain_implementations di
     JOIN public.domain_portfolio dp ON ((di.domain_id = dp.domain_id)))
     LEFT JOIN public.domain_judgments dj ON ((di.implementation_id = dj.implementation_id)))
  GROUP BY di.implementation_id, dp.domain_name, dp.brand_name, dp.primary_color
  ORDER BY di.total_score DESC;


--
-- Name: user_progress_summary _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.user_progress_summary AS
 SELECT up.id,
    up.session_id,
    up.preferred_name,
    up.current_level,
    up.completion_percentage,
    up.earned_amount,
    a.name AS archetype_name,
    count(sr.id) AS total_responses,
    count(bi.id) AS brand_ideas_count,
    up.created_at,
    up.completed_at
   FROM (((public.user_profiles up
     LEFT JOIN public.archetypes a ON ((up.archetype_id = a.id)))
     LEFT JOIN public.survey_responses sr ON ((up.id = sr.profile_id)))
     LEFT JOIN public.brand_ideas bi ON ((up.id = bi.profile_id)))
  GROUP BY up.id, a.name;


--
-- Name: onboarding_leaderboard _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.onboarding_leaderboard AS
 SELECT up.id,
    up.preferred_name,
    up.completion_percentage,
    up.earned_amount,
    count(sr.id) AS responses_count,
    avg(sr.quality_score) AS avg_quality,
    count(bi.id) AS ideas_count
   FROM ((public.user_profiles up
     LEFT JOIN public.survey_responses sr ON ((up.id = sr.profile_id)))
     LEFT JOIN public.brand_ideas bi ON ((up.id = bi.profile_id)))
  GROUP BY up.id
  ORDER BY up.completion_percentage DESC, up.earned_amount DESC
 LIMIT 100;


--
-- Name: combined_scores _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.combined_scores AS
 SELECT s.id AS submission_id,
    s.user_id,
    s.challenge_id,
    s.file_name,
    s.content_type,
    s.grading_tracks,
    avg(gr.score) AS average_score,
    count(gr.track) AS tracks_graded,
    jsonb_object_agg(gr.track, gr.score) AS scores_by_track,
    s.created_at
   FROM (public.submissions s
     LEFT JOIN public.grading_results gr ON ((s.id = gr.submission_id)))
  GROUP BY s.id;


--
-- Name: v_active_decisions _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.v_active_decisions AS
 SELECT d.id,
    d.title,
    d.category,
    d.status,
    d.created_by,
    d.created_at,
    d.updated_at,
    count(DISTINCT t.id) AS todo_count,
    count(DISTINCT t.id) FILTER (WHERE (t.status = 'pending'::text)) AS pending_todo_count,
    count(DISTINCT t.id) FILTER (WHERE (t.status = 'completed'::text)) AS completed_todo_count,
    count(DISTINCT dr.id) AS reference_count
   FROM ((public.decisions d
     LEFT JOIN public.decision_todos t ON ((d.id = t.decision_id)))
     LEFT JOIN public.decision_references dr ON ((d.id = dr.decision_id)))
  WHERE (d.status = ANY (ARRAY['draft'::text, 'active'::text]))
  GROUP BY d.id
  ORDER BY d.updated_at DESC;


--
-- Name: v_decision_impact _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.v_decision_impact AS
 SELECT d.id,
    d.title,
    d.category,
    d.status,
    count(DISTINCT t.id) AS total_todos,
    count(DISTINCT t.id) FILTER (WHERE (t.status = 'pending'::text)) AS pending_todos,
    count(DISTINCT dr_out.id) AS outgoing_refs,
    count(DISTINCT dr_in.id) AS incoming_refs,
    (count(DISTINCT t.id) FILTER (WHERE (t.status = 'pending'::text)) + (count(DISTINCT dr_in.id) * 2)) AS impact_score
   FROM (((public.decisions d
     LEFT JOIN public.decision_todos t ON ((d.id = t.decision_id)))
     LEFT JOIN public.decision_references dr_out ON ((d.id = dr_out.decision_id)))
     LEFT JOIN public.decision_references dr_in ON ((d.id = dr_in.referenced_decision_id)))
  GROUP BY d.id
  ORDER BY (count(DISTINCT t.id) FILTER (WHERE (t.status = 'pending'::text)) + (count(DISTINCT dr_in.id) * 2)) DESC;


--
-- Name: v_decision_timeline _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.v_decision_timeline AS
 SELECT d.id,
    d.title,
    d.category,
    d.status,
    d.created_by,
    d.created_at,
    d.updated_at,
    d.deprecated_at,
        CASE
            WHEN (d.deprecated_at IS NOT NULL) THEN 'deprecated'::text
            WHEN (d.status = 'archived'::text) THEN 'archived'::text
            WHEN (d.status = 'active'::text) THEN 'active'::text
            WHEN (d.status = 'draft'::text) THEN 'draft'::text
            ELSE NULL::text
        END AS timeline_status,
    COALESCE(json_agg(json_build_object('id', ref_d.id, 'title', ref_d.title, 'type', dr.reference_type) ORDER BY dr.created_at) FILTER (WHERE (ref_d.id IS NOT NULL)), '[]'::json) AS "references"
   FROM ((public.decisions d
     LEFT JOIN public.decision_references dr ON ((d.id = dr.decision_id)))
     LEFT JOIN public.decisions ref_d ON ((dr.referenced_decision_id = ref_d.id)))
  GROUP BY d.id
  ORDER BY d.created_at DESC;


--
-- Name: v_todo_summary _RETURN; Type: RULE; Schema: public; Owner: matthewmauer
--

CREATE OR REPLACE VIEW public.v_todo_summary AS
 SELECT d.id AS decision_id,
    d.title AS decision_title,
    d.category,
    count(t.id) AS total_todos,
    count(t.id) FILTER (WHERE (t.status = 'pending'::text)) AS pending,
    count(t.id) FILTER (WHERE (t.status = 'in_progress'::text)) AS in_progress,
    count(t.id) FILTER (WHERE (t.status = 'blocked'::text)) AS blocked,
    count(t.id) FILTER (WHERE (t.status = 'completed'::text)) AS completed,
    count(t.id) FILTER (WHERE (t.priority = 'critical'::text)) AS critical_count,
    count(t.id) FILTER (WHERE (t.priority = 'high'::text)) AS high_count,
    count(t.id) FILTER (WHERE ((t.due_date < now()) AND (t.status = 'pending'::text))) AS overdue_count
   FROM (public.decisions d
     LEFT JOIN public.decision_todos t ON ((d.id = t.decision_id)))
  GROUP BY d.id
  ORDER BY (count(t.id) FILTER (WHERE ((t.due_date < now()) AND (t.status = 'pending'::text)))) DESC, (count(t.id) FILTER (WHERE (t.priority = 'critical'::text))) DESC;


--
-- Name: brand_bot_posts bot_post_engagement_trigger; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER bot_post_engagement_trigger BEFORE INSERT OR UPDATE ON public.brand_bot_posts FOR EACH ROW EXECUTE FUNCTION public.update_bot_post_engagement();


--
-- Name: domain_portfolio domain_portfolio_update_trigger; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER domain_portfolio_update_trigger BEFORE UPDATE ON public.domain_portfolio FOR EACH ROW EXECUTE FUNCTION public.update_domain_portfolio_timestamp();


--
-- Name: model_versions model_version_deployment_log; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER model_version_deployment_log AFTER INSERT OR UPDATE ON public.model_versions FOR EACH ROW EXECUTE FUNCTION public.log_model_version_deployment();


--
-- Name: forum_votes post_score_trigger; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER post_score_trigger AFTER INSERT OR DELETE OR UPDATE ON public.forum_votes FOR EACH ROW EXECUTE FUNCTION public.update_post_score();


--
-- Name: experiment_results refresh_stats_on_result; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER refresh_stats_on_result AFTER INSERT ON public.experiment_results FOR EACH ROW EXECUTE FUNCTION public.trigger_refresh_experiment_stats();


--
-- Name: model_usage_log sample_wrapper_usage_trigger; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER sample_wrapper_usage_trigger AFTER INSERT ON public.model_usage_log FOR EACH ROW EXECUTE FUNCTION public.sample_wrapper_usage();


--
-- Name: forum_posts thread_comment_count_trigger; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER thread_comment_count_trigger AFTER INSERT OR DELETE ON public.forum_posts FOR EACH ROW EXECUTE FUNCTION public.update_thread_comment_count();


--
-- Name: forum_votes thread_score_trigger; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER thread_score_trigger AFTER INSERT OR DELETE OR UPDATE ON public.forum_votes FOR EACH ROW EXECUTE FUNCTION public.update_thread_score();


--
-- Name: stream_viewers trg_stream_viewer_count; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trg_stream_viewer_count AFTER INSERT OR UPDATE ON public.stream_viewers FOR EACH ROW EXECUTE FUNCTION public.update_stream_viewer_count();


--
-- Name: app_templates trigger_app_templates_updated; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_app_templates_updated BEFORE UPDATE ON public.app_templates FOR EACH ROW EXECUTE FUNCTION public.update_app_template_timestamp();


--
-- Name: domain_context_snapshots trigger_enforce_single_current_snapshot; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_enforce_single_current_snapshot BEFORE INSERT OR UPDATE ON public.domain_context_snapshots FOR EACH ROW WHEN ((new.is_current = true)) EXECUTE FUNCTION public.enforce_single_current_snapshot();


--
-- Name: domain_parameter_presets trigger_enforce_single_default_preset; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_enforce_single_default_preset BEFORE INSERT OR UPDATE ON public.domain_parameter_presets FOR EACH ROW WHEN ((new.is_default = true)) EXECUTE FUNCTION public.enforce_single_default_preset();


--
-- Name: game_assets trigger_game_assets_updated; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_game_assets_updated BEFORE UPDATE ON public.game_assets FOR EACH ROW EXECUTE FUNCTION public.update_game_assets_timestamp();


--
-- Name: artifact_usage_log trigger_increment_artifact_usage; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_increment_artifact_usage AFTER INSERT ON public.artifact_usage_log FOR EACH ROW EXECUTE FUNCTION public.increment_artifact_usage();


--
-- Name: domain_pattern_usage trigger_increment_pattern_usage; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_increment_pattern_usage AFTER INSERT ON public.domain_pattern_usage FOR EACH ROW EXECUTE FUNCTION public.increment_pattern_usage();


--
-- Name: credential_usage_log trigger_log_credential_usage; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_log_credential_usage AFTER INSERT ON public.credential_usage_log FOR EACH ROW EXECUTE FUNCTION public.log_credential_usage();


--
-- Name: price_cache trigger_record_price_history; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_record_price_history AFTER INSERT OR UPDATE ON public.price_cache FOR EACH ROW EXECUTE FUNCTION public.record_price_to_history();


--
-- Name: resource_manifests trigger_resource_manifests_updated; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_resource_manifests_updated BEFORE UPDATE ON public.resource_manifests FOR EACH ROW EXECUTE FUNCTION public.update_resource_manifest_timestamp();


--
-- Name: resource_states trigger_resource_states_updated; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_resource_states_updated BEFORE UPDATE ON public.resource_states FOR EACH ROW EXECUTE FUNCTION public.update_resource_state_timestamp();


--
-- Name: authorship_registry trigger_update_authorship_registry; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_authorship_registry BEFORE UPDATE ON public.authorship_registry FOR EACH ROW EXECUTE FUNCTION public.update_authorship_registry_updated_at();


--
-- Name: code_snippets trigger_update_code_snippet_search; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_code_snippet_search BEFORE INSERT OR UPDATE ON public.code_snippets FOR EACH ROW EXECUTE FUNCTION public.update_code_snippet_search_vector();


--
-- Name: component_relationships trigger_update_component_usage_stats; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_component_usage_stats AFTER INSERT ON public.component_relationships FOR EACH ROW EXECUTE FUNCTION public.update_component_usage_stats();


--
-- Name: decisions trigger_update_decision_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_decision_timestamp BEFORE UPDATE ON public.decisions FOR EACH ROW EXECUTE FUNCTION public.update_decision_timestamp();


--
-- Name: developers trigger_update_developers_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_developers_timestamp BEFORE UPDATE ON public.developers FOR EACH ROW EXECUTE FUNCTION public.update_developers_timestamp();


--
-- Name: elo_items trigger_update_elo_items_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_elo_items_timestamp BEFORE UPDATE ON public.elo_items FOR EACH ROW EXECUTE FUNCTION public.update_elo_items_timestamp();


--
-- Name: embed_events trigger_update_embed_site_last_event; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_embed_site_last_event AFTER INSERT ON public.embed_events FOR EACH ROW EXECUTE FUNCTION public.update_embed_site_last_event();


--
-- Name: embed_sites trigger_update_embed_sites_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_embed_sites_updated_at BEFORE UPDATE ON public.embed_sites FOR EACH ROW EXECUTE FUNCTION public.update_embed_sites_updated_at();


--
-- Name: git_portfolio_stats trigger_update_git_portfolio; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_git_portfolio BEFORE UPDATE ON public.git_portfolio_stats FOR EACH ROW EXECUTE FUNCTION public.update_git_portfolio_updated_at();


--
-- Name: hint_ratings trigger_update_hint_score; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_hint_score AFTER INSERT ON public.hint_ratings FOR EACH ROW EXECUTE FUNCTION public.update_hint_score();


--
-- Name: iiif_images trigger_update_iiif_images_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_iiif_images_timestamp BEFORE UPDATE ON public.iiif_images FOR EACH ROW EXECUTE FUNCTION public.update_iiif_images_timestamp();


--
-- Name: iiif_manifests trigger_update_iiif_manifests_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_iiif_manifests_timestamp BEFORE UPDATE ON public.iiif_manifests FOR EACH ROW EXECUTE FUNCTION public.update_iiif_manifests_timestamp();


--
-- Name: notes trigger_update_notes_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_notes_timestamp BEFORE UPDATE ON public.notes FOR EACH ROW EXECUTE FUNCTION public.update_notes_timestamp();


--
-- Name: user_playstyles trigger_update_playstyle_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_playstyle_timestamp BEFORE UPDATE ON public.user_playstyles FOR EACH ROW EXECUTE FUNCTION public.update_playstyle_timestamp();


--
-- Name: portfolio_analytics trigger_update_portfolio_analytics; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_portfolio_analytics BEFORE UPDATE ON public.portfolio_analytics FOR EACH ROW EXECUTE FUNCTION public.update_portfolio_analytics_updated_at();


--
-- Name: parameter_performance_log trigger_update_preset_stats; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_preset_stats AFTER INSERT ON public.parameter_performance_log FOR EACH ROW EXECUTE FUNCTION public.update_preset_stats();


--
-- Name: profile_matches trigger_update_profile_matches_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_profile_matches_timestamp BEFORE UPDATE ON public.profile_matches FOR EACH ROW EXECUTE FUNCTION public.update_profile_matches_timestamp();


--
-- Name: lesson_completions trigger_update_progress; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_progress AFTER INSERT ON public.lesson_completions FOR EACH ROW EXECUTE FUNCTION public.update_user_progress_after_lesson();


--
-- Name: code_snippets trigger_update_repo_counts; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_repo_counts AFTER INSERT ON public.code_snippets FOR EACH ROW EXECUTE FUNCTION public.update_repo_counts();


--
-- Name: karma_transactions trigger_update_reputation_activity; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_reputation_activity AFTER INSERT ON public.karma_transactions FOR EACH ROW EXECUTE FUNCTION public.update_reputation_activity();


--
-- Name: code_room_repositories trigger_update_room_counts; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_room_counts AFTER INSERT ON public.code_room_repositories FOR EACH ROW EXECUTE FUNCTION public.update_room_counts();


--
-- Name: domain_judgments trigger_update_score; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_score AFTER INSERT ON public.domain_judgments FOR EACH ROW EXECUTE FUNCTION public.update_score_after_judgment();


--
-- Name: survey_responses trigger_update_survey_responses_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_survey_responses_timestamp BEFORE UPDATE ON public.survey_responses FOR EACH ROW EXECUTE FUNCTION public.update_survey_responses_timestamp();


--
-- Name: decision_todos trigger_update_todo_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_todo_timestamp BEFORE UPDATE ON public.decision_todos FOR EACH ROW EXECUTE FUNCTION public.update_todo_timestamp();


--
-- Name: user_profiles trigger_update_user_profiles_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_user_profiles_timestamp BEFORE UPDATE ON public.user_profiles FOR EACH ROW EXECUTE FUNCTION public.update_user_profiles_timestamp();


--
-- Name: webhooks trigger_update_webhooks_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_webhooks_timestamp BEFORE UPDATE ON public.webhooks FOR EACH ROW EXECUTE FUNCTION public.update_webhooks_timestamp();


--
-- Name: elo_items trigger_update_win_rate; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER trigger_update_win_rate BEFORE UPDATE ON public.elo_items FOR EACH ROW WHEN (((new.wins IS DISTINCT FROM old.wins) OR (new.losses IS DISTINCT FROM old.losses))) EXECUTE FUNCTION public.update_win_rate();


--
-- Name: ai_responses update_ai_responses_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_ai_responses_updated_at BEFORE UPDATE ON public.ai_responses FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: animation_sequences update_animation_sequences_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_animation_sequences_updated_at BEFORE UPDATE ON public.animation_sequences FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: domain_anti_patterns update_anti_patterns_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_anti_patterns_updated_at BEFORE UPDATE ON public.domain_anti_patterns FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: artifact_collections update_artifact_collections_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_artifact_collections_updated_at BEFORE UPDATE ON public.artifact_collections FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: arxiv_papers update_arxiv_papers_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_arxiv_papers_updated_at BEFORE UPDATE ON public.arxiv_papers FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: bucket_artifacts update_bucket_artifacts_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_bucket_artifacts_updated_at BEFORE UPDATE ON public.bucket_artifacts FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: code_repositories update_code_repos_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_code_repos_updated_at BEFORE UPDATE ON public.code_repositories FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: code_snippets update_code_snippets_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_code_snippets_updated_at BEFORE UPDATE ON public.code_snippets FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: compaction_results update_compaction_results_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_compaction_results_updated_at BEFORE UPDATE ON public.compaction_results FOR EACH ROW EXECUTE FUNCTION public.update_compaction_updated_at();


--
-- Name: conversations update_conversations_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_conversations_updated_at BEFORE UPDATE ON public.conversations FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: service_credentials update_credentials_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_credentials_updated_at BEFORE UPDATE ON public.service_credentials FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: curation_configs update_curation_configs_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_curation_configs_timestamp BEFORE UPDATE ON public.curation_configs FOR EACH ROW EXECUTE FUNCTION public.update_curation_config_timestamp();


--
-- Name: fine_tune_datasets update_datasets_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_datasets_updated_at BEFORE UPDATE ON public.fine_tune_datasets FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: domain_code_examples update_domain_examples_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_domain_examples_updated_at BEFORE UPDATE ON public.domain_code_examples FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: domain_model_parameters update_domain_model_params_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_domain_model_params_updated_at BEFORE UPDATE ON public.domain_model_parameters FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: domain_parameter_presets update_domain_params_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_domain_params_updated_at BEFORE UPDATE ON public.domain_parameter_presets FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: domain_style_guides update_domain_styles_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_domain_styles_updated_at BEFORE UPDATE ON public.domain_style_guides FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: forum_posts update_forum_posts_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_forum_posts_timestamp BEFORE UPDATE ON public.forum_posts FOR EACH ROW WHEN ((old.body IS DISTINCT FROM new.body)) EXECUTE FUNCTION public.update_forum_post_timestamp();


--
-- Name: forum_threads update_forum_threads_timestamp; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_forum_threads_timestamp BEFORE UPDATE ON public.forum_threads FOR EACH ROW EXECUTE FUNCTION public.update_forum_thread_timestamp();


--
-- Name: grading_results update_grading_results_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_grading_results_updated_at BEFORE UPDATE ON public.grading_results FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: council_sessions update_model_stats_on_session_complete; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_model_stats_on_session_complete AFTER UPDATE OF status ON public.council_sessions FOR EACH ROW WHEN ((((new.status)::text = 'completed'::text) AND ((old.status)::text <> 'completed'::text))) EXECUTE FUNCTION public.update_council_model_stats();


--
-- Name: autonomous_sessions update_patterns_on_session_complete; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_patterns_on_session_complete AFTER UPDATE OF success, completed_at ON public.autonomous_sessions FOR EACH ROW WHEN (((new.success IS NOT NULL) AND (new.completed_at IS NOT NULL))) EXECUTE FUNCTION public.update_pattern_success_rates();


--
-- Name: published_content update_published_content_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_published_content_updated_at BEFORE UPDATE ON public.published_content FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: code_rooms update_rooms_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_rooms_updated_at BEFORE UPDATE ON public.code_rooms FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: fine_tune_runs update_runs_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_runs_updated_at BEFORE UPDATE ON public.fine_tune_runs FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: scheduled_jobs update_scheduled_jobs_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_scheduled_jobs_updated_at BEFORE UPDATE ON public.scheduled_jobs FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: sprite_sheets update_sprite_sheets_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_sprite_sheets_updated_at BEFORE UPDATE ON public.sprite_sheets FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: submissions update_submissions_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_submissions_updated_at BEFORE UPDATE ON public.submissions FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: content_subscribers update_subscribers_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_subscribers_updated_at BEFORE UPDATE ON public.content_subscribers FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: training_task_assignments update_task_streak_trigger; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_task_streak_trigger AFTER UPDATE ON public.training_task_assignments FOR EACH ROW EXECUTE FUNCTION public.trigger_update_task_streak();


--
-- Name: ollama_training_jobs update_training_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_training_updated_at BEFORE UPDATE ON public.ollama_training_jobs FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: visual_effects update_visual_effects_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_visual_effects_updated_at BEFORE UPDATE ON public.visual_effects FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: visual_themes update_visual_themes_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_visual_themes_updated_at BEFORE UPDATE ON public.visual_themes FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: webhook_endpoints update_webhooks_updated_at; Type: TRIGGER; Schema: public; Owner: matthewmauer
--

CREATE TRIGGER update_webhooks_updated_at BEFORE UPDATE ON public.webhook_endpoints FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: achievements achievements_path_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.achievements
    ADD CONSTRAINT achievements_path_id_fkey FOREIGN KEY (path_id) REFERENCES public.learning_paths(path_id);


--
-- Name: activity_comments activity_comments_activity_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_comments
    ADD CONSTRAINT activity_comments_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.github_activity_feed(id) ON DELETE CASCADE;


--
-- Name: activity_likes activity_likes_activity_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_likes
    ADD CONSTRAINT activity_likes_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.github_activity_feed(id) ON DELETE CASCADE;


--
-- Name: activity_reposts activity_reposts_activity_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.activity_reposts
    ADD CONSTRAINT activity_reposts_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.github_activity_feed(id) ON DELETE CASCADE;


--
-- Name: ad_campaigns ad_campaigns_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ad_campaigns
    ADD CONSTRAINT ad_campaigns_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES public.experiments(id);


--
-- Name: agent_metrics agent_metrics_response_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.agent_metrics
    ADD CONSTRAINT agent_metrics_response_id_fkey FOREIGN KEY (response_id) REFERENCES public.ai_responses(id) ON DELETE SET NULL;


--
-- Name: ai_embeddings ai_embeddings_response_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ai_embeddings
    ADD CONSTRAINT ai_embeddings_response_id_fkey FOREIGN KEY (response_id) REFERENCES public.ai_responses(id) ON DELETE CASCADE;


--
-- Name: analytics_attribution analytics_attribution_conversion_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.analytics_attribution
    ADD CONSTRAINT analytics_attribution_conversion_id_fkey FOREIGN KEY (conversion_id) REFERENCES public.analytics_conversions(id) ON DELETE CASCADE;


--
-- Name: animation_sequences animation_sequences_sheet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.animation_sequences
    ADD CONSTRAINT animation_sequences_sheet_id_fkey FOREIGN KEY (sheet_id) REFERENCES public.sprite_sheets(id) ON DELETE CASCADE;


--
-- Name: api_keys api_keys_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_keys
    ADD CONSTRAINT api_keys_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id);


--
-- Name: api_request_log api_request_log_developer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_request_log
    ADD CONSTRAINT api_request_log_developer_id_fkey FOREIGN KEY (developer_id) REFERENCES public.developers(id) ON DELETE SET NULL;


--
-- Name: api_usage api_usage_developer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.api_usage
    ADD CONSTRAINT api_usage_developer_id_fkey FOREIGN KEY (developer_id) REFERENCES public.developers(id) ON DELETE CASCADE;


--
-- Name: app_instances app_instances_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.app_instances
    ADD CONSTRAINT app_instances_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.app_templates(template_id);


--
-- Name: app_launch_log app_launch_log_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.app_launch_log
    ADD CONSTRAINT app_launch_log_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id) ON DELETE CASCADE;


--
-- Name: app_ratings app_ratings_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.app_ratings
    ADD CONSTRAINT app_ratings_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.app_templates(template_id);


--
-- Name: artifact_collection_members artifact_collection_members_artifact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_collection_members
    ADD CONSTRAINT artifact_collection_members_artifact_id_fkey FOREIGN KEY (artifact_id) REFERENCES public.bucket_artifacts(artifact_id) ON DELETE CASCADE;


--
-- Name: artifact_collection_members artifact_collection_members_collection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_collection_members
    ADD CONSTRAINT artifact_collection_members_collection_id_fkey FOREIGN KEY (collection_id) REFERENCES public.artifact_collections(collection_id) ON DELETE CASCADE;


--
-- Name: artifact_collections artifact_collections_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_collections
    ADD CONSTRAINT artifact_collections_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id) ON DELETE CASCADE;


--
-- Name: artifact_dependencies artifact_dependencies_artifact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_dependencies
    ADD CONSTRAINT artifact_dependencies_artifact_id_fkey FOREIGN KEY (artifact_id) REFERENCES public.bucket_artifacts(artifact_id) ON DELETE CASCADE;


--
-- Name: artifact_dependencies artifact_dependencies_depends_on_artifact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_dependencies
    ADD CONSTRAINT artifact_dependencies_depends_on_artifact_id_fkey FOREIGN KEY (depends_on_artifact_id) REFERENCES public.bucket_artifacts(artifact_id) ON DELETE CASCADE;


--
-- Name: artifact_usage_log artifact_usage_log_artifact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.artifact_usage_log
    ADD CONSTRAINT artifact_usage_log_artifact_id_fkey FOREIGN KEY (artifact_id) REFERENCES public.bucket_artifacts(artifact_id) ON DELETE CASCADE;


--
-- Name: autonomous_code_matches autonomous_code_matches_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.autonomous_code_matches
    ADD CONSTRAINT autonomous_code_matches_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.autonomous_sessions(session_id) ON DELETE CASCADE;


--
-- Name: autonomous_patterns autonomous_patterns_matched_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.autonomous_patterns
    ADD CONSTRAINT autonomous_patterns_matched_session_id_fkey FOREIGN KEY (matched_session_id) REFERENCES public.autonomous_sessions(session_id);


--
-- Name: autonomous_patterns autonomous_patterns_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.autonomous_patterns
    ADD CONSTRAINT autonomous_patterns_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.autonomous_sessions(session_id) ON DELETE CASCADE;


--
-- Name: autonomous_sessions autonomous_sessions_council_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.autonomous_sessions
    ADD CONSTRAINT autonomous_sessions_council_session_id_fkey FOREIGN KEY (council_session_id) REFERENCES public.council_sessions(session_id);


--
-- Name: benchmark_measurements benchmark_measurements_model_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.benchmark_measurements
    ADD CONSTRAINT benchmark_measurements_model_id_fkey FOREIGN KEY (model_id) REFERENCES public.model_benchmarks(model_id) ON DELETE CASCADE;


--
-- Name: brand_ideas brand_ideas_profile_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_ideas
    ADD CONSTRAINT brand_ideas_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.user_profiles(id) ON DELETE CASCADE;


--
-- Name: bucket_artifacts bucket_artifacts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_artifacts
    ADD CONSTRAINT bucket_artifacts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id) ON DELETE CASCADE;


--
-- Name: bucket_artifacts bucket_artifacts_parent_artifact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_artifacts
    ADD CONSTRAINT bucket_artifacts_parent_artifact_id_fkey FOREIGN KEY (parent_artifact_id) REFERENCES public.bucket_artifacts(artifact_id);


--
-- Name: bucket_artifacts bucket_artifacts_reasoning_log_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_artifacts
    ADD CONSTRAINT bucket_artifacts_reasoning_log_id_fkey FOREIGN KEY (reasoning_log_id) REFERENCES public.bucket_reasoning_log(reasoning_id);


--
-- Name: bucket_artifacts bucket_artifacts_superseded_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_artifacts
    ADD CONSTRAINT bucket_artifacts_superseded_by_fkey FOREIGN KEY (superseded_by) REFERENCES public.bucket_artifacts(artifact_id);


--
-- Name: bucket_comments bucket_comments_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_comments
    ADD CONSTRAINT bucket_comments_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id) ON DELETE CASCADE;


--
-- Name: bucket_comments bucket_comments_parent_comment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_comments
    ADD CONSTRAINT bucket_comments_parent_comment_id_fkey FOREIGN KEY (parent_comment_id) REFERENCES public.bucket_comments(comment_id);


--
-- Name: bucket_comments bucket_comments_related_reasoning_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_comments
    ADD CONSTRAINT bucket_comments_related_reasoning_id_fkey FOREIGN KEY (related_reasoning_id) REFERENCES public.bucket_reasoning_log(reasoning_id);


--
-- Name: bucket_comments bucket_comments_related_todo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_comments
    ADD CONSTRAINT bucket_comments_related_todo_id_fkey FOREIGN KEY (related_todo_id) REFERENCES public.bucket_todos(todo_id);


--
-- Name: bucket_reasoning_log bucket_reasoning_log_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_reasoning_log
    ADD CONSTRAINT bucket_reasoning_log_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id) ON DELETE CASCADE;


--
-- Name: bucket_todos bucket_todos_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_todos
    ADD CONSTRAINT bucket_todos_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id) ON DELETE CASCADE;


--
-- Name: bucket_todos bucket_todos_related_reasoning_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_todos
    ADD CONSTRAINT bucket_todos_related_reasoning_id_fkey FOREIGN KEY (related_reasoning_id) REFERENCES public.bucket_reasoning_log(reasoning_id);


--
-- Name: bucket_versions bucket_versions_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.bucket_versions
    ADD CONSTRAINT bucket_versions_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id) ON DELETE CASCADE;


--
-- Name: campaign_variants campaign_variants_campaign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.campaign_variants
    ADD CONSTRAINT campaign_variants_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES public.ad_campaigns(campaign_id);


--
-- Name: campaign_variants campaign_variants_experiment_variant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.campaign_variants
    ADD CONSTRAINT campaign_variants_experiment_variant_id_fkey FOREIGN KEY (experiment_variant_id) REFERENCES public.experiment_variants(id);


--
-- Name: code_embeddings code_embeddings_snippet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_embeddings
    ADD CONSTRAINT code_embeddings_snippet_id_fkey FOREIGN KEY (snippet_id) REFERENCES public.code_snippets(id) ON DELETE CASCADE;


--
-- Name: code_room_messages code_room_messages_room_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_messages
    ADD CONSTRAINT code_room_messages_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.code_rooms(id) ON DELETE CASCADE;


--
-- Name: code_room_messages code_room_messages_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_messages
    ADD CONSTRAINT code_room_messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: code_room_repositories code_room_repositories_repo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_repositories
    ADD CONSTRAINT code_room_repositories_repo_id_fkey FOREIGN KEY (repo_id) REFERENCES public.code_repositories(id) ON DELETE CASCADE;


--
-- Name: code_room_repositories code_room_repositories_room_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_room_repositories
    ADD CONSTRAINT code_room_repositories_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.code_rooms(id) ON DELETE CASCADE;


--
-- Name: code_rooms code_rooms_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_rooms
    ADD CONSTRAINT code_rooms_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id);


--
-- Name: code_snippets code_snippets_repo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_snippets
    ADD CONSTRAINT code_snippets_repo_id_fkey FOREIGN KEY (repo_id) REFERENCES public.code_repositories(id) ON DELETE CASCADE;


--
-- Name: code_usage code_usage_snippet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_usage
    ADD CONSTRAINT code_usage_snippet_id_fkey FOREIGN KEY (snippet_id) REFERENCES public.code_snippets(id) ON DELETE CASCADE;


--
-- Name: code_usage code_usage_used_in_response_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.code_usage
    ADD CONSTRAINT code_usage_used_in_response_fkey FOREIGN KEY (used_in_response) REFERENCES public.ai_responses(id) ON DELETE CASCADE;


--
-- Name: content_generation_queue content_generation_queue_result_content_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_generation_queue
    ADD CONSTRAINT content_generation_queue_result_content_id_fkey FOREIGN KEY (result_content_id) REFERENCES public.published_content(id);


--
-- Name: content_notifications content_notifications_content_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_notifications
    ADD CONSTRAINT content_notifications_content_id_fkey FOREIGN KEY (content_id) REFERENCES public.published_content(id) ON DELETE CASCADE;


--
-- Name: content_notifications content_notifications_subscriber_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.content_notifications
    ADD CONSTRAINT content_notifications_subscriber_id_fkey FOREIGN KEY (subscriber_id) REFERENCES public.content_subscribers(id) ON DELETE CASCADE;


--
-- Name: context_drift_log context_drift_log_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.context_drift_log
    ADD CONSTRAINT context_drift_log_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id);


--
-- Name: context_drift_log context_drift_log_snapshot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.context_drift_log
    ADD CONSTRAINT context_drift_log_snapshot_id_fkey FOREIGN KEY (snapshot_id) REFERENCES public.domain_context_snapshots(snapshot_id);


--
-- Name: context_lock_files context_lock_files_snapshot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.context_lock_files
    ADD CONSTRAINT context_lock_files_snapshot_id_fkey FOREIGN KEY (snapshot_id) REFERENCES public.domain_context_snapshots(snapshot_id) ON DELETE CASCADE;


--
-- Name: council_debates council_debates_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_debates
    ADD CONSTRAINT council_debates_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.council_sessions(session_id) ON DELETE CASCADE;


--
-- Name: council_model_stats council_model_stats_last_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_model_stats
    ADD CONSTRAINT council_model_stats_last_session_id_fkey FOREIGN KEY (last_session_id) REFERENCES public.council_sessions(session_id);


--
-- Name: council_proposals council_proposals_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_proposals
    ADD CONSTRAINT council_proposals_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.council_sessions(session_id) ON DELETE CASCADE;


--
-- Name: council_themes council_themes_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_themes
    ADD CONSTRAINT council_themes_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.council_sessions(session_id) ON DELETE CASCADE;


--
-- Name: council_workflows council_workflows_depends_on_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_workflows
    ADD CONSTRAINT council_workflows_depends_on_fkey FOREIGN KEY (depends_on) REFERENCES public.council_workflows(workflow_id);


--
-- Name: council_workflows council_workflows_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.council_workflows
    ADD CONSTRAINT council_workflows_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.council_sessions(session_id) ON DELETE CASCADE;


--
-- Name: credential_usage_log credential_usage_log_credential_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.credential_usage_log
    ADD CONSTRAINT credential_usage_log_credential_id_fkey FOREIGN KEY (credential_id) REFERENCES public.service_credentials(id) ON DELETE CASCADE;


--
-- Name: cross_domain_analytics cross_domain_analytics_source_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.cross_domain_analytics
    ADD CONSTRAINT cross_domain_analytics_source_domain_id_fkey FOREIGN KEY (source_domain_id) REFERENCES public.domain_portfolio(domain_id);


--
-- Name: cross_domain_analytics cross_domain_analytics_target_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.cross_domain_analytics
    ADD CONSTRAINT cross_domain_analytics_target_domain_id_fkey FOREIGN KEY (target_domain_id) REFERENCES public.domain_portfolio(domain_id);


--
-- Name: curation_reading_history curation_reading_history_content_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.curation_reading_history
    ADD CONSTRAINT curation_reading_history_content_id_fkey FOREIGN KEY (content_id) REFERENCES public.curated_content(id) ON DELETE CASCADE;


--
-- Name: data_normalization_log data_normalization_log_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.data_normalization_log
    ADD CONSTRAINT data_normalization_log_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.mini_games(game_id) ON DELETE CASCADE;


--
-- Name: decision_archives decision_archives_decision_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_archives
    ADD CONSTRAINT decision_archives_decision_id_fkey FOREIGN KEY (decision_id) REFERENCES public.decisions(id) ON DELETE CASCADE;


--
-- Name: decision_references decision_references_decision_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_references
    ADD CONSTRAINT decision_references_decision_id_fkey FOREIGN KEY (decision_id) REFERENCES public.decisions(id) ON DELETE CASCADE;


--
-- Name: decision_references decision_references_referenced_decision_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_references
    ADD CONSTRAINT decision_references_referenced_decision_id_fkey FOREIGN KEY (referenced_decision_id) REFERENCES public.decisions(id) ON DELETE CASCADE;


--
-- Name: decision_todos decision_todos_decision_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_todos
    ADD CONSTRAINT decision_todos_decision_id_fkey FOREIGN KEY (decision_id) REFERENCES public.decisions(id) ON DELETE CASCADE;


--
-- Name: decision_versions decision_versions_decision_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decision_versions
    ADD CONSTRAINT decision_versions_decision_id_fkey FOREIGN KEY (decision_id) REFERENCES public.decisions(id) ON DELETE CASCADE;


--
-- Name: decisions decisions_replaced_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.decisions
    ADD CONSTRAINT decisions_replaced_by_fkey FOREIGN KEY (replaced_by) REFERENCES public.decisions(id);


--
-- Name: developer_subscriptions developer_subscriptions_developer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.developer_subscriptions
    ADD CONSTRAINT developer_subscriptions_developer_id_fkey FOREIGN KEY (developer_id) REFERENCES public.developers(id) ON DELETE CASCADE;


--
-- Name: document_chunks document_chunks_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.document_chunks
    ADD CONSTRAINT document_chunks_note_id_fkey FOREIGN KEY (note_id) REFERENCES public.notes(id) ON DELETE CASCADE;


--
-- Name: domain_anti_patterns domain_anti_patterns_related_good_pattern_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_anti_patterns
    ADD CONSTRAINT domain_anti_patterns_related_good_pattern_id_fkey FOREIGN KEY (related_good_pattern_id) REFERENCES public.domain_code_examples(example_id);


--
-- Name: domain_challenges domain_challenges_winner_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_challenges
    ADD CONSTRAINT domain_challenges_winner_domain_id_fkey FOREIGN KEY (winner_domain_id) REFERENCES public.domain_portfolio(domain_id);


--
-- Name: domain_code_examples domain_code_examples_generated_from_artifact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_code_examples
    ADD CONSTRAINT domain_code_examples_generated_from_artifact_id_fkey FOREIGN KEY (generated_from_artifact_id) REFERENCES public.bucket_artifacts(artifact_id);


--
-- Name: domain_code_examples domain_code_examples_superseded_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_code_examples
    ADD CONSTRAINT domain_code_examples_superseded_by_fkey FOREIGN KEY (superseded_by) REFERENCES public.domain_code_examples(example_id);


--
-- Name: domain_context_snapshots domain_context_snapshots_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_context_snapshots
    ADD CONSTRAINT domain_context_snapshots_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id);


--
-- Name: domain_context_snapshots domain_context_snapshots_parent_snapshot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_context_snapshots
    ADD CONSTRAINT domain_context_snapshots_parent_snapshot_id_fkey FOREIGN KEY (parent_snapshot_id) REFERENCES public.domain_context_snapshots(snapshot_id);


--
-- Name: domain_context_snapshots domain_context_snapshots_rolled_back_from_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_context_snapshots
    ADD CONSTRAINT domain_context_snapshots_rolled_back_from_fkey FOREIGN KEY (rolled_back_from) REFERENCES public.domain_context_snapshots(snapshot_id);


--
-- Name: domain_implementations domain_implementations_challenge_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_implementations
    ADD CONSTRAINT domain_implementations_challenge_id_fkey FOREIGN KEY (challenge_id) REFERENCES public.domain_challenges(challenge_id) ON DELETE CASCADE;


--
-- Name: domain_implementations domain_implementations_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_implementations
    ADD CONSTRAINT domain_implementations_domain_id_fkey FOREIGN KEY (domain_id) REFERENCES public.domain_portfolio(domain_id) ON DELETE CASCADE;


--
-- Name: domain_judgments domain_judgments_comparison_implementation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_judgments
    ADD CONSTRAINT domain_judgments_comparison_implementation_id_fkey FOREIGN KEY (comparison_implementation_id) REFERENCES public.domain_implementations(implementation_id);


--
-- Name: domain_judgments domain_judgments_implementation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_judgments
    ADD CONSTRAINT domain_judgments_implementation_id_fkey FOREIGN KEY (implementation_id) REFERENCES public.domain_implementations(implementation_id) ON DELETE CASCADE;


--
-- Name: domain_model_parameters domain_model_parameters_recommended_preset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_model_parameters
    ADD CONSTRAINT domain_model_parameters_recommended_preset_id_fkey FOREIGN KEY (recommended_preset_id) REFERENCES public.domain_parameter_presets(preset_id);


--
-- Name: domain_parameter_presets domain_parameter_presets_parent_preset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_parameter_presets
    ADD CONSTRAINT domain_parameter_presets_parent_preset_id_fkey FOREIGN KEY (parent_preset_id) REFERENCES public.domain_parameter_presets(preset_id);


--
-- Name: domain_pattern_usage domain_pattern_usage_example_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_pattern_usage
    ADD CONSTRAINT domain_pattern_usage_example_id_fkey FOREIGN KEY (example_id) REFERENCES public.domain_code_examples(example_id) ON DELETE CASCADE;


--
-- Name: domain_pattern_usage domain_pattern_usage_used_in_artifact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.domain_pattern_usage
    ADD CONSTRAINT domain_pattern_usage_used_in_artifact_id_fkey FOREIGN KEY (used_in_artifact_id) REFERENCES public.bucket_artifacts(artifact_id);


--
-- Name: drip_campaigns drip_campaigns_path_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.drip_campaigns
    ADD CONSTRAINT drip_campaigns_path_id_fkey FOREIGN KEY (path_id) REFERENCES public.learning_paths(path_id);


--
-- Name: elo_matches elo_matches_item_a_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_matches
    ADD CONSTRAINT elo_matches_item_a_id_fkey FOREIGN KEY (item_a_id) REFERENCES public.elo_items(id) ON DELETE CASCADE;


--
-- Name: elo_matches elo_matches_item_b_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_matches
    ADD CONSTRAINT elo_matches_item_b_id_fkey FOREIGN KEY (item_b_id) REFERENCES public.elo_items(id) ON DELETE CASCADE;


--
-- Name: elo_matches elo_matches_winner_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_matches
    ADD CONSTRAINT elo_matches_winner_id_fkey FOREIGN KEY (winner_id) REFERENCES public.elo_items(id);


--
-- Name: elo_rating_history elo_rating_history_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_rating_history
    ADD CONSTRAINT elo_rating_history_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.elo_items(id) ON DELETE CASCADE;


--
-- Name: elo_rating_history elo_rating_history_match_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_rating_history
    ADD CONSTRAINT elo_rating_history_match_id_fkey FOREIGN KEY (match_id) REFERENCES public.elo_matches(id);


--
-- Name: elo_user_votes elo_user_votes_item_a_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_user_votes
    ADD CONSTRAINT elo_user_votes_item_a_id_fkey FOREIGN KEY (item_a_id) REFERENCES public.elo_items(id) ON DELETE CASCADE;


--
-- Name: elo_user_votes elo_user_votes_item_b_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_user_votes
    ADD CONSTRAINT elo_user_votes_item_b_id_fkey FOREIGN KEY (item_b_id) REFERENCES public.elo_items(id) ON DELETE CASCADE;


--
-- Name: elo_user_votes elo_user_votes_match_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_user_votes
    ADD CONSTRAINT elo_user_votes_match_id_fkey FOREIGN KEY (match_id) REFERENCES public.elo_matches(id) ON DELETE CASCADE;


--
-- Name: elo_user_votes elo_user_votes_winner_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.elo_user_votes
    ADD CONSTRAINT elo_user_votes_winner_id_fkey FOREIGN KEY (winner_id) REFERENCES public.elo_items(id) ON DELETE SET NULL;


--
-- Name: embed_analytics embed_analytics_site_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_analytics
    ADD CONSTRAINT embed_analytics_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.embed_sites(site_id) ON DELETE CASCADE;


--
-- Name: embed_consents embed_consents_site_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_consents
    ADD CONSTRAINT embed_consents_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.embed_sites(site_id) ON DELETE CASCADE;


--
-- Name: embed_events embed_events_site_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_events
    ADD CONSTRAINT embed_events_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.embed_sites(site_id) ON DELETE CASCADE;


--
-- Name: embed_events embed_events_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_events
    ADD CONSTRAINT embed_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: embed_sessions embed_sessions_site_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sessions
    ADD CONSTRAINT embed_sessions_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.embed_sites(site_id) ON DELETE CASCADE;


--
-- Name: embed_sessions embed_sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sessions
    ADD CONSTRAINT embed_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: embed_sites embed_sites_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_sites
    ADD CONSTRAINT embed_sites_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: embed_widgets embed_widgets_site_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.embed_widgets
    ADD CONSTRAINT embed_widgets_site_id_fkey FOREIGN KEY (site_id) REFERENCES public.embed_sites(site_id) ON DELETE CASCADE;


--
-- Name: equipped_items equipped_items_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.equipped_items
    ADD CONSTRAINT equipped_items_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id) ON DELETE CASCADE;


--
-- Name: equipped_items equipped_items_app_id_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.equipped_items
    ADD CONSTRAINT equipped_items_app_id_user_id_fkey FOREIGN KEY (app_id, user_id) REFERENCES public.player_inventories(app_id, user_id) ON DELETE CASCADE;


--
-- Name: experiment_assignments experiment_assignments_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_assignments
    ADD CONSTRAINT experiment_assignments_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES public.experiments(id) ON DELETE CASCADE;


--
-- Name: experiment_assignments experiment_assignments_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_assignments
    ADD CONSTRAINT experiment_assignments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: experiment_assignments experiment_assignments_variant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_assignments
    ADD CONSTRAINT experiment_assignments_variant_id_fkey FOREIGN KEY (variant_id) REFERENCES public.experiment_variants(id) ON DELETE CASCADE;


--
-- Name: experiment_results experiment_results_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_results
    ADD CONSTRAINT experiment_results_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES public.experiments(id) ON DELETE CASCADE;


--
-- Name: experiment_results experiment_results_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_results
    ADD CONSTRAINT experiment_results_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: experiment_results experiment_results_variant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_results
    ADD CONSTRAINT experiment_results_variant_id_fkey FOREIGN KEY (variant_id) REFERENCES public.experiment_variants(id) ON DELETE CASCADE;


--
-- Name: experiment_statistics experiment_statistics_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_statistics
    ADD CONSTRAINT experiment_statistics_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES public.experiments(id) ON DELETE CASCADE;


--
-- Name: experiment_statistics experiment_statistics_variant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_statistics
    ADD CONSTRAINT experiment_statistics_variant_id_fkey FOREIGN KEY (variant_id) REFERENCES public.experiment_variants(id) ON DELETE CASCADE;


--
-- Name: experiment_variants experiment_variants_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.experiment_variants
    ADD CONSTRAINT experiment_variants_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES public.experiments(id) ON DELETE CASCADE;


--
-- Name: fine_tune_runs fine_tune_runs_dataset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.fine_tune_runs
    ADD CONSTRAINT fine_tune_runs_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES public.fine_tune_datasets(id) ON DELETE CASCADE;


--
-- Name: flow_executions flow_executions_flow_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.flow_executions
    ADD CONSTRAINT flow_executions_flow_id_fkey FOREIGN KEY (flow_id) REFERENCES public.automated_flows(id) ON DELETE CASCADE;


--
-- Name: forum_posts forum_posts_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_posts
    ADD CONSTRAINT forum_posts_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.forum_posts(id) ON DELETE CASCADE;


--
-- Name: forum_posts forum_posts_thread_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_posts
    ADD CONSTRAINT forum_posts_thread_id_fkey FOREIGN KEY (thread_id) REFERENCES public.forum_threads(id) ON DELETE CASCADE;


--
-- Name: forum_threads forum_threads_content_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_threads
    ADD CONSTRAINT forum_threads_content_id_fkey FOREIGN KEY (content_id) REFERENCES public.curated_content(id) ON DELETE CASCADE;


--
-- Name: forum_votes forum_votes_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_votes
    ADD CONSTRAINT forum_votes_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.forum_posts(id) ON DELETE CASCADE;


--
-- Name: forum_votes forum_votes_thread_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.forum_votes
    ADD CONSTRAINT forum_votes_thread_id_fkey FOREIGN KEY (thread_id) REFERENCES public.forum_threads(id) ON DELETE CASCADE;


--
-- Name: funding_registry funding_registry_package_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.funding_registry
    ADD CONSTRAINT funding_registry_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.vendored_packages(id) ON DELETE CASCADE;


--
-- Name: game_assets game_assets_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.game_assets
    ADD CONSTRAINT game_assets_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id) ON DELETE CASCADE;


--
-- Name: brand_bot_posts game_lore_bot_posts_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_bot_posts
    ADD CONSTRAINT game_lore_bot_posts_game_id_fkey FOREIGN KEY (domain_id) REFERENCES public.brand_domains(id);


--
-- Name: brand_bot_posts game_lore_bot_posts_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_bot_posts
    ADD CONSTRAINT game_lore_bot_posts_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.brand_discussion_templates(id);


--
-- Name: brand_personas game_lore_characters_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_personas
    ADD CONSTRAINT game_lore_characters_game_id_fkey FOREIGN KEY (domain_id) REFERENCES public.brand_domains(id) ON DELETE CASCADE;


--
-- Name: brand_milestones game_lore_events_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_milestones
    ADD CONSTRAINT game_lore_events_game_id_fkey FOREIGN KEY (domain_id) REFERENCES public.brand_domains(id) ON DELETE CASCADE;


--
-- Name: brand_knowledge game_lore_fragments_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_knowledge
    ADD CONSTRAINT game_lore_fragments_game_id_fkey FOREIGN KEY (domain_id) REFERENCES public.brand_domains(id) ON DELETE CASCADE;


--
-- Name: brand_projects game_lore_locations_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_projects
    ADD CONSTRAINT game_lore_locations_game_id_fkey FOREIGN KEY (domain_id) REFERENCES public.brand_domains(id) ON DELETE CASCADE;


--
-- Name: brand_projects game_lore_locations_parent_location_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.brand_projects
    ADD CONSTRAINT game_lore_locations_parent_location_id_fkey FOREIGN KEY (parent_project_id) REFERENCES public.brand_projects(id);


--
-- Name: grading_results grading_results_submission_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.grading_results
    ADD CONSTRAINT grading_results_submission_id_fkey FOREIGN KEY (submission_id) REFERENCES public.submissions(id) ON DELETE CASCADE;


--
-- Name: handle_history handle_history_changed_by_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.handle_history
    ADD CONSTRAINT handle_history_changed_by_user_id_fkey FOREIGN KEY (changed_by_user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: handle_history handle_history_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.handle_history
    ADD CONSTRAINT handle_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: handle_reservations handle_reservations_reserved_for_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.handle_reservations
    ADD CONSTRAINT handle_reservations_reserved_for_user_id_fkey FOREIGN KEY (reserved_for_user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: hint_ratings hint_ratings_hint_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.hint_ratings
    ADD CONSTRAINT hint_ratings_hint_id_fkey FOREIGN KEY (hint_id) REFERENCES public.student_hints(hint_id) ON DELETE CASCADE;


--
-- Name: idea_purchases idea_purchases_idea_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.idea_purchases
    ADD CONSTRAINT idea_purchases_idea_id_fkey FOREIGN KEY (idea_id) REFERENCES public.marketplace_ideas(id) ON DELETE CASCADE;


--
-- Name: idea_votes idea_votes_idea_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.idea_votes
    ADD CONSTRAINT idea_votes_idea_id_fkey FOREIGN KEY (idea_id) REFERENCES public.marketplace_ideas(id) ON DELETE CASCADE;


--
-- Name: identity_resolution_log identity_resolution_log_game_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.identity_resolution_log
    ADD CONSTRAINT identity_resolution_log_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.mini_games(game_id) ON DELETE CASCADE;


--
-- Name: iiif_cache_stats iiif_cache_stats_image_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_cache_stats
    ADD CONSTRAINT iiif_cache_stats_image_id_fkey FOREIGN KEY (image_id) REFERENCES public.iiif_images(id) ON DELETE CASCADE;


--
-- Name: iiif_canvas_images iiif_canvas_images_image_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_canvas_images
    ADD CONSTRAINT iiif_canvas_images_image_id_fkey FOREIGN KEY (image_id) REFERENCES public.iiif_images(id) ON DELETE CASCADE;


--
-- Name: iiif_canvas_images iiif_canvas_images_manifest_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.iiif_canvas_images
    ADD CONSTRAINT iiif_canvas_images_manifest_id_fkey FOREIGN KEY (manifest_id) REFERENCES public.iiif_manifests(id) ON DELETE CASCADE;


--
-- Name: incentive_tracker incentive_tracker_profile_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.incentive_tracker
    ADD CONSTRAINT incentive_tracker_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.user_profiles(id) ON DELETE CASCADE;


--
-- Name: inventory_items inventory_items_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.inventory_items
    ADD CONSTRAINT inventory_items_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id) ON DELETE CASCADE;


--
-- Name: inventory_items inventory_items_app_id_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.inventory_items
    ADD CONSTRAINT inventory_items_app_id_user_id_fkey FOREIGN KEY (app_id, user_id) REFERENCES public.player_inventories(app_id, user_id) ON DELETE CASCADE;


--
-- Name: job_execution_log job_execution_log_job_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.job_execution_log
    ADD CONSTRAINT job_execution_log_job_id_fkey FOREIGN KEY (job_id) REFERENCES public.scheduled_jobs(id) ON DELETE CASCADE;


--
-- Name: keyword_tracking keyword_tracking_primary_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.keyword_tracking
    ADD CONSTRAINT keyword_tracking_primary_domain_id_fkey FOREIGN KEY (primary_domain_id) REFERENCES public.domain_portfolio(domain_id);


--
-- Name: launcher_apps launcher_apps_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.launcher_apps
    ADD CONSTRAINT launcher_apps_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id) ON DELETE CASCADE;


--
-- Name: launcher_apps launcher_apps_folder_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.launcher_apps
    ADD CONSTRAINT launcher_apps_folder_id_fkey FOREIGN KEY (folder_id) REFERENCES public.launcher_folders(folder_id) ON DELETE SET NULL;


--
-- Name: learning_paths learning_paths_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.learning_paths
    ADD CONSTRAINT learning_paths_domain_id_fkey FOREIGN KEY (domain_id) REFERENCES public.domain_portfolio(domain_id) ON DELETE CASCADE;


--
-- Name: lesson_completions lesson_completions_implementation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lesson_completions
    ADD CONSTRAINT lesson_completions_implementation_id_fkey FOREIGN KEY (implementation_id) REFERENCES public.domain_implementations(implementation_id);


--
-- Name: lesson_completions lesson_completions_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lesson_completions
    ADD CONSTRAINT lesson_completions_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id) ON DELETE CASCADE;


--
-- Name: lesson_completions lesson_completions_progress_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lesson_completions
    ADD CONSTRAINT lesson_completions_progress_id_fkey FOREIGN KEY (progress_id) REFERENCES public.user_progress(progress_id) ON DELETE CASCADE;


--
-- Name: lessons lessons_challenge_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lessons
    ADD CONSTRAINT lessons_challenge_id_fkey FOREIGN KEY (challenge_id) REFERENCES public.domain_challenges(challenge_id);


--
-- Name: lessons lessons_path_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lessons
    ADD CONSTRAINT lessons_path_id_fkey FOREIGN KEY (path_id) REFERENCES public.learning_paths(path_id) ON DELETE CASCADE;


--
-- Name: lessons lessons_requires_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.lessons
    ADD CONSTRAINT lessons_requires_lesson_id_fkey FOREIGN KEY (requires_lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: message_agent_routing message_agent_routing_message_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.message_agent_routing
    ADD CONSTRAINT message_agent_routing_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.profile_messages(id) ON DELETE CASCADE;


--
-- Name: message_slack_routing message_slack_routing_message_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.message_slack_routing
    ADD CONSTRAINT message_slack_routing_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.profile_messages(id) ON DELETE CASCADE;


--
-- Name: mini_games mini_games_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.mini_games
    ADD CONSTRAINT mini_games_domain_id_fkey FOREIGN KEY (domain_id) REFERENCES public.domain_portfolio(domain_id);


--
-- Name: model_comparisons model_comparisons_our_model_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_comparisons
    ADD CONSTRAINT model_comparisons_our_model_id_fkey FOREIGN KEY (our_model_id) REFERENCES public.model_benchmarks(model_id);


--
-- Name: model_rankings model_rankings_use_case_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_rankings
    ADD CONSTRAINT model_rankings_use_case_id_fkey FOREIGN KEY (use_case_id) REFERENCES public.model_use_cases(id);


--
-- Name: model_version_deployments model_version_deployments_version_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_version_deployments
    ADD CONSTRAINT model_version_deployments_version_id_fkey FOREIGN KEY (version_id) REFERENCES public.model_versions(id) ON DELETE CASCADE;


--
-- Name: model_version_performance model_version_performance_version_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.model_version_performance
    ADD CONSTRAINT model_version_performance_version_id_fkey FOREIGN KEY (version_id) REFERENCES public.model_versions(id) ON DELETE CASCADE;


--
-- Name: newsletter_delivery_log newsletter_delivery_log_config_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.newsletter_delivery_log
    ADD CONSTRAINT newsletter_delivery_log_config_id_fkey FOREIGN KEY (config_id) REFERENCES public.curation_configs(id) ON DELETE CASCADE;


--
-- Name: note_access_log note_access_log_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.note_access_log
    ADD CONSTRAINT note_access_log_note_id_fkey FOREIGN KEY (note_id) REFERENCES public.notes(id) ON DELETE CASCADE;


--
-- Name: note_relationships note_relationships_source_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.note_relationships
    ADD CONSTRAINT note_relationships_source_note_id_fkey FOREIGN KEY (source_note_id) REFERENCES public.notes(id) ON DELETE CASCADE;


--
-- Name: note_relationships note_relationships_target_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.note_relationships
    ADD CONSTRAINT note_relationships_target_note_id_fkey FOREIGN KEY (target_note_id) REFERENCES public.notes(id) ON DELETE CASCADE;


--
-- Name: ollama_training_jobs ollama_training_jobs_room_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.ollama_training_jobs
    ADD CONSTRAINT ollama_training_jobs_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.code_rooms(id);


--
-- Name: package_dependencies package_dependencies_parent_package_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_dependencies
    ADD CONSTRAINT package_dependencies_parent_package_id_fkey FOREIGN KEY (parent_package_id) REFERENCES public.vendored_packages(id) ON DELETE CASCADE;


--
-- Name: package_intelligence package_intelligence_package_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_intelligence
    ADD CONSTRAINT package_intelligence_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.vendored_packages(id) ON DELETE CASCADE;


--
-- Name: package_usage_log package_usage_log_package_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.package_usage_log
    ADD CONSTRAINT package_usage_log_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.vendored_packages(id) ON DELETE CASCADE;


--
-- Name: paper_embeddings paper_embeddings_paper_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.paper_embeddings
    ADD CONSTRAINT paper_embeddings_paper_id_fkey FOREIGN KEY (paper_id) REFERENCES public.arxiv_papers(id) ON DELETE CASCADE;


--
-- Name: parameter_ab_tests parameter_ab_tests_control_preset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.parameter_ab_tests
    ADD CONSTRAINT parameter_ab_tests_control_preset_id_fkey FOREIGN KEY (control_preset_id) REFERENCES public.domain_parameter_presets(preset_id);


--
-- Name: parameter_ab_tests parameter_ab_tests_variant_preset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.parameter_ab_tests
    ADD CONSTRAINT parameter_ab_tests_variant_preset_id_fkey FOREIGN KEY (variant_preset_id) REFERENCES public.domain_parameter_presets(preset_id);


--
-- Name: parameter_performance_log parameter_performance_log_preset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.parameter_performance_log
    ADD CONSTRAINT parameter_performance_log_preset_id_fkey FOREIGN KEY (preset_id) REFERENCES public.domain_parameter_presets(preset_id) ON DELETE CASCADE;


--
-- Name: partner_clicks partner_clicks_source_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.partner_clicks
    ADD CONSTRAINT partner_clicks_source_domain_id_fkey FOREIGN KEY (source_domain_id) REFERENCES public.domain_portfolio(domain_id);


--
-- Name: partner_clicks partner_clicks_target_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.partner_clicks
    ADD CONSTRAINT partner_clicks_target_domain_id_fkey FOREIGN KEY (target_domain_id) REFERENCES public.domain_portfolio(domain_id);


--
-- Name: partner_rotations partner_rotations_source_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.partner_rotations
    ADD CONSTRAINT partner_rotations_source_domain_id_fkey FOREIGN KEY (source_domain_id) REFERENCES public.domain_portfolio(domain_id) ON DELETE CASCADE;


--
-- Name: player_inventories player_inventories_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.player_inventories
    ADD CONSTRAINT player_inventories_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id) ON DELETE CASCADE;


--
-- Name: recent_files recent_files_file_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.recent_files
    ADD CONSTRAINT recent_files_file_id_fkey FOREIGN KEY (file_id) REFERENCES public.virtual_files(id) ON DELETE CASCADE;


--
-- Name: request_lifecycle request_lifecycle_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.request_lifecycle
    ADD CONSTRAINT request_lifecycle_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id) ON DELETE SET NULL;


--
-- Name: request_state_transitions request_state_transitions_request_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.request_state_transitions
    ADD CONSTRAINT request_state_transitions_request_id_fkey FOREIGN KEY (request_id) REFERENCES public.request_lifecycle(request_id) ON DELETE CASCADE;


--
-- Name: resource_manifests resource_manifests_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.resource_manifests
    ADD CONSTRAINT resource_manifests_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id) ON DELETE CASCADE;


--
-- Name: resource_states resource_states_app_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.resource_states
    ADD CONSTRAINT resource_states_app_id_fkey FOREIGN KEY (app_id) REFERENCES public.user_installed_apps(app_id) ON DELETE CASCADE;


--
-- Name: room_state room_state_current_song_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.room_state
    ADD CONSTRAINT room_state_current_song_id_fkey FOREIGN KEY (current_song_id) REFERENCES public.song_requests(id);


--
-- Name: sdk_tokens sdk_tokens_developer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sdk_tokens
    ADD CONSTRAINT sdk_tokens_developer_id_fkey FOREIGN KEY (developer_id) REFERENCES public.developers(id) ON DELETE CASCADE;


--
-- Name: snapshot_deployments snapshot_deployments_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_deployments
    ADD CONSTRAINT snapshot_deployments_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES public.bucket_instances(bucket_id);


--
-- Name: snapshot_deployments snapshot_deployments_snapshot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_deployments
    ADD CONSTRAINT snapshot_deployments_snapshot_id_fkey FOREIGN KEY (snapshot_id) REFERENCES public.domain_context_snapshots(snapshot_id);


--
-- Name: snapshot_diffs snapshot_diffs_from_snapshot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_diffs
    ADD CONSTRAINT snapshot_diffs_from_snapshot_id_fkey FOREIGN KEY (from_snapshot_id) REFERENCES public.domain_context_snapshots(snapshot_id);


--
-- Name: snapshot_diffs snapshot_diffs_to_snapshot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_diffs
    ADD CONSTRAINT snapshot_diffs_to_snapshot_id_fkey FOREIGN KEY (to_snapshot_id) REFERENCES public.domain_context_snapshots(snapshot_id);


--
-- Name: snapshot_validations snapshot_validations_snapshot_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.snapshot_validations
    ADD CONSTRAINT snapshot_validations_snapshot_id_fkey FOREIGN KEY (snapshot_id) REFERENCES public.domain_context_snapshots(snapshot_id);


--
-- Name: sprite_atlas sprite_atlas_sheet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.sprite_atlas
    ADD CONSTRAINT sprite_atlas_sheet_id_fkey FOREIGN KEY (sheet_id) REFERENCES public.sprite_sheets(id) ON DELETE CASCADE;


--
-- Name: stream_chat stream_chat_stream_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_chat
    ADD CONSTRAINT stream_chat_stream_id_fkey FOREIGN KEY (stream_id) REFERENCES public.stream_sessions(stream_id) ON DELETE CASCADE;


--
-- Name: stream_viewers stream_viewers_stream_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.stream_viewers
    ADD CONSTRAINT stream_viewers_stream_id_fkey FOREIGN KEY (stream_id) REFERENCES public.stream_sessions(stream_id) ON DELETE CASCADE;


--
-- Name: student_hints student_hints_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.student_hints
    ADD CONSTRAINT student_hints_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id) ON DELETE CASCADE;


--
-- Name: student_hints student_hints_path_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.student_hints
    ADD CONSTRAINT student_hints_path_id_fkey FOREIGN KEY (path_id) REFERENCES public.learning_paths(path_id) ON DELETE CASCADE;


--
-- Name: survey_questions survey_questions_depends_on_question_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.survey_questions
    ADD CONSTRAINT survey_questions_depends_on_question_fkey FOREIGN KEY (depends_on_question) REFERENCES public.survey_questions(id);


--
-- Name: survey_responses survey_responses_profile_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.survey_responses
    ADD CONSTRAINT survey_responses_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.user_profiles(id) ON DELETE CASCADE;


--
-- Name: survey_responses survey_responses_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.survey_responses
    ADD CONSTRAINT survey_responses_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.survey_questions(id);


--
-- Name: swipe_history swipe_history_match_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.swipe_history
    ADD CONSTRAINT swipe_history_match_id_fkey FOREIGN KEY (match_id) REFERENCES public.profile_matches(id) ON DELETE SET NULL;


--
-- Name: todo_archives todo_archives_decision_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_archives
    ADD CONSTRAINT todo_archives_decision_id_fkey FOREIGN KEY (decision_id) REFERENCES public.decisions(id) ON DELETE CASCADE;


--
-- Name: todo_archives todo_archives_todo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_archives
    ADD CONSTRAINT todo_archives_todo_id_fkey FOREIGN KEY (todo_id) REFERENCES public.decision_todos(id) ON DELETE CASCADE;


--
-- Name: todo_dependencies todo_dependencies_depends_on_todo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_dependencies
    ADD CONSTRAINT todo_dependencies_depends_on_todo_id_fkey FOREIGN KEY (depends_on_todo_id) REFERENCES public.decision_todos(id) ON DELETE CASCADE;


--
-- Name: todo_dependencies todo_dependencies_todo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.todo_dependencies
    ADD CONSTRAINT todo_dependencies_todo_id_fkey FOREIGN KEY (todo_id) REFERENCES public.decision_todos(id) ON DELETE CASCADE;


--
-- Name: trademark_info trademark_info_domain_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.trademark_info
    ADD CONSTRAINT trademark_info_domain_id_fkey FOREIGN KEY (domain_id) REFERENCES public.domain_portfolio(domain_id) ON DELETE CASCADE;


--
-- Name: training_task_assignments training_task_assignments_device_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_assignments
    ADD CONSTRAINT training_task_assignments_device_id_fkey FOREIGN KEY (device_id) REFERENCES public.user_devices(id) ON DELETE SET NULL;


--
-- Name: training_task_assignments training_task_assignments_task_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_assignments
    ADD CONSTRAINT training_task_assignments_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.training_tasks(id) ON DELETE CASCADE;


--
-- Name: training_task_assignments training_task_assignments_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_assignments
    ADD CONSTRAINT training_task_assignments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: training_task_leaderboard training_task_leaderboard_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_leaderboard
    ADD CONSTRAINT training_task_leaderboard_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: training_task_streaks training_task_streaks_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_task_streaks
    ADD CONSTRAINT training_task_streaks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: training_tasks training_tasks_assigned_device_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_tasks
    ADD CONSTRAINT training_tasks_assigned_device_id_fkey FOREIGN KEY (assigned_device_id) REFERENCES public.user_devices(id) ON DELETE SET NULL;


--
-- Name: training_tasks training_tasks_assigned_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.training_tasks
    ADD CONSTRAINT training_tasks_assigned_user_id_fkey FOREIGN KEY (assigned_user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: url_fetch_queue url_fetch_queue_related_package_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.url_fetch_queue
    ADD CONSTRAINT url_fetch_queue_related_package_id_fkey FOREIGN KEY (related_package_id) REFERENCES public.vendored_packages(id) ON DELETE CASCADE;


--
-- Name: url_index url_index_related_package_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.url_index
    ADD CONSTRAINT url_index_related_package_id_fkey FOREIGN KEY (related_package_id) REFERENCES public.vendored_packages(id) ON DELETE SET NULL;


--
-- Name: user_achievements user_achievements_achievement_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_achievements
    ADD CONSTRAINT user_achievements_achievement_id_fkey FOREIGN KEY (achievement_id) REFERENCES public.achievements(achievement_id) ON DELETE CASCADE;


--
-- Name: user_installed_apps user_installed_apps_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_installed_apps
    ADD CONSTRAINT user_installed_apps_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.app_templates(template_id);


--
-- Name: user_profiles user_profiles_archetype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_profiles
    ADD CONSTRAINT user_profiles_archetype_id_fkey FOREIGN KEY (archetype_id) REFERENCES public.archetypes(id);


--
-- Name: user_progress user_progress_current_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_progress
    ADD CONSTRAINT user_progress_current_lesson_id_fkey FOREIGN KEY (current_lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: user_progress user_progress_path_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.user_progress
    ADD CONSTRAINT user_progress_path_id_fkey FOREIGN KEY (path_id) REFERENCES public.learning_paths(path_id) ON DELETE CASCADE;


--
-- Name: virtual_files virtual_files_folder_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_files
    ADD CONSTRAINT virtual_files_folder_id_fkey FOREIGN KEY (folder_id) REFERENCES public.virtual_folders(id) ON DELETE CASCADE;


--
-- Name: virtual_folders virtual_folders_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.virtual_folders
    ADD CONSTRAINT virtual_folders_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.virtual_folders(id) ON DELETE CASCADE;


--
-- Name: visual_themes visual_themes_icon_set_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.visual_themes
    ADD CONSTRAINT visual_themes_icon_set_id_fkey FOREIGN KEY (icon_set_id) REFERENCES public.sprite_sheets(id);


--
-- Name: webhook_deliveries webhook_deliveries_webhook_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_deliveries
    ADD CONSTRAINT webhook_deliveries_webhook_id_fkey FOREIGN KEY (webhook_id) REFERENCES public.webhooks(id) ON DELETE CASCADE;


--
-- Name: webhook_events webhook_events_endpoint_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhook_events
    ADD CONSTRAINT webhook_events_endpoint_id_fkey FOREIGN KEY (endpoint_id) REFERENCES public.webhook_endpoints(id) ON DELETE CASCADE;


--
-- Name: webhooks webhooks_developer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.webhooks
    ADD CONSTRAINT webhooks_developer_id_fkey FOREIGN KEY (developer_id) REFERENCES public.developers(id) ON DELETE CASCADE;


--
-- Name: wrapper_usage_samples wrapper_usage_samples_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: matthewmauer
--

ALTER TABLE ONLY public.wrapper_usage_samples
    ADD CONSTRAINT wrapper_usage_samples_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: TABLE visit_sessions; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.visit_sessions TO postgres;


--
-- Name: TABLE challenge_details; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.challenge_details TO postgres;


--
-- Name: TABLE domain_challenges; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT ALL ON TABLE public.domain_challenges TO postgres;


--
-- Name: TABLE domain_implementations; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT ALL ON TABLE public.domain_implementations TO postgres;


--
-- Name: TABLE challenge_leaderboard; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.challenge_leaderboard TO postgres;


--
-- Name: TABLE user_devices; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT,INSERT,UPDATE ON TABLE public.user_devices TO postgres;


--
-- Name: TABLE device_leaderboard; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.device_leaderboard TO postgres;


--
-- Name: TABLE domain_judgments; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT ALL ON TABLE public.domain_judgments TO postgres;


--
-- Name: TABLE elo_blocked_voters; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.elo_blocked_voters TO postgres;


--
-- Name: SEQUENCE elo_blocked_voters_id_seq; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT USAGE ON SEQUENCE public.elo_blocked_voters_id_seq TO postgres;


--
-- Name: TABLE elo_spam_patterns; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT,INSERT,UPDATE ON TABLE public.elo_spam_patterns TO postgres;


--
-- Name: SEQUENCE elo_spam_patterns_id_seq; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT USAGE ON SEQUENCE public.elo_spam_patterns_id_seq TO postgres;


--
-- Name: TABLE elo_user_votes; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT,INSERT,UPDATE ON TABLE public.elo_user_votes TO postgres;


--
-- Name: TABLE elo_suspicious_voters; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.elo_suspicious_voters TO postgres;


--
-- Name: SEQUENCE elo_user_votes_id_seq; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT USAGE ON SEQUENCE public.elo_user_votes_id_seq TO postgres;


--
-- Name: TABLE elo_vote_statistics; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.elo_vote_statistics TO postgres;


--
-- Name: TABLE heatmap_data; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.heatmap_data TO postgres;


--
-- Name: SEQUENCE heatmap_data_id_seq; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT USAGE ON SEQUENCE public.heatmap_data_id_seq TO postgres;


--
-- Name: TABLE heatmap_summary; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.heatmap_summary TO postgres;


--
-- Name: TABLE implementation_quality; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.implementation_quality TO postgres;


--
-- Name: TABLE room_state; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.room_state TO postgres;


--
-- Name: SEQUENCE room_state_id_seq; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT USAGE ON SEQUENCE public.room_state_id_seq TO postgres;


--
-- Name: TABLE session_analytics; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.session_analytics TO postgres;


--
-- Name: TABLE song_requests; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.song_requests TO postgres;


--
-- Name: TABLE song_queue; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT SELECT ON TABLE public.song_queue TO postgres;


--
-- Name: SEQUENCE song_requests_id_seq; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT USAGE ON SEQUENCE public.song_requests_id_seq TO postgres;


--
-- Name: SEQUENCE user_devices_id_seq; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT USAGE ON SEQUENCE public.user_devices_id_seq TO postgres;


--
-- Name: SEQUENCE visit_sessions_id_seq; Type: ACL; Schema: public; Owner: matthewmauer
--

GRANT USAGE ON SEQUENCE public.visit_sessions_id_seq TO postgres;


--
-- PostgreSQL database dump complete
--

