#!/usr/bin/env node

/**
 * API Key Setup Wizard
 *
 * Interactive CLI to configure LLM API keys:
 * - OpenAI (gpt-4, gpt-3.5-turbo)
 * - Anthropic (claude-3-5-sonnet, claude-3-opus)
 * - DeepSeek (deepseek-chat, deepseek-coder)
 *
 * Usage:
 *   npm run setup-keys
 *   OR
 *   node bin/setup-api-keys
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const ENV_PATH = path.join(__dirname, '..', '.env');

console.log(`
╔══════════════════════════════════════════════════════════════╗
║                  CALOS API KEY SETUP WIZARD                  ║
╚══════════════════════════════════════════════════════════════╝

This wizard will help you configure API keys for:
  • OpenAI (GPT-4, GPT-3.5 Turbo)
  • Anthropic (Claude 3.5 Sonnet, Claude 3 Opus)
  • DeepSeek (DeepSeek Chat, DeepSeek Coder)

Your keys will be saved to: ${ENV_PATH}

Press Ctrl+C at any time to cancel.
`);

async function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function testOpenAIKey(apiKey) {
  try {
    const OpenAI = require('openai');
    const client = new OpenAI({ apiKey });

    await client.models.list();
    return { valid: true };
  } catch (error) {
    if (error.status === 401) {
      return { valid: false, error: 'Invalid API key' };
    }
    return { valid: false, error: error.message };
  }
}

async function testAnthropicKey(apiKey) {
  try {
    const Anthropic = require('@anthropic-ai/sdk');
    const client = new Anthropic({ apiKey });

    // Test with a minimal request
    await client.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 1,
      messages: [{ role: 'user', content: 'test' }]
    });

    return { valid: true };
  } catch (error) {
    if (error.status === 401) {
      return { valid: false, error: 'Invalid API key' };
    }
    return { valid: false, error: error.message };
  }
}

async function testDeepSeekKey(apiKey) {
  try {
    const OpenAI = require('openai');
    const client = new OpenAI({
      apiKey,
      baseURL: 'https://api.deepseek.com/v1'
    });

    await client.models.list();
    return { valid: true };
  } catch (error) {
    if (error.status === 401) {
      return { valid: false, error: 'Invalid API key' };
    }
    return { valid: false, error: error.message };
  }
}

function updateEnvFile(updates) {
  let envContent = '';

  // Read existing .env if it exists
  if (fs.existsSync(ENV_PATH)) {
    envContent = fs.readFileSync(ENV_PATH, 'utf-8');
  } else {
    // Create from .env.example if it exists
    const examplePath = path.join(__dirname, '..', '.env.example');
    if (fs.existsSync(examplePath)) {
      envContent = fs.readFileSync(examplePath, 'utf-8');
    }
  }

  // Update keys
  for (const [key, value] of Object.entries(updates)) {
    const regex = new RegExp(`^${key}=.*$`, 'm');

    if (regex.test(envContent)) {
      // Key exists, update it
      envContent = envContent.replace(regex, `${key}=${value}`);
    } else {
      // Key doesn't exist, append it
      envContent += `\n${key}=${value}`;
    }
  }

  // Write back to .env
  fs.writeFileSync(ENV_PATH, envContent.trim() + '\n', 'utf-8');
}

async function main() {
  const updates = {};

  // ========================================================================
  // OpenAI
  // ========================================================================
  console.log('\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log('  OpenAI (GPT-4, GPT-3.5 Turbo)');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n');
  console.log('Get your API key from: https://platform.openai.com/api-keys\n');

  const openaiKey = await question('Enter your OpenAI API key (or press Enter to skip): ');

  if (openaiKey.trim()) {
    console.log('Testing OpenAI API key...');
    const result = await testOpenAIKey(openaiKey.trim());

    if (result.valid) {
      console.log('✅ OpenAI API key is valid!\n');
      updates.OPENAI_API_KEY = openaiKey.trim();
    } else {
      console.log(`❌ OpenAI API key test failed: ${result.error}\n`);
      const proceed = await question('Save anyway? (y/N): ');
      if (proceed.toLowerCase() === 'y') {
        updates.OPENAI_API_KEY = openaiKey.trim();
      }
    }
  } else {
    console.log('⏭  Skipping OpenAI\n');
  }

  // ========================================================================
  // Anthropic
  // ========================================================================
  console.log('\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log('  Anthropic (Claude 3.5 Sonnet, Claude 3 Opus)');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n');
  console.log('Get your API key from: https://console.anthropic.com/settings/keys\n');

  const anthropicKey = await question('Enter your Anthropic API key (or press Enter to skip): ');

  if (anthropicKey.trim()) {
    console.log('Testing Anthropic API key...');
    const result = await testAnthropicKey(anthropicKey.trim());

    if (result.valid) {
      console.log('✅ Anthropic API key is valid!\n');
      updates.ANTHROPIC_API_KEY = anthropicKey.trim();
    } else {
      console.log(`❌ Anthropic API key test failed: ${result.error}\n`);
      const proceed = await question('Save anyway? (y/N): ');
      if (proceed.toLowerCase() === 'y') {
        updates.ANTHROPIC_API_KEY = anthropicKey.trim();
      }
    }
  } else {
    console.log('⏭  Skipping Anthropic\n');
  }

  // ========================================================================
  // DeepSeek
  // ========================================================================
  console.log('\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log('  DeepSeek (DeepSeek Chat, DeepSeek Coder)');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n');
  console.log('Get your API key from: https://platform.deepseek.com/api_keys\n');

  const deepseekKey = await question('Enter your DeepSeek API key (or press Enter to skip): ');

  if (deepseekKey.trim()) {
    console.log('Testing DeepSeek API key...');
    const result = await testDeepSeekKey(deepseekKey.trim());

    if (result.valid) {
      console.log('✅ DeepSeek API key is valid!\n');
      updates.DEEPSEEK_API_KEY = deepseekKey.trim();
    } else {
      console.log(`❌ DeepSeek API key test failed: ${result.error}\n`);
      const proceed = await question('Save anyway? (y/N): ');
      if (proceed.toLowerCase() === 'y') {
        updates.DEEPSEEK_API_KEY = deepseekKey.trim();
      }
    }
  } else {
    console.log('⏭  Skipping DeepSeek\n');
  }

  // ========================================================================
  // Summary
  // ========================================================================
  console.log('\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log('  Summary');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n');

  if (Object.keys(updates).length === 0) {
    console.log('No API keys were added.');
    rl.close();
    return;
  }

  console.log('The following keys will be saved to .env:\n');
  for (const [key, value] of Object.entries(updates)) {
    const masked = value.substring(0, 10) + '...' + value.substring(value.length - 4);
    console.log(`  ${key}: ${masked}`);
  }

  console.log();
  const confirm = await question('Save these keys? (Y/n): ');

  if (confirm.toLowerCase() !== 'n') {
    updateEnvFile(updates);
    console.log(`\n✅ API keys saved to ${ENV_PATH}\n`);
    console.log('Next steps:');
    console.log('  1. Restart your server: npm start');
    console.log('  2. Open chat: http://localhost:5001/chat.html');
    console.log('  3. Test your new models!\n');
  } else {
    console.log('\n❌ Setup cancelled. No changes made.\n');
  }

  rl.close();
}

main().catch((error) => {
  console.error('\n❌ Error:', error.message);
  rl.close();
  process.exit(1);
});
