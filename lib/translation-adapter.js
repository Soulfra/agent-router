/**
 * Translation Adapter
 *
 * Provides multi-language translation capability using free APIs.
 * Auto-detects user language and provides cached translations for offline use.
 *
 * Uses MyMemory Translation API (free, no API key required)
 * - 1000 requests/day free tier
 * - 100+ language pairs supported
 * - No authentication needed
 */

const axios = require('axios');

class TranslationAdapter {
  constructor({ cache = null, timeout = 10000 } = {}) {
    this.cache = cache;
    this.timeout = timeout;
    this.baseURL = 'https://api.mymemory.translated.net';

    // Language codes mapping (ISO 639-1)
    this.languages = {
      'en': { name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
      'es': { name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },
      'fr': { name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },
      'de': { name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™' },
      'it': { name: 'Italian', nativeName: 'Italiano', flag: 'üáÆüáπ' },
      'pt': { name: 'Portuguese', nativeName: 'Portugu√™s', flag: 'üáµüáπ' },
      'ru': { name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
      'ja': { name: 'Japanese', nativeName: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
      'zh': { name: 'Chinese', nativeName: '‰∏≠Êñá', flag: 'üá®üá≥' },
      'ko': { name: 'Korean', nativeName: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
      'ar': { name: 'Arabic', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
      'hi': { name: 'Hindi', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
      'nl': { name: 'Dutch', nativeName: 'Nederlands', flag: 'üá≥üá±' },
      'pl': { name: 'Polish', nativeName: 'Polski', flag: 'üáµüá±' },
      'sv': { name: 'Swedish', nativeName: 'Svenska', flag: 'üá∏üá™' },
      'tr': { name: 'Turkish', nativeName: 'T√ºrk√ße', flag: 'üáπüá∑' },
      'he': { name: 'Hebrew', nativeName: '◊¢◊ë◊®◊ô◊™', flag: 'üáÆüá±' },
      'th': { name: 'Thai', nativeName: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠' },
      'vi': { name: 'Vietnamese', nativeName: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },
      'id': { name: 'Indonesian', nativeName: 'Bahasa Indonesia', flag: 'üáÆüá©' },
      'ms': { name: 'Malay', nativeName: 'Bahasa Melayu', flag: 'üá≤üáæ' },
      'cs': { name: 'Czech', nativeName: 'ƒåe≈°tina', flag: 'üá®üáø' },
      'da': { name: 'Danish', nativeName: 'Dansk', flag: 'üá©üá∞' },
      'fi': { name: 'Finnish', nativeName: 'Suomi', flag: 'üá´üáÆ' },
      'no': { name: 'Norwegian', nativeName: 'Norsk', flag: 'üá≥üá¥' },
      'hu': { name: 'Hungarian', nativeName: 'Magyar', flag: 'üá≠üá∫' },
      'ro': { name: 'Romanian', nativeName: 'Rom√¢nƒÉ', flag: 'üá∑üá¥' },
      'el': { name: 'Greek', nativeName: 'ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨', flag: 'üá¨üá∑' },
      'uk': { name: 'Ukrainian', nativeName: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', flag: 'üá∫üá¶' },
      'bg': { name: 'Bulgarian', nativeName: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏', flag: 'üáßüá¨' },
      'hr': { name: 'Croatian', nativeName: 'Hrvatski', flag: 'üá≠üá∑' },
      'sk': { name: 'Slovak', nativeName: 'Slovenƒçina', flag: 'üá∏üá∞' },
      'sr': { name: 'Serbian', nativeName: '–°—Ä–ø—Å–∫–∏', flag: 'üá∑üá∏' },
      'ca': { name: 'Catalan', nativeName: 'Catal√†', flag: 'üè¥' },
      'fa': { name: 'Persian', nativeName: 'ŸÅÿßÿ±ÿ≥€å', flag: 'üáÆüá∑' },
      'ur': { name: 'Urdu', nativeName: 'ÿßÿ±ÿØŸà', flag: 'üáµüá∞' },
      'bn': { name: 'Bengali', nativeName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', flag: 'üáßüá©' },
      'ta': { name: 'Tamil', nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
      'te': { name: 'Telugu', nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
      'mr': { name: 'Marathi', nativeName: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥' },
      'sw': { name: 'Swahili', nativeName: 'Kiswahili', flag: 'üá∞üá™' },
      'af': { name: 'Afrikaans', nativeName: 'Afrikaans', flag: 'üáøüá¶' }
    };
  }

  /**
   * Translate text from one language to another
   */
  async translate(text, fromLang, toLang, options = {}) {
    const cacheKey = `translate:${fromLang}:${toLang}:${text}`;

    // Check cache first (translations don't change)
    if (this.cache) {
      const cached = this.cache.get(cacheKey);
      if (cached) {
        console.log(`[Translation] Cache hit for "${text.substring(0, 30)}..."`);
        return cached;
      }
    }

    console.log(`[Translation] Translating "${text}" from ${fromLang} to ${toLang}`);

    try {
      const response = await axios.get(`${this.baseURL}/get`, {
        params: {
          q: text,
          langpair: `${fromLang}|${toLang}`,
          de: options.email || 'calos@localhost' // Optional email for better quota
        },
        timeout: this.timeout
      });

      const data = response.data;

      if (data.responseStatus !== 200) {
        throw new Error(data.responseDetails || 'Translation failed');
      }

      const result = {
        original: text,
        translated: data.responseData.translatedText,
        fromLang,
        toLang,
        match: data.responseData.match, // Confidence score (0-1)
        source: 'mymemory',
        timestamp: new Date().toISOString()
      };

      // Cache the translation
      if (this.cache) {
        this.cache.set(cacheKey, result);
      }

      return result;
    } catch (error) {
      console.error(`[Translation] Error: ${error.message}`);

      // Return original text if translation fails
      return {
        original: text,
        translated: text,
        fromLang,
        toLang,
        match: 0,
        source: 'fallback',
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Batch translate multiple texts
   */
  async translateBatch(texts, fromLang, toLang, options = {}) {
    console.log(`[Translation] Batch translating ${texts.length} texts from ${fromLang} to ${toLang}`);

    const results = await Promise.all(
      texts.map(text => this.translate(text, fromLang, toLang, options))
    );

    return {
      fromLang,
      toLang,
      translations: results,
      count: results.length,
      cached: results.filter(r => r.source !== 'mymemory').length
    };
  }

  /**
   * Detect user's preferred language from browser settings
   */
  detectUserLanguage(request = null) {
    // Server-side detection from HTTP headers
    if (request && request.headers) {
      const acceptLanguage = request.headers['accept-language'];
      if (acceptLanguage) {
        // Parse Accept-Language header (e.g., "en-US,en;q=0.9,es;q=0.8")
        const languages = acceptLanguage.split(',').map(lang => {
          const [code, q] = lang.trim().split(';q=');
          const langCode = code.split('-')[0]; // Get base language (en from en-US)
          const quality = q ? parseFloat(q) : 1.0;
          return { code: langCode, quality };
        });

        // Sort by quality (preference)
        languages.sort((a, b) => b.quality - a.quality);

        // Return first supported language
        for (const lang of languages) {
          if (this.languages[lang.code]) {
            return {
              code: lang.code,
              ...this.languages[lang.code],
              detected: true,
              source: 'http-header'
            };
          }
        }
      }
    }

    // Default to English
    return {
      code: 'en',
      ...this.languages['en'],
      detected: false,
      source: 'default'
    };
  }

  /**
   * Get all supported languages
   */
  getSupportedLanguages() {
    return Object.keys(this.languages).map(code => ({
      code,
      ...this.languages[code]
    })).sort((a, b) => a.name.localeCompare(b.name));
  }

  /**
   * Check if a language code is supported
   */
  isLanguageSupported(code) {
    return code in this.languages;
  }

  /**
   * Get language info by code
   */
  getLanguageInfo(code) {
    return this.languages[code] || null;
  }

  /**
   * Translate CalOS UI strings
   * Pre-defined translations for common UI elements
   */
  getUITranslations(langCode) {
    const translations = {
      en: {
        files: 'Files',
        chat: 'Chat',
        apikeys: 'API Keys',
        models: 'Models',
        appstore: 'App Store',
        settings: 'Settings',
        calculator: 'Calculator',
        theme: 'Theme',
        language: 'Language',
        save: 'Save',
        cancel: 'Cancel',
        delete: 'Delete',
        close: 'Close',
        open: 'Open',
        loading: 'Loading...',
        error: 'Error',
        success: 'Success',
        offline: 'Offline Mode',
        online: 'Online'
      },
      es: {
        files: 'Archivos',
        chat: 'Chat',
        apikeys: 'Claves API',
        models: 'Modelos',
        appstore: 'Tienda',
        settings: 'Configuraci√≥n',
        calculator: 'Calculadora',
        theme: 'Tema',
        language: 'Idioma',
        save: 'Guardar',
        cancel: 'Cancelar',
        delete: 'Eliminar',
        close: 'Cerrar',
        open: 'Abrir',
        loading: 'Cargando...',
        error: 'Error',
        success: '√âxito',
        offline: 'Modo Sin Conexi√≥n',
        online: 'En L√≠nea'
      },
      fr: {
        files: 'Fichiers',
        chat: 'Chat',
        apikeys: 'Cl√©s API',
        models: 'Mod√®les',
        appstore: 'App Store',
        settings: 'Param√®tres',
        calculator: 'Calculatrice',
        theme: 'Th√®me',
        language: 'Langue',
        save: 'Enregistrer',
        cancel: 'Annuler',
        delete: 'Supprimer',
        close: 'Fermer',
        open: 'Ouvrir',
        loading: 'Chargement...',
        error: 'Erreur',
        success: 'Succ√®s',
        offline: 'Mode Hors Ligne',
        online: 'En Ligne'
      },
      de: {
        files: 'Dateien',
        chat: 'Chat',
        apikeys: 'API-Schl√ºssel',
        models: 'Modelle',
        appstore: 'App Store',
        settings: 'Einstellungen',
        calculator: 'Rechner',
        theme: 'Design',
        language: 'Sprache',
        save: 'Speichern',
        cancel: 'Abbrechen',
        delete: 'L√∂schen',
        close: 'Schlie√üen',
        open: '√ñffnen',
        loading: 'Laden...',
        error: 'Fehler',
        success: 'Erfolg',
        offline: 'Offline-Modus',
        online: 'Online'
      },
      it: {
        files: 'File',
        chat: 'Chat',
        apikeys: 'Chiavi API',
        models: 'Modelli',
        appstore: 'App Store',
        settings: 'Impostazioni',
        calculator: 'Calcolatrice',
        theme: 'Tema',
        language: 'Lingua',
        save: 'Salva',
        cancel: 'Annulla',
        delete: 'Elimina',
        close: 'Chiudi',
        open: 'Apri',
        loading: 'Caricamento...',
        error: 'Errore',
        success: 'Successo',
        offline: 'Modalit√† Offline',
        online: 'Online'
      },
      pt: {
        files: 'Arquivos',
        chat: 'Chat',
        apikeys: 'Chaves API',
        models: 'Modelos',
        appstore: 'Loja de Apps',
        settings: 'Configura√ß√µes',
        calculator: 'Calculadora',
        theme: 'Tema',
        language: 'Idioma',
        save: 'Salvar',
        cancel: 'Cancelar',
        delete: 'Excluir',
        close: 'Fechar',
        open: 'Abrir',
        loading: 'Carregando...',
        error: 'Erro',
        success: 'Sucesso',
        offline: 'Modo Offline',
        online: 'Online'
      },
      zh: {
        files: 'Êñá‰ª∂',
        chat: 'ËÅäÂ§©',
        apikeys: 'APIÂØÜÈí•',
        models: 'Ê®°Âûã',
        appstore: 'Â∫îÁî®ÂïÜÂ∫ó',
        settings: 'ËÆæÁΩÆ',
        calculator: 'ËÆ°ÁÆóÂô®',
        theme: '‰∏ªÈ¢ò',
        language: 'ËØ≠Ë®Ä',
        save: '‰øùÂ≠ò',
        cancel: 'ÂèñÊ∂à',
        delete: 'Âà†Èô§',
        close: 'ÂÖ≥Èó≠',
        open: 'ÊâìÂºÄ',
        loading: 'Âä†ËΩΩ‰∏≠...',
        error: 'ÈîôËØØ',
        success: 'ÊàêÂäü',
        offline: 'Á¶ªÁ∫øÊ®°Âºè',
        online: 'Âú®Á∫ø'
      },
      ja: {
        files: '„Éï„Ç°„Ç§„É´',
        chat: '„ÉÅ„É£„ÉÉ„Éà',
        apikeys: 'API„Ç≠„Éº',
        models: '„É¢„Éá„É´',
        appstore: 'App Store',
        settings: 'Ë®≠ÂÆö',
        calculator: 'ÈõªÂçì',
        theme: '„ÉÜ„Éº„Éû',
        language: 'Ë®ÄË™û',
        save: '‰øùÂ≠ò',
        cancel: '„Ç≠„É£„É≥„Çª„É´',
        delete: 'ÂâäÈô§',
        close: 'Èñâ„Åò„Çã',
        open: 'Èñã„Åè',
        loading: 'Ë™≠„ÅøËæº„Åø‰∏≠...',
        error: '„Ç®„É©„Éº',
        success: 'ÊàêÂäü',
        offline: '„Ç™„Éï„É©„Ç§„É≥„É¢„Éº„Éâ',
        online: '„Ç™„É≥„É©„Ç§„É≥'
      },
      ru: {
        files: '–§–∞–π–ª—ã',
        chat: '–ß–∞—Ç',
        apikeys: 'API –ö–ª—é—á–∏',
        models: '–ú–æ–¥–µ–ª–∏',
        appstore: 'App Store',
        settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        calculator: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
        theme: '–¢–µ–º–∞',
        language: '–Ø–∑—ã–∫',
        save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        cancel: '–û—Ç–º–µ–Ω–∞',
        delete: '–£–¥–∞–ª–∏—Ç—å',
        close: '–ó–∞–∫—Ä—ã—Ç—å',
        open: '–û—Ç–∫—Ä—ã—Ç—å',
        loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        error: '–û—à–∏–±–∫–∞',
        success: '–£—Å–ø–µ—Ö',
        offline: '–û—Ñ–ª–∞–π–Ω –†–µ–∂–∏–º',
        online: '–û–Ω–ª–∞–π–Ω'
      },
      ar: {
        files: 'ŸÖŸÑŸÅÿßÿ™',
        chat: 'ÿØÿ±ÿØÿ¥ÿ©',
        apikeys: 'ŸÖŸÅÿßÿ™Ÿäÿ≠ API',
        models: 'ŸÜŸÖÿßÿ∞ÿ¨',
        appstore: 'ŸÖÿ™ÿ¨ÿ± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™',
        settings: 'ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™',
        calculator: 'ÿ¢ŸÑÿ© ÿ≠ÿßÿ≥ÿ®ÿ©',
        theme: 'ÿßŸÑŸÖÿ∏Ÿáÿ±',
        language: 'ÿßŸÑŸÑÿ∫ÿ©',
        save: 'ÿ≠ŸÅÿ∏',
        cancel: 'ÿ•ŸÑÿ∫ÿßÿ°',
        delete: 'ÿ≠ÿ∞ŸÅ',
        close: 'ÿ•ÿ∫ŸÑÿßŸÇ',
        open: 'ŸÅÿ™ÿ≠',
        loading: 'ÿ¨ÿßÿ± ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...',
        error: 'ÿÆÿ∑ÿ£',
        success: 'ŸÜÿ¨ÿ≠',
        offline: 'Ÿàÿ∂ÿπ ÿπÿØŸÖ ÿßŸÑÿßÿ™ÿµÿßŸÑ',
        online: 'ŸÖÿ™ÿµŸÑ'
      }
    };

    return translations[langCode] || translations['en'];
  }

  /**
   * Get statistics about translation usage
   */
  getStats() {
    return {
      supported_languages: Object.keys(this.languages).length,
      api_provider: 'MyMemory',
      daily_limit: 1000,
      cache_enabled: this.cache !== null
    };
  }
}

module.exports = TranslationAdapter;
