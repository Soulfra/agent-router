<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="theme-color" content="#0a0a0a">
  <title>CalOS - Operating System</title>

  <!-- PWA Manifest -->
  <link rel="manifest" href="data:application/json;base64,ewogICJuYW1lIjogIkNhbE9TIiwKICAic2hvcnRfbmFtZSI6ICJDYWxPUyIsCiAgInN0YXJ0X3VybCI6ICIvY2Fsb3Mtb3MuaHRtbCIsCiAgImRpc3BsYXkiOiAic3RhbmRhbG9uZSIsCiAgImJhY2tncm91bmRfY29sb3IiOiAiIzBhMGEwYSIsCiAgInRoZW1lX2NvbG9yIjogIiMwMDgwZmYiLAogICJpY29ucyI6IFt7CiAgICAic3JjIjogImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB4bWxucyUzRCUyN2h0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyclMjd3aWR0aCUzRCUyNzUxMiUyN2hlaWdodCUzRCUyNzUxMiUyN3ZpZXdCb3glM0QlMjcwJTIwMCUyMDUxMiUyMDUxMiUyNyUzRSUzQ3JlY3QlMjBmaWxsJTNEJyUyMzAwODBmZiclMjB3aWR0aCUzRCc1MTInJTIwaGVpZ2h0JTNEJzUxMicvcyUzRSUzQ3RleHQlMjBmaWxsJTNEJyUyM2ZmZiclMjBmb250LXNpemUlM0QnMzAwJyUyMHglM0QnNTAlMjUnJTIweSUzRCc1MCUyNSUyNyUyMGRvbWluYW50LWJhc2VsaW5lJTNEJ21pZGRsZSclMjB0ZXh0LWFuY2hvciUzRCdtaWRkbGUnJTNFQyUzQyUyRnRleHQlM0UlM0MlMkZzdmclM0UiLAogICAgInNpemVzIjogIjUxMng1MTIiLAogICAgInR5cGUiOiAiaW1hZ2Uvc3ZnK3htbCIKICB9XQp9">
  <link rel="apple-touch-icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'width='512'height='512'viewBox='0 0 512 512'%3E%3Crect fill='%230080ff' width='512' height='512'/%3E%3Ctext fill='%23fff' font-size='300' x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle'%3EC%3C/text%3E%3C/svg%3E">

  <style>
    /* Reset & Variables */
    * { margin: 0; padding: 0; box-sizing: border-box; }

    :root {
      --bg-primary: #0a0a0a;
      --bg-secondary: #1a1a1a;
      --bg-tertiary: #252525;
      --border: #333;
      --text-primary: #e0e0e0;
      --text-secondary: #888;
      --accent-blue: #0080ff;
      --accent-green: #00ff88;
      --accent-red: #ff4444;
      --accent-yellow: #ffaa00;
      --accent-purple: #aa00ff;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      overflow: hidden;
      -webkit-font-smoothing: antialiased;
      touch-action: manipulation;
    }

    /* Boot Screen */
    #bootScreen {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: var(--bg-primary);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 10000;
      transition: opacity 0.5s;
    }

    #bootScreen.hidden {
      opacity: 0;
      pointer-events: none;
    }

    .boot-logo {
      font-size: 80px;
      font-weight: bold;
      background: linear-gradient(90deg, var(--accent-blue), var(--accent-green));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 30px;
    }

    .boot-text {
      color: var(--text-secondary);
      font-size: 14px;
      margin-bottom: 20px;
    }

    .boot-progress {
      width: 300px;
      height: 4px;
      background: var(--bg-secondary);
      border-radius: 2px;
      overflow: hidden;
    }

    .boot-progress-fill {
      height: 100%;
      background: linear-gradient(90deg, var(--accent-blue), var(--accent-green));
      width: 0%;
      animation: bootProgress 2s ease-in-out forwards;
    }

    @keyframes bootProgress {
      to { width: 100%; }
    }

    /* Desktop */
    .desktop {
      height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Status Bar */
    .status-bar {
      height: 30px;
      background: var(--bg-secondary);
      border-bottom: 1px solid var(--border);
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 15px;
      font-size: 11px;
    }

    .status-left, .status-right {
      display: flex;
      gap: 15px;
      align-items: center;
    }

    .status-item {
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .status-dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: var(--accent-green);
    }

    .status-dot.offline { background: var(--accent-red); }

    /* App Grid */
    .app-grid {
      flex: 1;
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
      gap: 20px;
      padding: 40px;
      overflow-y: auto;
    }

    .app-icon {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
      cursor: pointer;
      transition: transform 0.2s;
      user-select: none;
    }

    .app-icon:hover {
      transform: translateY(-5px);
    }

    .app-icon:active {
      transform: scale(0.95);
    }

    .app-icon-image {
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, var(--bg-secondary), var(--bg-tertiary));
      border: 2px solid var(--border);
      border-radius: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 30px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }

    .app-icon-label {
      font-size: 12px;
      text-align: center;
    }

    /* Window System */
    .window {
      position: absolute;
      background: var(--bg-secondary);
      border: 1px solid var(--border);
      border-radius: 12px;
      box-shadow: 0 10px 40px rgba(0,0,0,0.5);
      min-width: 400px;
      min-height: 300px;
      display: none;
      flex-direction: column;
    }

    .window.active {
      display: flex;
      z-index: 1000;
    }

    .window.maximized {
      top: 30px !important;
      left: 0 !important;
      right: 0 !important;
      bottom: 50px !important;
      width: 100% !important;
      height: calc(100vh - 80px) !important;
      border-radius: 0;
    }

    .window-titlebar {
      height: 40px;
      background: var(--bg-tertiary);
      border-bottom: 1px solid var(--border);
      border-radius: 12px 12px 0 0;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 15px;
      cursor: move;
    }

    .window-title {
      font-size: 13px;
      font-weight: 600;
    }

    .window-controls {
      display: flex;
      gap: 8px;
    }

    .window-control {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      cursor: pointer;
    }

    .window-control.close { background: #ff5f57; }
    .window-control.minimize { background: #ffbd2e; }
    .window-control.maximize { background: #28ca42; }

    .window-content {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
    }

    /* Dock */
    .dock {
      position: fixed;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(30, 30, 30, 0.9);
      backdrop-filter: blur(20px);
      border: 1px solid var(--border);
      border-radius: 16px;
      padding: 10px;
      display: flex;
      gap: 10px;
      box-shadow: 0 10px 40px rgba(0,0,0,0.5);
    }

    .dock-icon {
      width: 50px;
      height: 50px;
      background: var(--bg-secondary);
      border: 2px solid var(--border);
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      cursor: pointer;
      transition: all 0.2s;
      position: relative;
    }

    .dock-icon:hover {
      transform: translateY(-10px);
      border-color: var(--accent-blue);
    }

    .dock-icon.active::after {
      content: '';
      position: absolute;
      bottom: -5px;
      width: 4px;
      height: 4px;
      background: var(--accent-blue);
      border-radius: 50%;
    }

    /* UI Components */
    .btn {
      padding: 10px 20px;
      background: var(--accent-blue);
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      transition: all 0.2s;
    }

    .btn:hover {
      background: #0066cc;
      transform: translateY(-1px);
    }

    .btn-secondary {
      background: var(--bg-tertiary);
      color: var(--text-primary);
    }

    .btn-success { background: var(--accent-green); color: var(--bg-primary); }
    .btn-danger { background: var(--accent-red); }

    .input {
      width: 100%;
      padding: 12px;
      background: var(--bg-primary);
      border: 1px solid var(--border);
      border-radius: 8px;
      color: var(--text-primary);
      font-size: 14px;
    }

    .input:focus {
      outline: none;
      border-color: var(--accent-blue);
    }

    .card {
      background: var(--bg-tertiary);
      border: 1px solid var(--border);
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 15px;
    }

    .list-item {
      padding: 12px;
      background: var(--bg-primary);
      border: 1px solid var(--border);
      border-radius: 8px;
      margin-bottom: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .app-grid {
        grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
        gap: 15px;
        padding: 20px;
      }

      .window {
        min-width: 100vw;
        min-height: 100vh;
        border-radius: 0;
      }

      .dock {
        bottom: 0;
        left: 0;
        transform: none;
        border-radius: 0;
        width: 100%;
        justify-content: space-around;
      }
    }
  </style>
</head>
<body>
  <!-- Boot Screen -->
  <div id="bootScreen">
    <div class="boot-logo">CalOS</div>
    <div class="boot-text">Initializing operating system...</div>
    <div class="boot-progress">
      <div class="boot-progress-fill"></div>
    </div>
  </div>

  <!-- Desktop -->
  <div class="desktop" style="display: none;">
    <!-- Status Bar -->
    <div class="status-bar">
      <div class="status-left">
        <div class="status-item">
          <span class="status-dot" id="statusDot"></span>
          <span id="statusText">Offline Mode</span>
        </div>
        <div class="status-item" id="storageInfo">
          Storage: <span id="storageUsed">0</span>KB used
        </div>
      </div>
      <div class="status-right">
        <div class="status-item" id="languageSelector">
          🌍 <select onchange="CalOS.setLanguage(this.value)" style="background: transparent; border: none; color: var(--text-primary); font-size: 11px;">
            <option value="en">English</option>
            <option value="es">Español</option>
            <option value="business">Business</option>
          </select>
        </div>
        <div class="status-item" id="clock">--:--:--</div>
      </div>
    </div>

    <!-- App Grid -->
    <div class="app-grid">
      <div class="app-icon" onclick="CalOS.openWindow('filesWindow')">
        <div class="app-icon-image">📁</div>
        <div class="app-icon-label" data-i18n="files">Files</div>
      </div>

      <div class="app-icon" onclick="CalOS.openWindow('chatWindow')">
        <div class="app-icon-image">💬</div>
        <div class="app-icon-label" data-i18n="chat">Chat</div>
      </div>

      <div class="app-icon" onclick="CalOS.openWindow('keysWindow')">
        <div class="app-icon-image">🔑</div>
        <div class="app-icon-label" data-i18n="apikeys">API Keys</div>
      </div>

      <div class="app-icon" onclick="CalOS.openWindow('modelsWindow')">
        <div class="app-icon-image">🤖</div>
        <div class="app-icon-label" data-i18n="models">Models</div>
      </div>

      <div class="app-icon" onclick="CalOS.openWindow('storeWindow')">
        <div class="app-icon-image">🏪</div>
        <div class="app-icon-label" data-i18n="appstore">App Store</div>
      </div>

      <div class="app-icon" onclick="CalOS.openWindow('settingsWindow')">
        <div class="app-icon-image">⚙️</div>
        <div class="app-icon-label" data-i18n="settings">Settings</div>
      </div>
    </div>

    <!-- Dock -->
    <div class="dock">
      <div class="dock-icon" onclick="CalOS.openWindow('filesWindow')" title="Files">📁</div>
      <div class="dock-icon" onclick="CalOS.openWindow('chatWindow')" title="Chat">💬</div>
      <div class="dock-icon" onclick="CalOS.openWindow('modelsWindow')" title="Models">🤖</div>
      <div class="dock-icon" onclick="CalOS.openWindow('storeWindow')" title="App Store">🏪</div>
    </div>
  </div>

  <!-- Windows -->
  <!-- Files Window -->
  <div id="filesWindow" class="window" style="top: 100px; left: 100px; width: 600px; height: 500px;">
    <div class="window-titlebar" onmousedown="CalOS.startDrag(event, 'filesWindow')">
      <div class="window-title" data-i18n="files">Files</div>
      <div class="window-controls">
        <div class="window-control close" onclick="CalOS.closeWindow('filesWindow')"></div>
        <div class="window-control minimize"></div>
        <div class="window-control maximize" onclick="CalOS.toggleMaximize('filesWindow')"></div>
      </div>
    </div>
    <div class="window-content">
      <div class="card">
        <h3 style="margin-bottom: 15px;">File System</h3>
        <div>
          <input type="file" id="fileInput" style="display: none;" onchange="CalOS.uploadFile(this.files[0])">
          <button class="btn" onclick="document.getElementById('fileInput').click()">+ Upload File</button>
        </div>
        <div id="fileList" style="margin-top: 20px;"></div>
      </div>
    </div>
  </div>

  <!-- Chat Window -->
  <div id="chatWindow" class="window" style="top: 120px; left: 150px; width: 700px; height: 600px;">
    <div class="window-titlebar" onmousedown="CalOS.startDrag(event, 'chatWindow')">
      <div class="window-title" data-i18n="chat">Chat</div>
      <div class="window-controls">
        <div class="window-control close" onclick="CalOS.closeWindow('chatWindow')"></div>
        <div class="window-control minimize"></div>
        <div class="window-control maximize" onclick="CalOS.toggleMaximize('chatWindow')"></div>
      </div>
    </div>
    <div class="window-content" style="display: flex; flex-direction: column; padding: 0;">
      <div style="padding: 15px; border-bottom: 1px solid var(--border); background: var(--bg-tertiary);">
        <select id="chatModel" class="input" style="margin-bottom: 10px;">
          <option value="auto">Auto (ModelClarityEngine)</option>
          <option value="ollama">Ollama (Local)</option>
          <option value="openai">OpenAI</option>
          <option value="anthropic">Anthropic</option>
        </select>
      </div>
      <div id="chatMessages" style="flex: 1; padding: 20px; overflow-y: auto;"></div>
      <div style="padding: 15px; border-top: 1px solid var(--border);">
        <textarea id="chatInput" class="input" placeholder="Type your message..." style="resize: none; height: 60px; margin-bottom: 10px;"></textarea>
        <button class="btn" onclick="CalOS.sendMessage()">Send</button>
      </div>
    </div>
  </div>

  <!-- API Keys Window -->
  <div id="keysWindow" class="window" style="top: 140px; left: 200px; width: 600px; height: 500px;">
    <div class="window-titlebar" onmousedown="CalOS.startDrag(event, 'keysWindow')">
      <div class="window-title" data-i18n="apikeys">API Keys (BYOK)</div>
      <div class="window-controls">
        <div class="window-control close" onclick="CalOS.closeWindow('keysWindow')"></div>
        <div class="window-control minimize"></div>
        <div class="window-control maximize" onclick="CalOS.toggleMaximize('keysWindow')"></div>
      </div>
    </div>
    <div class="window-content">
      <div class="card">
        <h3 style="margin-bottom: 10px;">Encrypted API Keys</h3>
        <p style="color: var(--text-secondary); font-size: 13px; margin-bottom: 20px;">
          Your keys are encrypted with AES-256 and stored locally
        </p>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 15px;">
          <select id="keyProvider" class="input">
            <option value="">Select Provider</option>
            <option value="openai">OpenAI</option>
            <option value="anthropic">Anthropic</option>
            <option value="deepseek">DeepSeek</option>
          </select>
          <input type="password" id="keyValue" class="input" placeholder="API Key">
        </div>
        <button class="btn" onclick="CalOS.addApiKey()">Add Key</button>
        <div id="keysList" style="margin-top: 20px;"></div>
      </div>
    </div>
  </div>

  <!-- Models Window -->
  <div id="modelsWindow" class="window" style="top: 160px; left: 250px; width: 700px; height: 600px;">
    <div class="window-titlebar" onmousedown="CalOS.startDrag(event, 'modelsWindow')">
      <div class="window-title">Ollama Models</div>
      <div class="window-controls">
        <div class="window-control close" onclick="CalOS.closeWindow('modelsWindow')"></div>
        <div class="window-control minimize"></div>
        <div class="window-control maximize" onclick="CalOS.toggleMaximize('modelsWindow')"></div>
      </div>
    </div>
    <div class="window-content">
      <div class="card">
        <h3 style="margin-bottom: 15px;">Available Models (<span id="modelCount">0</span>)</h3>
        <button class="btn btn-secondary" onclick="CalOS.refreshModels()">🔄 Refresh</button>
        <div id="modelsList" style="margin-top: 20px;"></div>
      </div>
    </div>
  </div>

  <!-- App Store Window -->
  <div id="storeWindow" class="window" style="top: 180px; left: 300px; width: 700px; height: 600px;">
    <div class="window-titlebar" onmousedown="CalOS.startDrag(event, 'storeWindow')">
      <div class="window-title" data-i18n="appstore">App Store</div>
      <div class="window-controls">
        <div class="window-control close" onclick="CalOS.closeWindow('storeWindow')"></div>
        <div class="window-control minimize"></div>
        <div class="window-control maximize" onclick="CalOS.toggleMaximize('storeWindow')"></div>
      </div>
    </div>
    <div class="window-content">
      <div class="card">
        <h3 style="margin-bottom: 15px;">Available Apps</h3>
        <div id="appStoreList">
          <div class="list-item">
            <div>
              <div style="font-weight: 600;">📊 Analytics Dashboard</div>
              <div style="font-size: 12px; color: var(--text-secondary);">Visualize your data</div>
            </div>
            <button class="btn btn-success" onclick="CalOS.installApp('analytics')">Install (2MB)</button>
          </div>
          <div class="list-item">
            <div>
              <div style="font-weight: 600;">🔧 Workflow Builder</div>
              <div style="font-size: 12px; color: var(--text-secondary);">Automate tasks</div>
            </div>
            <button class="btn btn-success" onclick="CalOS.installApp('workflow')">Install (3MB)</button>
          </div>
          <div class="list-item">
            <div>
              <div style="font-weight: 600;">👥 CRM System</div>
              <div style="font-size: 12px; color: var(--text-secondary);">Manage contacts</div>
            </div>
            <button class="btn btn-success" onclick="CalOS.installApp('crm')">Install (5MB)</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Settings Window -->
  <div id="settingsWindow" class="window" style="top: 200px; left: 350px; width: 600px; height: 500px;">
    <div class="window-titlebar" onmousedown="CalOS.startDrag(event, 'settingsWindow')">
      <div class="window-title" data-i18n="settings">Settings</div>
      <div class="window-controls">
        <div class="window-control close" onclick="CalOS.closeWindow('settingsWindow')"></div>
        <div class="window-control minimize"></div>
        <div class="window-control maximize" onclick="CalOS.toggleMaximize('settingsWindow')"></div>
      </div>
    </div>
    <div class="window-content">
      <div class="card">
        <h3 style="margin-bottom: 15px;">System Settings</h3>
        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px;">Theme</label>
          <select class="input">
            <option>Dark (Default)</option>
            <option>Light</option>
            <option>Auto</option>
          </select>
        </div>
        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px;">Backend URL</label>
          <input type="text" class="input" id="backendUrl" value="http://localhost:5001" placeholder="http://localhost:5001">
        </div>
        <button class="btn" onclick="CalOS.saveSettings()">Save Settings</button>
      </div>

      <div class="card" style="margin-top: 15px;">
        <h3 style="margin-bottom: 10px;">About CalOS</h3>
        <p style="color: var(--text-secondary); line-height: 1.6;">
          <strong>Version:</strong> 1.0.0<br>
          <strong>Mode:</strong> Self-Contained<br>
          <strong>Storage:</strong> localStorage + IndexedDB<br>
          <strong>Offline:</strong> Fully Capable<br>
          <strong>Privacy:</strong> All data stored locally
        </p>
      </div>
    </div>
  </div>

  <script>
    // CalOS - Self-Contained Operating System
    const CalOS = {
      version: '1.0.0',
      currentLanguage: 'en',
      draggedWindow: null,
      dragOffset: { x: 0, y: 0 },

      // Translation System
      translations: {
        en: {
          files: 'Files',
          chat: 'Chat',
          apikeys: 'API Keys',
          models: 'Models',
          appstore: 'App Store',
          settings: 'Settings'
        },
        es: {
          files: 'Archivos',
          chat: 'Chat',
          apikeys: 'Claves API',
          models: 'Modelos',
          appstore: 'Tienda',
          settings: 'Configuración'
        },
        business: {
          files: 'Documents',
          chat: 'Communications',
          apikeys: 'Integration Keys',
          models: 'AI Models',
          appstore: 'Solutions Marketplace',
          settings: 'Preferences'
        }
      },

      // Initialize OS
      async init() {
        console.log('[CalOS] Booting...');

        // Initialize storage
        this.storage = {
          files: JSON.parse(localStorage.getItem('calos_files') || '{}'),
          keys: JSON.parse(localStorage.getItem('calos_keys') || '{}'),
          settings: JSON.parse(localStorage.getItem('calos_settings') || '{"backendUrl":"http://localhost:5001"}'),
          installed_apps: JSON.parse(localStorage.getItem('calos_apps') || '[]')
        };

        // Check online status
        this.checkOnlineStatus();
        setInterval(() => this.checkOnlineStatus(), 5000);

        // Update clock
        this.updateClock();
        setInterval(() => this.updateClock(), 1000);

        // Update storage info
        this.updateStorageInfo();

        // Load translations
        this.updateTranslations();

        // Hide boot screen after 2s
        setTimeout(() => {
          document.getElementById('bootScreen').classList.add('hidden');
          document.querySelector('.desktop').style.display = 'flex';
          console.log('[CalOS] Boot complete!');
        }, 2000);

        // Register service worker
        if ('serviceWorker' in navigator) {
          this.registerServiceWorker();
        }

        // Load files list
        this.renderFilesList();

        // Load API keys
        this.renderKeysList();
      },

      // Check online status
      async checkOnlineStatus() {
        const backendUrl = this.storage.settings.backendUrl || 'http://localhost:5001';
        try {
          const response = await fetch(`${backendUrl}/health`, { method: 'GET', timeout: 3000 });
          if (response.ok) {
            document.getElementById('statusDot').classList.remove('offline');
            document.getElementById('statusText').textContent = 'Online';
          } else {
            throw new Error('Backend unreachable');
          }
        } catch (e) {
          document.getElementById('statusDot').classList.add('offline');
          document.getElementById('statusText').textContent = 'Offline Mode';
        }
      },

      // Update clock
      updateClock() {
        const now = new Date();
        document.getElementById('clock').textContent = now.toLocaleTimeString();
      },

      // Update storage info
      updateStorageInfo() {
        const used = new Blob([JSON.stringify(this.storage)]).size;
        document.getElementById('storageUsed').textContent = Math.round(used / 1024);
      },

      // Translation
      setLanguage(lang) {
        this.currentLanguage = lang;
        this.updateTranslations();
      },

      updateTranslations() {
        const elements = document.querySelectorAll('[data-i18n]');
        elements.forEach(el => {
          const key = el.getAttribute('data-i18n');
          if (this.translations[this.currentLanguage][key]) {
            el.textContent = this.translations[this.currentLanguage][key];
          }
        });
      },

      // Window management
      openWindow(windowId) {
        const win = document.getElementById(windowId);
        win.classList.add('active');

        // Special loading for models window
        if (windowId === 'modelsWindow') {
          this.refreshModels();
        }
      },

      closeWindow(windowId) {
        document.getElementById(windowId).classList.remove('active');
      },

      toggleMaximize(windowId) {
        document.getElementById(windowId).classList.toggle('maximized');
      },

      // Drag & Drop
      startDrag(e, windowId) {
        const win = document.getElementById(windowId);
        if (win.classList.contains('maximized')) return;

        this.draggedWindow = win;
        const rect = win.getBoundingClientRect();
        this.dragOffset = {
          x: e.clientX - rect.left,
          y: e.clientY - rect.top
        };

        document.addEventListener('mousemove', this.drag.bind(this));
        document.addEventListener('mouseup', this.stopDrag.bind(this));
      },

      drag(e) {
        if (!this.draggedWindow) return;
        this.draggedWindow.style.left = (e.clientX - this.dragOffset.x) + 'px';
        this.draggedWindow.style.top = (e.clientY - this.dragOffset.y) + 'px';
      },

      stopDrag() {
        this.draggedWindow = null;
        document.removeEventListener('mousemove', this.drag);
        document.removeEventListener('mouseup', this.stopDrag);
      },

      // File System
      async uploadFile(file) {
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
          this.storage.files[file.name] = {
            name: file.name,
            size: file.size,
            type: file.type,
            data: e.target.result,
            created: new Date().toISOString()
          };
          localStorage.setItem('calos_files', JSON.stringify(this.storage.files));
          this.renderFilesList();
          this.updateStorageInfo();
        };
        reader.readAsDataURL(file);
      },

      renderFilesList() {
        const list = document.getElementById('fileList');
        const files = Object.values(this.storage.files);

        if (files.length === 0) {
          list.innerHTML = '<p style="color: var(--text-secondary); text-align: center; padding: 20px;">No files yet</p>';
          return;
        }

        list.innerHTML = files.map(file => `
          <div class="list-item">
            <div>
              <div style="font-weight: 600;">${file.name}</div>
              <div style="font-size: 12px; color: var(--text-secondary);">${Math.round(file.size / 1024)}KB - ${new Date(file.created).toLocaleString()}</div>
            </div>
            <button class="btn btn-danger" onclick="CalOS.deleteFile('${file.name}')">Delete</button>
          </div>
        `).join('');
      },

      deleteFile(filename) {
        if (confirm(`Delete ${filename}?`)) {
          delete this.storage.files[filename];
          localStorage.setItem('calos_files', JSON.stringify(this.storage.files));
          this.renderFilesList();
          this.updateStorageInfo();
        }
      },

      // API Keys
      async addApiKey() {
        const provider = document.getElementById('keyProvider').value;
        const key = document.getElementById('keyValue').value;

        if (!provider || !key) {
          alert('Please select a provider and enter an API key');
          return;
        }

        // Simple encryption (use proper crypto in production)
        const encrypted = btoa(key);

        this.storage.keys[provider] = {
          provider,
          key: encrypted,
          added: new Date().toISOString()
        };

        localStorage.setItem('calos_keys', JSON.stringify(this.storage.keys));

        document.getElementById('keyProvider').value = '';
        document.getElementById('keyValue').value = '';

        this.renderKeysList();
        this.updateStorageInfo();
      },

      renderKeysList() {
        const list = document.getElementById('keysList');
        const keys = Object.values(this.storage.keys);

        if (keys.length === 0) {
          list.innerHTML = '<p style="color: var(--text-secondary); text-align: center; padding: 20px;">No API keys configured</p>';
          return;
        }

        list.innerHTML = keys.map(k => `
          <div class="list-item">
            <div>
              <div style="font-weight: 600;">${k.provider}</div>
              <div style="font-size: 12px; color: var(--accent-green);">Encrypted • ${new Date(k.added).toLocaleDateString()}</div>
            </div>
            <button class="btn btn-danger" onclick="CalOS.deleteKey('${k.provider}')">Delete</button>
          </div>
        `).join('');
      },

      deleteKey(provider) {
        if (confirm(`Delete ${provider} API key?`)) {
          delete this.storage.keys[provider];
          localStorage.setItem('calos_keys', JSON.stringify(this.storage.keys));
          this.renderKeysList();
          this.updateStorageInfo();
        }
      },

      // Models
      async refreshModels() {
        try {
          const response = await fetch('http://localhost:11434/api/tags');
          const data = await response.json();
          const models = data.models || [];

          document.getElementById('modelCount').textContent = models.length;

          const list = document.getElementById('modelsList');
          list.innerHTML = models.map(m => `
            <div class="list-item">
              <div>
                <div style="font-weight: 600;">${m.name}</div>
                <div style="font-size: 12px; color: var(--text-secondary);">
                  ${Math.round(m.size / 1024 / 1024 / 1024 * 10) / 10}GB • ${m.details?.family || 'Unknown'}
                </div>
              </div>
              <button class="btn" onclick="CalOS.testModel('${m.name}')">Test</button>
            </div>
          `).join('');
        } catch (e) {
          document.getElementById('modelsList').innerHTML = `
            <p style="color: var(--accent-red); padding: 20px;">
              Ollama not available. Start with: <code>ollama serve</code>
            </p>
          `;
        }
      },

      async testModel(modelName) {
        alert(`Testing ${modelName}...\n\nThis would send a test prompt to Ollama.`);
      },

      // Chat
      async sendMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        if (!message) return;

        const model = document.getElementById('chatModel').value;

        // Add user message
        this.addChatMessage('user', message);
        input.value = '';

        // Simulate AI response (connect to backend in production)
        setTimeout(() => {
          this.addChatMessage('assistant', `Echo: ${message}\\n\\n(Connect to backend for real AI responses)`);
        }, 500);
      },

      addChatMessage(role, content) {
        const messages = document.getElementById('chatMessages');
        const div = document.createElement('div');
        div.style.cssText = `margin-bottom: 15px; padding: 12px; background: var(--bg-tertiary); border-radius: 8px; border-left: 3px solid ${role === 'user' ? 'var(--accent-blue)' : 'var(--accent-green)'}`;
        div.innerHTML = `
          <div style="font-size: 12px; color: var(--text-secondary); margin-bottom: 5px;">${role === 'user' ? 'You' : 'Assistant'}</div>
          <div style="white-space: pre-wrap;">${content}</div>
        `;
        messages.appendChild(div);
        messages.scrollTop = messages.scrollHeight;
      },

      // App Store
      installApp(appId) {
        if (confirm(`Install ${appId} app?`)) {
          this.storage.installed_apps.push(appId);
          localStorage.setItem('calos_apps', JSON.stringify(this.storage.installed_apps));
          alert(`${appId} installed! (Demo)`);
        }
      },

      // Settings
      saveSettings() {
        this.storage.settings.backendUrl = document.getElementById('backendUrl').value;
        localStorage.setItem('calos_settings', JSON.stringify(this.storage.settings));
        alert('Settings saved!');
      },

      // Service Worker
      async registerServiceWorker() {
        try {
          // Inline service worker for offline support
          const swCode = `
            self.addEventListener('install', (e) => {
              console.log('[SW] Install');
              self.skipWaiting();
            });

            self.addEventListener('activate', (e) => {
              console.log('[SW] Activate');
            });

            self.addEventListener('fetch', (e) => {
              // Cache-first strategy
              e.respondWith(
                caches.match(e.request).then(response => {
                  return response || fetch(e.request);
                })
              );
            });
          `;

          const blob = new Blob([swCode], { type: 'application/javascript' });
          const swUrl = URL.createObjectURL(blob);

          const registration = await navigator.serviceWorker.register(swUrl);
          console.log('[CalOS] Service Worker registered:', registration);
        } catch (e) {
          console.error('[CalOS] SW registration failed:', e);
        }
      }
    };

    // Boot CalOS
    window.addEventListener('DOMContentLoaded', () => CalOS.init());

    // Handle keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Cmd/Ctrl + K = Open chat
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        CalOS.openWindow('chatWindow');
      }
    });
  </script>
</body>
</html>
